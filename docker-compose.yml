version: '3.8'

services:
  # PXL Proof Server - Core verification service
  pxl-prover:
    build:
      context: ./pxl-prover
      dockerfile: Dockerfile
    container_name: logos-pxl-prover
    ports:
      - "8088:8088"
    volumes:
      - ./configs/config.json:/app/configs/config.json:ro
      - ./pxl-minimal-kernel-main:/app/pxl-minimal-kernel-main:ro
    environment:
      - FLASK_ENV=production
      - EXPECTED_KERNEL_HASH=${EXPECTED_KERNEL_HASH:-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # LOGOS Core Services - Main AGI runtime
  logos-core:
    build:
      context: .
      dockerfile: Dockerfile.logos-core
    container_name: logos-core
    ports:
      - "5000:5000"  # Keryx API Gateway
      - "5001:5001"  # Logos Nexus
      - "5002:5002"  # Archon Nexus
    volumes:
      - ./configs/config.json:/app/configs/config.json:ro
      - ./audit:/app/audit
      - ./logs:/app/logs
    environment:
      - PXL_PROVER_URL=http://pxl-prover:8088
      - EXPECTED_KERNEL_HASH=${EXPECTED_KERNEL_HASH:-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855}
      - AUDIT_PATH=/app/audit/decisions.jsonl
      - PYTHONPATH=/app
    depends_on:
      pxl-prover:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # LOGOS API Service - Core authorization and proof-gating endpoint
  logos-api:
    build:
      context: .
      dockerfile: services/logos_api/Dockerfile
    container_name: logos-api
    environment:
      - API_SIGNING_SECRET=${API_SIGNING_SECRET:-}
      - TOKEN_TTL_SECS=${TOKEN_TTL_SECS:-300}
      - KERNEL_HASH=${KERNEL_HASH:-}
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:8090/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks: [default]
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: logos-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=logos
      - RABBITMQ_DEFAULT_PASS=trinity
      - RABBITMQ_DEFAULT_VHOST=logos
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: logos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database (optional - for persistent storage)
  postgres:
    image: postgres:15-alpine
    container_name: logos-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=logos_agi
      - POSTGRES_USER=logos
      - POSTGRES_PASSWORD=trinity_grounded
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logos -d logos_agi"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ARCHON Gateway - HTTP API gateway with proof-gated dispatch
  archon:
    build:
      context: ./services/archon
      dockerfile: Dockerfile
    container_name: logos-archon
    ports:
      - "8075:8075"
    volumes:
      - ./services:/app/services
      - ../LOGOS_AGI/v4:/v4
    environment:
      - RABBIT_URL=amqp://logos:trinity@rabbitmq:5672/logos
      - LOGOS_API_URL=http://logos-api:8090
      - V4PATH=/v4
    depends_on:
      rabbitmq:
        condition: service_healthy
      logos-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8075/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # TELOS Worker - Causal prediction and intervention analysis
  telos:
    build:
      context: ./services/workers/telos
      dockerfile: Dockerfile
    container_name: logos-telos
    volumes:
      - ./services:/app/services
      - ../LOGOS_AGI/v4:/v4
      - model_cache:/root/.cache
    environment:
      - RABBIT_URL=amqp://logos:trinity@rabbitmq:5672/logos
      - SUBSYS=TELOS
      - ROUTE=telos
      - V4PATH=/v4
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # TETRAGNOS Worker - NLP and semantic analysis
  tetragnos:
    build:
      context: ./services/workers/tetragnos
      dockerfile: Dockerfile
    container_name: logos-tetragnos
    volumes:
      - ./services:/app/services
      - ../LOGOS_AGI/v4:/v4
      - model_cache:/root/.cache
    environment:
      - RABBIT_URL=amqp://logos:trinity@rabbitmq:5672/logos
      - SUBSYS=TETRAGNOS
      - ROUTE=tetragnos
      - V4PATH=/v4
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # THONOC Worker - Logical reasoning and theorem proving
  thonoc:
    build:
      context: ./services/workers/thonoc
      dockerfile: Dockerfile
    container_name: logos-thonoc
    volumes:
      - ./services:/app/services
      - ../LOGOS_AGI/v4:/v4
      - model_cache:/root/.cache
    environment:
      - RABBIT_URL=amqp://logos:trinity@rabbitmq:5672/logos
      - SUBSYS=THONOC
      - ROUTE=thonoc
      - V4PATH=/v4
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # TETRAGNOS Toolkit - Pattern recognition and text clustering
  toolkit-tetragnos:
    build:
      context: ./services/toolkits/tetragnos
      dockerfile: Dockerfile
    container_name: toolkit-tetragnos
    ports:
      - "8065:8000"
    networks:
      - default
    volumes:
      - ./model_cache:/root/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Crawl Toolkit - Proof-gated web content fetching
  toolkit-crawl:
    build:
      context: ./services/toolkits/crawl
      dockerfile: Dockerfile
    container_name: toolkit-crawl
    ports:
      - "8064:8000"
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Probe Console - Interactive web UI for testing proof-gated operations
  probe-console:
    build:
      context: ./services/probe_console
      dockerfile: Dockerfile
    container_name: probe-console
    ports:
      - "8081:8000"
    environment:
      - ARCHON_URL=http://archon:8000
      - LOGOS_URL=http://logos-api:8090
      - EXEC_URL=http://executor:8000
    networks:
      - default
    depends_on:
      - archon
      - logos-core
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Tool Router - Routes toolkit requests
  tool-router:
    build:
      context: .
      dockerfile: services/tool_router/Dockerfile
    container_name: tool-router
    ports:
      - "8071:8071"
    environment:
      - WEB_URL=http://web:8000
      - DB_URL=http://db:8000
      - FS_URL=http://fs:8000
      - CRAWL_URL=http://toolkit-crawl:8000
      - TETRAGNOS_URL=http://toolkit-tetragnos:8000
      - TELOS_URL=http://telos:8000
      - THONOC_URL=http://thonoc:8000
      - USE_REDIS_RATE_LIMIT=${USE_REDIS_RATE_LIMIT:-false}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SIGNING_SECRET=${SIGNING_SECRET:-}
      - SIGNING_MAX_SKEW_SECS=${SIGNING_MAX_SKEW_SECS:-300}
      - RETRY_MAX_ATTEMPTS=${RETRY_MAX_ATTEMPTS:-3}
      - RETRY_BASE_SECS=${RETRY_BASE_SECS:-0.2}
      - RETRY_JITTER_SECS=${RETRY_JITTER_SECS:-0.2}
      - CB_FAIL_THRESHOLD=${CB_FAIL_THRESHOLD:-5}
      - CB_COOLDOWN_SECS=${CB_COOLDOWN_SECS:-30}
    networks:
      - default
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8071/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Executor - Proof-gated task execution
  executor:
    build:
      context: ./services/executor
      dockerfile: Dockerfile
    container_name: executor
    ports:
      - "8072:8072"
    environment:
      - TOOL_ROUTER_URL=http://tool-router:8071
    networks:
      - default
    command: ["python", "-m", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8072"]
    depends_on:
      - tool-router
      - toolkit-tetragnos
    restart: unless-stopped

  # Interactive Chat - GPT-enhanced conversational interface
  interactive-chat:
    build:
      context: ./services/interactive_chat
      dockerfile: ../executor/Dockerfile  # Reuse simple dockerfile
    container_name: interactive-chat
    ports:
      - "8080:8080"
    environment:
      - LOGOS_API_URL=http://logos-api:8090
      - TOOL_ROUTER_URL=http://tool-router:8071
    networks:
      - default
    command: ["python", "-m", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8080"]
    depends_on:
      - logos-api
      - tool-router
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  model_cache:
    driver: local

networks:
  default:
    name: logos-network
    driver: bridge

# Development override with docker-compose.override.yml:
# - Add volume mounts for live code reload
# - Enable debug logging
# - Expose additional ports for debugging