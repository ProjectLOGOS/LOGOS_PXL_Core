name: Verified Slice CI

on:
  push:
    branches: [ main, release/** ]
    paths:
      - 'modules/IEL/source/**'
      - 'pxl-minimal-kernel-main/**'
      - 'tools/verified_slice.lst'
      - '_CoqProject'
  pull_request:
    branches: [ main, release/** ]
    paths:
      - 'modules/IEL/source/**'
      - 'pxl-minimal-kernel-main/**'
      - 'tools/verified_slice.lst'
      - '_CoqProject'

jobs:
  verify-slice:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Coq
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: '8.20'
        ocaml_version: '4.14-flambda'

    - name: Cache Coq dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.opam
          _build
        key: coq-${{ runner.os }}-${{ hashFiles('**/*.v') }}
        restore-keys: |
          coq-${{ runner.os }}-

    - name: Build verified slice
      run: |
        coq_makefile -f _CoqProject -o Makefile.coq
        make -f Makefile.coq

    - name: coqchk verification
      run: |
        while IFS= read -r module; do
          echo "Verifying $module..."
          coqchk -Q pxl-minimal-kernel-main/coq PXLs -Q modules/IEL/source PXLs.IEL.Source "$module"
        done < tools/verified_slice.lst

    - name: Scan for Axiom/Admitted contamination
      run: |
        if grep -r "^Axiom\|^Admitted" modules/IEL/source/; then
          echo "❌ Axiom/Admitted contamination detected in verified slice!"
          exit 1
        else
          echo "✅ No Axiom/Admitted contamination found"
        fi

    - name: Verify quarantine integrity
      run: |
        # Ensure quarantined files are in experimental/ directories
        if find modules/IEL -name "*.v" -exec grep -l "^Axiom\|^Admitted\|^Parameter" {} \; | grep -v experimental/; then
          echo "❌ Unquarantined Axiom/Admitted/Parameter found!"
          exit 1
        else
          echo "✅ All axioms/parameters properly quarantined"
        fi

    - name: Generate verification report
      run: |
        echo "# Verification Report" > verification_report.md
        echo "- Date: $(date)" >> verification_report.md
        echo "- Commit: ${{ github.sha }}" >> verification_report.md
        echo "- Status: ✅ PASSED" >> verification_report.md
        echo "" >> verification_report.md
        echo "## Verified Modules" >> verification_report.md
        cat tools/verified_slice.lst >> verification_report.md

    - name: Upload verification report
      uses: actions/upload-artifact@v3
      with:
        name: verification-report
        path: verification_report.md

  security-scan:
    runs-on: ubuntu-latest
    needs: verify-slice

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  provenance:
    runs-on: ubuntu-latest
    needs: [verify-slice, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: '.'
        artifact-name: sbom.spdx
        format: spdx-json
        upload-artifact: true

    - name: Verify git tag for verified releases
      if: contains(github.ref, 'v3.0.0-verified')
      run: |
        echo "✅ Verified release tag detected: ${{ github.ref }}"