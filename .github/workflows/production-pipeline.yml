name: LOGOS PXL Core - Production Pipeline

on:
  push:
    branches: [ main, release/* ]
  pull_request:
    branches: [ main, release/* ]

env:
  COQ_VERSION: 8.20.1

jobs:
  # Stage 1: Coq Build and Verification
  coq-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Coq
        uses: coq-community/docker-coq-action@v1
        with:
          coq_version: ${{ env.COQ_VERSION }}
          ocaml_version: 4.14-flambda

      - name: Install dependencies
        run: |
          opam install -y coq-extraction-plugin

      - name: Build Coq project
        run: |
          coq_makefile -f _CoqProject -o Makefile
          make -j2 V=1

      - name: Run coqchk verification
        run: |
          coqchk -Q pxl-minimal-kernel-main/coq PXLs -Q modules/IEL/source PXLs.IEL.Source -Q modules/IEL/infra PXLs.IEL.Infra -Q modules/IEL/pillars PXLs.IEL.Pillars -Q coq/Guards PXLs.V4.Guards -Q coq/V4Adapters PXLs.V4.Adapters -Q third_party/logos_agi_v4/coq V4 PXLs.PXLv3

      - name: Check for Axiom/Admitted
        run: |
          if grep -r "Axiom\|Admitted" coq/ --exclude-dir=experimental; then
            echo "ERROR: Found Axiom or Admitted outside experimental/"
            exit 1
          fi

      - name: Extract OCaml code
        run: |
          make extraction

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coq-build-artifacts
          path: |
            extraction/
            _CoqProject

  # Stage 2: Docker Image Build and Security
  docker-build:
    needs: coq-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: coq-build-artifacts
          path: extraction/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PXL Core image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile.pxl-core
          tags: logos-pxl-core:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Overlay Chrono image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile.overlay-chrono
          tags: logos-overlay-chrono:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Overlay V4 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile.overlay-v4
          tags: logos-overlay-v4:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Gateway image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile.gateway
          tags: logos-gateway:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build GUI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./gui/Dockerfile
          tags: logos-gui:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'logos-pxl-core:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Stage 3: E2E and Load Testing
  e2e-tests:
    needs: docker-build
    runs-on: ubuntu-latest
    services:
      pxl-core:
        image: logos-pxl-core:latest
        ports:
          - 8080:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/healthz || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      overlay-chrono:
        image: logos-overlay-chrono:latest
        ports:
          - 8081:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      overlay-v4:
        image: logos-overlay-v4:latest
        ports:
          - 8082:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      gateway:
        image: logos-gateway:latest
        ports:
          - 80:8080
        env:
          JWT_SECRET_KEY: test-secret-key-for-ci
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          cd gui
          npm install
          npx playwright install --with-deps

      - name: Run GUI contract tests
        run: |
          cd gui
          npx playwright test --config=playwright.config.ts

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.49.0/k6-v0.49.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.49.0-linux-amd64/k6 /usr/local/bin/

      - name: Run k6 load tests
        run: |
          k6 run -e BASE_URL=http://localhost k6/gui_end_to_end.js

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            gui/test-results/
            k6-results.json

  # Stage 4: Production Deployment (manual trigger)
  deploy:
    needs: [coq-build, docker-build, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Production deployment would happen here"
          echo "Using docker-compose.prod.yml with production secrets"