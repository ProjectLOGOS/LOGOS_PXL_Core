# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd

from ..compat import DTYPE

__all__ = ["load_ausbeer"]


def load_ausbeer(as_series=False, dtype=DTYPE):
    """Quarterly beer production data.

    Total quarterly beer production in Australia (in megalitres)
    from 1956:Q1 to 2008:Q3

    Parameters
    ----------
    as_series : bool, optional (default=False)
        Whether to return a Pandas series. If False, will return a 1d
        numpy array.

    dtype : type, optional (default=np.float64)
        The type to return for the array. Default is np.float64, which is used
        throughout the package as the default type.

    Returns
    -------
    rslt : array-like, shape=(n_samples,)
        The ausbeer vector.

    Examples
    --------
    >>> from pmdarima.datasets import load_ausbeer
    >>> load_ausbeer()
    array([284., 213., 227., 308., 262., 228., 236., 320., 272., 233., 237.,
           313., 261., 227., 250., 314., 286., 227., 260., 311., 295., 233.,
           257., 339., 279., 250., 270., 346., 294., 255., 278., 363., 313.,
           273., 300., 370., 331., 288., 306., 386., 335., 288., 308., 402.,
           353., 316., 325., 405., 393., 319., 327., 442., 383., 332., 361.,
           446., 387., 357., 374., 466., 410., 370., 379., 487., 419., 378.,
           393., 506., 458., 387., 427., 565., 465., 445., 450., 556., 500.,
           452., 435., 554., 510., 433., 453., 548., 486., 453., 457., 566.,
           515., 464., 431., 588., 503., 443., 448., 555., 513., 427., 473.,
           526., 548., 440., 469., 575., 493., 433., 480., 576., 475., 405.,
           435., 535., 453., 430., 417., 552., 464., 417., 423., 554., 459.,
           428., 429., 534., 481., 416., 440., 538., 474., 440., 447., 598.,
           467., 439., 446., 567., 485., 441., 429., 599., 464., 424., 436.,
           574., 443., 410., 420., 532., 433., 421., 410., 512., 449., 381.,
           423., 531., 426., 408., 416., 520., 409., 398., 398., 507., 432.,
           398., 406., 526., 428., 397., 403., 517., 435., 383., 424., 521.,
           421., 402., 414., 500., 451., 380., 416., 492., 428., 408., 406.,
           506., 435., 380., 421., 490., 435., 390., 412., 454., 416., 403.,
           408., 482., 438., 386., 405., 491., 427., 383., 394., 473., 420.,
           390., 410.,  nan])

    >>> load_ausbeer(True).head()
    0    284.0
    1    213.0
    2    227.0
    3    308.0
    4    262.0
    dtype: float64

    Notes
    -----
    This is quarterly data, so *m* should be set to 4 when using in a seasonal
    context.

    References
    ----------
    .. [1] https://www.rdocumentation.org/packages/fpp/versions/0.5/topics/ausbeer
    """  # noqa: E501
    rslt = np.array(
        [
            284.0,
            213.0,
            227.0,
            308.0,
            262.0,
            228.0,
            236.0,
            320.0,
            272.0,
            233.0,
            237.0,
            313.0,
            261.0,
            227.0,
            250.0,
            314.0,
            286.0,
            227.0,
            260.0,
            311.0,
            295.0,
            233.0,
            257.0,
            339.0,
            279.0,
            250.0,
            270.0,
            346.0,
            294.0,
            255.0,
            278.0,
            363.0,
            313.0,
            273.0,
            300.0,
            370.0,
            331.0,
            288.0,
            306.0,
            386.0,
            335.0,
            288.0,
            308.0,
            402.0,
            353.0,
            316.0,
            325.0,
            405.0,
            393.0,
            319.0,
            327.0,
            442.0,
            383.0,
            332.0,
            361.0,
            446.0,
            387.0,
            357.0,
            374.0,
            466.0,
            410.0,
            370.0,
            379.0,
            487.0,
            419.0,
            378.0,
            393.0,
            506.0,
            458.0,
            387.0,
            427.0,
            565.0,
            465.0,
            445.0,
            450.0,
            556.0,
            500.0,
            452.0,
            435.0,
            554.0,
            510.0,
            433.0,
            453.0,
            548.0,
            486.0,
            453.0,
            457.0,
            566.0,
            515.0,
            464.0,
            431.0,
            588.0,
            503.0,
            443.0,
            448.0,
            555.0,
            513.0,
            427.0,
            473.0,
            526.0,
            548.0,
            440.0,
            469.0,
            575.0,
            493.0,
            433.0,
            480.0,
            576.0,
            475.0,
            405.0,
            435.0,
            535.0,
            453.0,
            430.0,
            417.0,
            552.0,
            464.0,
            417.0,
            423.0,
            554.0,
            459.0,
            428.0,
            429.0,
            534.0,
            481.0,
            416.0,
            440.0,
            538.0,
            474.0,
            440.0,
            447.0,
            598.0,
            467.0,
            439.0,
            446.0,
            567.0,
            485.0,
            441.0,
            429.0,
            599.0,
            464.0,
            424.0,
            436.0,
            574.0,
            443.0,
            410.0,
            420.0,
            532.0,
            433.0,
            421.0,
            410.0,
            512.0,
            449.0,
            381.0,
            423.0,
            531.0,
            426.0,
            408.0,
            416.0,
            520.0,
            409.0,
            398.0,
            398.0,
            507.0,
            432.0,
            398.0,
            406.0,
            526.0,
            428.0,
            397.0,
            403.0,
            517.0,
            435.0,
            383.0,
            424.0,
            521.0,
            421.0,
            402.0,
            414.0,
            500.0,
            451.0,
            380.0,
            416.0,
            492.0,
            428.0,
            408.0,
            406.0,
            506.0,
            435.0,
            380.0,
            421.0,
            490.0,
            435.0,
            390.0,
            412.0,
            454.0,
            416.0,
            403.0,
            408.0,
            482.0,
            438.0,
            386.0,
            405.0,
            491.0,
            427.0,
            383.0,
            394.0,
            473.0,
            420.0,
            390.0,
            410.0,
            None,
        ]
    ).astype(dtype)

    if as_series:
        return pd.Series(rslt)
    return rslt
