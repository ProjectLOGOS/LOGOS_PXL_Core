1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.interactiveChat.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "logos.interactiveChat.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.interactiveChat.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "logos.interactiveChat.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "logos.interactiveChat.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.interactiveChat.service.port }}
{{- else if contains "ClusterIP" .Values.interactiveChat.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "logos.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=interactive-chat" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:{{ .Values.interactiveChat.service.port }} to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME {{ .Values.interactiveChat.service.port }}:$CONTAINER_PORT
{{- end }}

2. Monitor your deployment:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }}"

3. Check the logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=tool-router"
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=logos-api"
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=interactive-chat"

4. Access the metrics:
{{- if .Values.ingress.enabled }}
  Tool Router metrics: http{{ if .Values.ingress.tls }}s{{ end }}://{{ (index .Values.ingress.hosts 0).host }}/router/metrics
{{- else }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "logos.toolRouter.fullname" . }} 9090:9090
  # Then visit http://localhost:9090/metrics
{{- end }}

5. Scale your deployment:
  kubectl scale --namespace {{ .Release.Namespace }} deployment {{ include "logos.toolRouter.fullname" . }} --replicas=3
  kubectl scale --namespace {{ .Release.Namespace }} deployment {{ include "logos.logosApi.fullname" . }} --replicas=2

{{- if .Values.global.signingSecret }}

‚ö†Ô∏è  SECURITY NOTICE:
Your deployment includes HMAC signing with a configured secret. Keep your signing secrets secure and rotate them regularly.
{{- end }}

{{- if .Values.monitoring.serviceMonitor.enabled }}

üìä MONITORING:
Prometheus ServiceMonitor is enabled. Your metrics will be automatically discovered by Prometheus if the prometheus-operator is installed.
{{- end }}

{{- if not .Values.global.useRedisLimiter }}

‚ö†Ô∏è  RATE LIMITING:
You're using in-memory rate limiting. For production deployments with multiple replicas, consider enabling Redis rate limiting by setting global.useRedisLimiter=true.
{{- end }}