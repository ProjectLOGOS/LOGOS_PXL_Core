version: '3.8'

services:
  # LOGOS Unified Runtime Service
  logos-unified:
    image: logos/agi-unified:0.7-rc2
    container_name: logos-unified-runtime
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - LOGOS_VERSION=0.7-rc2
      - VERIFICATION_THRESHOLD=0.7
      - MAX_CONCURRENT_REQUESTS=1000
      - ENABLE_NEURAL_PROCESSING=true
      - ENABLE_DISTRIBUTED_RUNTIME=true
      - RABBITMQ_URL=amqp://logos:secure_pass@rabbitmq:5672/
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_ENABLED=true
    depends_on:
      - redis
      - rabbitmq
    networks:
      - logos-network
    volumes:
      - logos-data:/app/data
      - logs-volume:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Proof Server Service
  logos-proof-server:
    image: logos/agi-unified:0.7-rc2
    container_name: logos-proof-server
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - LOGOS_SERVICE_MODE=proof_server
      - VERIFICATION_THRESHOLD=0.7
      - COQ_TIMEOUT=30
      - LEAN_TIMEOUT=30
    command: ["python", "-m", "LOGOS_AGI.v7.runtime_services.proof_server"]
    networks:
      - logos-network
    volumes:
      - logos-proofs:/app/proofs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Adaptive Reasoning Engine
  logos-reasoning:
    image: logos/agi-unified:0.7-rc2
    container_name: logos-reasoning-engine
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - LOGOS_SERVICE_MODE=reasoning_engine
      - BAYESIAN_CACHE_SIZE=10000
      - SEMANTIC_MODEL_PATH=/app/models
    command: ["python", "-m", "LOGOS_AGI.v7.adaptive_reasoning.reasoning_service"]
    networks:
      - logos-network
    volumes:
      - logos-models:/app/models
      - logos-cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: logos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - logos-network
    volumes:
      - redis-data:/data
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: logos-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=logos
      - RABBITMQ_DEFAULT_PASS=secure_pass
      - RABBITMQ_DEFAULT_VHOST=/
    networks:
      - logos-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: logos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - logos-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: logos-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - logos-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: logos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - logos-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - logos-unified
      - logos-proof-server
      - logos-reasoning
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  logos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  logos-data:
    driver: local
  logos-proofs:
    driver: local
  logos-models:
    driver: local
  logos-cache:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs-volume:
    driver: local
