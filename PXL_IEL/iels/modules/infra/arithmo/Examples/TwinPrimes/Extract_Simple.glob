DIGEST dff9e30c2c166c9a9cd440571a5c3cf7
FIEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple
R153:157 Coq.Arith.Arith <> <> lib
R159:162 Coq.Bool.Bool <> <> lib
R164:167 Coq.Lists.List <> <> lib
R213:219 IEL.ArithmoPraxis.Core.Numbers <> <> lib
R221:229 IEL.ArithmoPraxis.Core.ModalWrap <> <> lib
R290:293 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> <> lib
R304:316 Coq.Lists.List ListNotations <> mod
def 446:455 <> check_twin
R462:464 Coq.Init.Datatypes <> nat ind
binder 458:458 <> p:1
R469:472 Coq.Init.Datatypes <> bool ind
R479:482 Coq.Init.Datatypes <> andb def
R520:549 IEL.ArithmoPraxis.Core.Numbers ArithmoPraxis_Numbers is_prime def
R553:555 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R552:552 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:1 var
R485:514 IEL.ArithmoPraxis.Core.Numbers ArithmoPraxis_Numbers is_prime def
R516:516 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:1 var
def 634:647 <> find_twin_upto
R654:656 Coq.Init.Datatypes <> nat ind
binder 650:650 <> n:2
R661:666 Coq.Init.Datatypes <> option ind
R668:670 Coq.Init.Datatypes <> nat ind
R683:683 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:2 var
R699:702 Coq.Init.Datatypes <> None constr
R713:716 Coq.Init.Datatypes <> None constr
R729:732 Coq.Init.Datatypes <> None constr
R738:738 Coq.Init.Datatypes <> S constr
R749:758 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
R760:760 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:2 var
R779:792 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto:3 def
R767:770 Coq.Init.Datatypes <> Some constr
R772:772 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:2 var
def 850:867 <> extract_twins_upto
R874:876 Coq.Init.Datatypes <> nat ind
binder 870:870 <> n:5
R881:884 Coq.Init.Datatypes <> list ind
R886:888 Coq.Init.Datatypes <> nat ind
R901:901 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:5 var
R917:918 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R929:930 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R941:942 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R948:948 Coq.Init.Datatypes <> S constr
R973:990 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> extract_twins_upto:6 def
binder 965:968 <> rest:8
R1005:1014 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
R1016:1016 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:5 var
R1038:1041 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> rest:8 var
R1024:1027 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R1023:1023 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:5 var
R1028:1031 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> rest:8 var
prf 1176:1191 <> check_twin_sound
binder 1202:1202 <> p:9
R1226:1229 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1219:1221 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1207:1216 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
R1218:1218 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:9 var
R1222:1225 Coq.Init.Datatypes <> true constr
R1230:1233 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1235:1235 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:9 var
R1268:1277 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
R1294:1297 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
prf 1444:1468 <> check_twin_complete_small
binder 1479:1479 <> p:10
R1493:1496 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1485:1488 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R1484:1484 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:10 var
R1503:1506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1497:1500 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1502:1502 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:10 var
R1519:1521 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1507:1516 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
R1518:1518 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:10 var
R1522:1525 Coq.Init.Datatypes <> true constr
prf 1639:1658 <> find_twin_upto_sound
binder 1669:1669 <> n:11
binder 1671:1671 <> p:12
R1701:1704 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1692:1694 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1676:1689 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto def
R1691:1691 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:11 var
R1695:1698 Coq.Init.Datatypes <> Some constr
R1700:1700 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:12 var
R1711:1714 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1705:1708 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1710:1710 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:12 var
R1716:1719 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R1715:1715 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:12 var
R1720:1720 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:11 var
prf 1841:1862 <> extract_twins_complete
binder 1873:1873 <> n:13
binder 1875:1875 <> p:14
R1886:1889 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1881:1884 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R1880:1880 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:14 var
R1885:1885 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:13 var
R1896:1899 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1890:1893 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1895:1895 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:14 var
R1900:1901 Coq.Lists.List <> In def
R1906:1923 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> extract_twins_upto def
R1925:1925 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:13 var
R1903:1903 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:14 var
def 2093:2102 <> first_twin
R2106:2111 Coq.Init.Datatypes <> option ind
R2113:2115 Coq.Init.Datatypes <> nat ind
R2120:2133 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto def
def 2187:2194 <> twins_30
R2198:2201 Coq.Init.Datatypes <> list ind
R2203:2205 Coq.Init.Datatypes <> nat ind
R2210:2227 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> extract_twins_upto def
prf 2298:2312 <> first_twin_is_3
R2326:2328 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2316:2325 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> first_twin def
R2329:2332 Coq.Init.Datatypes <> Some constr
R2388:2397 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> first_twin def
R2400:2413 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto def
R2416:2425 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> check_twin def
def 2628:2645 <> modal_extract_twin
R2652:2654 Coq.Init.Datatypes <> nat ind
binder 2648:2648 <> n:15
R2723:2728 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2662:2693 IEL.ArithmoPraxis.Core.ModalWrap ArithmoPraxis_ModalWrap Possibly defax
R2696:2702 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2704:2705 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 2703:2703 <> p:16
R2712:2715 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2707:2710 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R2706:2706 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:16 var
R2711:2711 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:15 var
R2716:2719 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R2721:2721 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:16 var
R2751:2754 Coq.Init.Specif <> ::type_scope:x_'+'_'{'_x_'}' not
R2782:2782 Coq.Init.Specif <> ::type_scope:x_'+'_'{'_x_'}' not
R2729:2729 Coq.Init.Specif <> ::type_scope:'{'_x_'|'_x_'}' not
R2731:2733 Coq.Init.Specif <> ::type_scope:'{'_x_'|'_x_'}' not
R2750:2750 Coq.Init.Specif <> ::type_scope:'{'_x_'|'_x_'}' not
binder 2730:2730 <> p:17
R2740:2743 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2735:2738 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R2734:2734 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:17 var
R2739:2739 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:15 var
R2744:2747 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R2749:2749 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:17 var
binder 2762:2762 <> p:18
R2771:2774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2766:2769 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R2765:2765 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:18 var
R2770:2770 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> n:15 var
R2775:2775 Coq.Init.Logic <> ::type_scope:'~'_x not
R2776:2779 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R2781:2781 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> p:18 var
R2859:2872 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto def
R2859:2872 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract_Simple <> find_twin_upto def
