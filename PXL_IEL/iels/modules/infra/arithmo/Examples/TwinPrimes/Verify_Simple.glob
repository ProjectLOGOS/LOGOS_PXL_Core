DIGEST 489c5c38ba143b08cfc69b3229f90b51
FIEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple
R164:168 Coq.Arith.Arith <> <> lib
R170:173 Coq.Bool.Bool <> <> lib
R175:178 Coq.Lists.List <> <> lib
R224:230 IEL.ArithmoPraxis.Core.Numbers <> <> lib
R232:240 IEL.ArithmoPraxis.Core.ModalWrap <> <> lib
R301:304 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> <> lib
R306:312 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> <> lib
R323:335 Coq.Lists.List ListNotations <> mod
def 434:449 <> verify_all_twins
R456:459 Coq.Init.Datatypes <> list ind
R461:463 Coq.Init.Datatypes <> nat ind
binder 452:452 <> l:1
R468:471 Coq.Init.Datatypes <> bool ind
R484:484 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:1 var
R495:496 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R501:504 Coq.Init.Datatypes <> true constr
R511:514 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R523:526 Coq.Init.Datatypes <> andb def
R544:559 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins:2 def
R529:538 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> check_twin def
def 628:642 <> verify_coverage
R649:651 Coq.Init.Datatypes <> nat ind
binder 645:645 <> n:4
R656:659 Coq.Init.Datatypes <> bool ind
R672:685 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> find_twin_upto def
R687:687 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:4 var
R698:701 Coq.Init.Datatypes <> Some constr
R708:711 Coq.Init.Datatypes <> true constr
R717:720 Coq.Init.Datatypes <> None constr
R725:729 Coq.Init.Datatypes <> false constr
def 794:809 <> verify_monotonic
R816:819 Coq.Init.Datatypes <> list ind
R821:823 Coq.Init.Datatypes <> nat ind
binder 812:812 <> l:5
R828:831 Coq.Init.Datatypes <> bool ind
R844:844 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:5 var
R855:856 Coq.Lists.List ListNotations ::list_scope:'['_']' not
R861:864 Coq.Init.Datatypes <> true constr
R870:870 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R872:872 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R877:880 Coq.Init.Datatypes <> true constr
R888:892 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R913:913 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R896:899 Coq.Init.Datatypes <> ::list_scope:x_'::'_x not
R918:921 Coq.Init.Datatypes <> andb def
R935:950 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_monotonic:6 def
R926:929 Coq.Arith.PeanoNat <> ::nat_scope:x_'<?'_x not
prf 1057:1078 <> verify_all_twins_sound
binder 1089:1089 <> l:8
R1119:1125 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1112:1114 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1094:1109 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins def
R1111:1111 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:8 var
R1115:1118 Coq.Init.Datatypes <> true constr
binder 1133:1133 <> p:9
R1142:1145 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1136:1137 Coq.Lists.List <> In def
R1141:1141 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:8 var
R1139:1139 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:9 var
R1146:1149 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1151:1151 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:9 var
prf 1306:1326 <> verify_coverage_sound
binder 1337:1337 <> n:10
R1366:1369 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1359:1361 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1342:1356 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_coverage def
R1358:1358 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:10 var
R1362:1365 Coq.Init.Datatypes <> true constr
R1370:1378 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> TwinCover def
R1380:1380 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:10 var
R1413:1427 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_coverage def
R1444:1452 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> TwinCover def
prf 1557:1578 <> verify_monotonic_sound
binder 1589:1589 <> l:11
R1619:1624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1612:1614 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1594:1609 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_monotonic def
R1611:1611 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:11 var
R1615:1618 Coq.Init.Datatypes <> true constr
binder 1632:1632 <> i:12
binder 1634:1634 <> j:13
R1653:1656 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1638:1640 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<'_x not
R1642:1644 Coq.Init.Peano <> ::nat_scope:x_'<'_x_'<'_x not
R1637:1637 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> i:12 var
R1641:1641 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> j:13 var
R1641:1641 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> j:13 var
R1645:1650 Coq.Init.Datatypes <> length def
R1652:1652 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:11 var
R1666:1668 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R1657:1659 Coq.Lists.List <> nth def
R1663:1663 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:11 var
R1661:1661 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> i:12 var
R1669:1671 Coq.Lists.List <> nth def
R1675:1675 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:11 var
R1673:1673 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> j:13 var
prf 1859:1881 <> verified_twin_necessity
binder 1892:1892 <> p:14
R1916:1921 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1909:1911 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1897:1906 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> check_twin def
R1908:1908 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:14 var
R1912:1915 Coq.Init.Datatypes <> true constr
R1922:1956 IEL.ArithmoPraxis.Core.ModalWrap ArithmoPraxis_ModalWrap Necessarily defax
R1959:1965 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R1967:1968 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 1966:1966 <> q:15
R1969:1972 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R1974:1974 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> q:15 var
prf 2129:2151 <> verified_coverage_modal
binder 2162:2162 <> n:16
R2191:2196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2184:2186 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2167:2181 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_coverage def
R2183:2183 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:16 var
R2187:2190 Coq.Init.Datatypes <> true constr
R2197:2231 IEL.ArithmoPraxis.Core.ModalWrap ArithmoPraxis_ModalWrap Necessarily defax
R2234:2242 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> TwinCover def
R2244:2244 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:16 var
def 2401:2415 <> verify_twins_30
R2419:2422 Coq.Init.Datatypes <> bool ind
R2427:2442 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins def
R2444:2451 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> twins_30 def
def 2500:2514 <> verify_cover_20
R2518:2521 Coq.Init.Datatypes <> bool ind
R2526:2540 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_coverage def
prf 2589:2611 <> verify_twins_30_correct
R2630:2632 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2615:2629 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_twins_30 def
R2633:2636 Coq.Init.Datatypes <> true constr
R2690:2704 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_twins_30 def
R2707:2722 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins def
prf 2882:2902 <> verification_complete
binder 2913:2913 <> n:17
R2918:2918 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2968:2975 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3067:3067 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 2926:2926 <> p:18
R2935:2938 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2930:2933 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R2929:2929 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:18 var
R2934:2934 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:17 var
R2945:2948 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2939:2942 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R2944:2944 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:18 var
R2961:2963 Coq.Init.Logic <> ::type_scope:x_'='_x not
R2949:2958 IEL.ArithmoPraxis.Examples.TwinPrimes.Extract <> check_twin def
R2960:2960 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:18 var
R2964:2967 Coq.Init.Datatypes <> true constr
binder 2983:2983 <> l:19
R2986:2986 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3023:3041 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 2994:2994 <> p:20
R3003:3006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2997:2998 Coq.Lists.List <> In def
R3002:3002 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:19 var
R3000:3000 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:20 var
R3013:3016 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R3008:3011 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R3007:3007 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:20 var
R3012:3012 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> n:17 var
R3017:3020 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R3022:3022 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:20 var
R3060:3062 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3042:3057 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins def
R3059:3059 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:19 var
R3063:3066 Coq.Init.Datatypes <> true constr
prf 3231:3256 <> verification_failure_sound
binder 3267:3267 <> l:21
R3298:3303 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3290:3292 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3272:3287 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> verify_all_twins def
R3289:3289 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:21 var
R3293:3297 Coq.Init.Datatypes <> false constr
R3304:3310 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R3312:3313 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 3311:3311 <> p:22
R3320:3323 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R3314:3315 Coq.Lists.List <> In def
R3319:3319 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> l:21 var
R3317:3317 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:22 var
R3324:3324 Coq.Init.Logic <> ::type_scope:'~'_x not
R3325:3328 IEL.ArithmoPraxis.Examples.TwinPrimes.Spec <> Twin def
R3330:3330 IEL.ArithmoPraxis.Examples.TwinPrimes.Verify_Simple <> p:22 var
