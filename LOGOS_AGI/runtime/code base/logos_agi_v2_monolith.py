--- START OF FILE .env ---

RABBITMQ_HOST=rabbitmq
PYTHONPATH=/app:/app/external_libraries
LOG_LEVEL=INFO

--- END OF FILE .env ---

--- START OF FILE __init__.py ---



--- END OF FILE __init__.py ---

--- START OF FILE docker-compose.yml ---

version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3.9-management-alpine"
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI

  keryx_api:
    build: ./services/keryx_api
    ports:
      - "5000:5000"
    env_file: .env
    depends_on:
      - rabbitmq

  # --- NEW ORACLE UI SERVICE ---
  oracle_ui:
    build: ./services/oracle_ui  # <-- CORRECTION: Point build context to the service directory
    ports:
      - "7860:7860"
    environment:
      - KERYX_API_URL=http://keryx_api:5000
    depends_on:
      - keryx_api

  database:
    build: ./services/database
    volumes:
      - db_data:/data
    env_file: .env
    depends_on:
      - rabbitmq

  logos_nexus:
    build: ./services/logos_nexus
    env_file: .env
    volumes:
      - ./config:/app/config:ro
    depends_on:
      - rabbitmq

  archon_nexus:
    build: ./services/archon_nexus
    env_file: .env
    volumes:
      - ./config:/app/config:ro
      - ./external_libraries:/app/external_libraries:ro
    environment:
      - PYTHONPATH=/app:/app/external_libraries/networkx-main
    depends_on:
      - rabbitmq

  tetragnos:
    build: ./subsystems/tetragnos
    env_file: .env
    volumes:
      - ./external_libraries:/app/external_libraries:ro
    environment:
      - PYTHONPATH=/app:/app/external_libraries/pytorch-main:/app/external_libraries/sentence-transformers-master
    depends_on:
      - rabbitmq

  thonoc:
    build: ./subsystems/thonoc
    env_file: .env
    volumes:
      - ./config:/app/config:ro
      - ./external_libraries:/app/external_libraries:ro
    environment:
      - PYTHONPATH=/app:/app/external_libraries/sympy-master # Example, adjust as needed
    depends_on:
      - rabbitmq

  telos:
    build: ./subsystems/telos
    env_file: .env
    volumes:
      - ./config:/app/config:ro
      - ./external_libraries:/app/external_libraries:ro
    environment:
      - PYTHONPATH=/app:/app/external_libraries/pymc-main:/app/external_libraries/arch-main:/app/external_libraries/filterpy-master:/app/external_libraries/pmdarima-master:/app/external_libraries/pykalman-main
    depends_on:
      - rabbitmq

volumes:
  db_data:

--- END OF FILE docker-compose.yml ---

--- START OF FILE config/__init__.py ---



--- END OF FILE config/__init__.py ---

--- START OF FILE config/bayes_priors.json ---

{
  "comment": "Complete ETG (Existence-Truth-Goodness) ontological property scores, using original benchmark scores and adding complex-number derived properties with corresponding ETG metrics",
  
  "original_benchmark_properties": {
    "existence": {"E": 0.9, "G": 0.6, "T": 0.8},
    "goodness": {"E": 0.6, "G": 0.95, "T": 0.85},
    "truth": {"E": 0.8, "G": 0.85, "T": 0.95},
    "morality": {"E": 0.7, "G": 0.9, "T": 0.7},
    "justice": {"E": 0.7, "G": 0.92, "T": 0.8},
    "mercy": {"E": 0.6, "G": 0.93, "T": 0.75},
    "love": {"E": 0.8, "G": 0.98, "T": 0.88},
    "consciousness": {"E": 0.85, "G": 0.5, "T": 0.7},
    "logic": {"E": 0.95, "G": 0.7, "T": 0.98},
    "coherence": {"E": 0.9, "G": 0.8, "T": 0.9},
    "objective": {"E": 0.8, "G": 0.7, "T": 0.9}
  },

  "extended_properties_from_complex_analysis": {
    "omniscience": {
      "E": 0.925,
      "G": 0.85,
      "T": 0.98,
      "derivation_note": "High existence (0.285 real → strong ontological grounding), very high truth (epistemological group), high goodness (divine attribute)",
      "complex_source": "0.285+0.01j, Epistemological group"
    },
    
    "omnipotence": {
      "E": 0.95,
      "G": 0.8,
      "T": 0.85,
      "derivation_note": "Highest existence (0.45 real → maximal causal power), high goodness (divine attribute), high truth",
      "complex_source": "0.45+0.1j, Causal group"
    },
    
    "omnipresence": {
      "E": 0.88,
      "G": 0.75,
      "T": 0.82,
      "derivation_note": "High existence (0.13 + 0.2j → spatial-temporal presence), moderate goodness, high truth",
      "complex_source": "0.13+0.2j, Spatial group"
    },
    
    "love": {
      "E": 0.8,
      "G": 0.98,
      "T": 0.88,
      "derivation_note": "Original benchmark maintained - highest goodness score, strong relational reality",
      "complex_source": "-0.4+0.6j, Relational group - original benchmark preserved"
    },
    
    "justice": {
      "E": 0.7,
      "G": 0.92,
      "T": 0.8,
      "derivation_note": "Original benchmark maintained - very high goodness with strong truth component",
      "complex_source": "-0.123+0.745j, Moral group - original benchmark preserved"
    },
    
    "mercy": {
      "E": 0.6,
      "G": 0.93,
      "T": 0.75,
      "derivation_note": "Original benchmark maintained - highest goodness category with transcendent quality",
      "complex_source": "0.355+0.355j, Moral group - original benchmark preserved"
    },
    
    "will": {
      "E": 0.9,
      "G": 0.75,
      "T": 0.78,
      "derivation_note": "High existence (-0.8 magnitude → strong volitional reality), moderate goodness, moderate-high truth",
      "complex_source": "-0.8+0.156j, Causal group"
    },
    
    "truthfulness": {
      "E": 0.82,
      "G": 0.88,
      "T": 0.96,
      "derivation_note": "High truth (epistemological group), high goodness (moral virtue), strong existence",
      "complex_source": "-0.701+0.28j, Epistemological group"
    },
    
    "goodness": {
      "E": 0.6,
      "G": 0.95,
      "T": 0.85,
      "derivation_note": "Original benchmark maintained - paradigmatic goodness property",
      "complex_source": "0.32+0.05j, Moral group - original benchmark preserved"
    },
    
    "beauty": {
      "E": 0.78,
      "G": 0.85,
      "T": 0.8,
      "derivation_note": "Good existence (aesthetic reality), high goodness (inherent value), high truth (aesthetic truth)",
      "complex_source": "0.34-0.08j, Aesthetic group"
    },
    
    "eternality": {
      "E": 0.92,
      "G": 0.7,
      "T": 0.85,
      "derivation_note": "Very high existence (temporal transcendence), moderate goodness, high truth",
      "complex_source": "0.1-0.65j, Temporal group"
    },
    
    "immutability": {
      "E": 0.88,
      "G": 0.78,
      "T": 0.9,
      "derivation_note": "High existence (stable reality), good goodness, very high truth (logical consistency)",
      "complex_source": "0.2+0.5j, Ontological group"
    },
    
    "simplicity": {
      "E": 0.95,
      "G": 0.82,
      "T": 0.95,
      "derivation_note": "Highest existence (-1.25 magnitude → fundamental reality), high goodness, highest truth",
      "complex_source": "-1.25+0.0j, Ontological group"
    },
    
    "freedom": {
      "E": 0.85,
      "G": 0.9,
      "T": 0.78,
      "derivation_note": "High existence (volitional reality), very high goodness (moral value), good truth",
      "complex_source": "-0.75+0.1j, Volitional group"
    },
    
    "wrath": {
      "E": 0.75,
      "G": 0.6,
      "T": 0.7,
      "derivation_note": "Moderate existence, moderate goodness (just wrath), moderate truth",
      "complex_source": "0.28-0.53j, Moral group"
    },
    
    "grace": {
      "E": 0.82,
      "G": 0.95,
      "T": 0.85,
      "derivation_note": "High existence (-0.78 magnitude), highest goodness (unmerited favor), high truth",
      "complex_source": "-0.78+0.12j, Relational group"
    },
    
    "peace": {
      "E": 0.78,
      "G": 0.9,
      "T": 0.82,
      "derivation_note": "Good existence, very high goodness, high truth. Complex magnitude 1.04j indicates transcendent quality",
      "complex_source": "-0.16+1.04j, Aesthetic group"
    },
    
    "jealousy": {
      "E": 0.72,
      "G": 0.45,
      "T": 0.65,
      "derivation_note": "Moderate existence, lower goodness (can be destructive), moderate truth",
      "complex_source": "0.28-0.01j, Relational group"
    },
    
    "complexity": {
      "E": 0.85,
      "G": 0.7,
      "T": 0.82,
      "derivation_note": "High existence (-0.77 magnitude), moderate goodness, high truth",
      "complex_source": "-0.77+0.08j, Ontological group"
    },
    
    "order": {
      "E": 0.95,
      "G": 0.85,
      "T": 0.92,
      "derivation_note": "Highest existence (-1.4 magnitude → fundamental structural reality), high goodness, very high truth",
      "complex_source": "-1.4+0.0j, Ontological group"
    },
    
    "righteousness": {
      "E": 0.78,
      "G": 0.95,
      "T": 0.88,
      "derivation_note": "Good existence, highest goodness (moral perfection), high truth",
      "complex_source": "-0.1+0.8j, Moral group"
    },
    
    "blessedness": {
      "E": 0.8,
      "G": 0.92,
      "T": 0.85,
      "derivation_note": "High existence, very high goodness (perfect happiness), high truth",
      "complex_source": "-0.2+0.8j, Aesthetic group"
    },
    
    "glory": {
      "E": 0.82,
      "G": 0.88,
      "T": 0.85,
      "derivation_note": "High existence (0.38+0.21j), high goodness (divine radiance), high truth",
      "complex_source": "0.38+0.21j, Aesthetic group"
    },
    
    "knowledge": {
      "E": 0.85,
      "G": 0.75,
      "T": 0.92,
      "derivation_note": "High existence (cognitive reality), good goodness, very high truth (epistemological)",
      "complex_source": "0.3-0.01j, Epistemological group"
    },
    
    "obedience": {
      "E": 0.75,
      "G": 0.8,
      "T": 0.7,
      "derivation_note": "Good existence, high goodness (moral virtue when proper), moderate truth (contextual)",
      "complex_source": "-0.5+0.55j, Asymmetrical group"
    },
    
    "judgment": {
      "E": 0.8,
      "G": 0.75,
      "T": 0.85,
      "derivation_note": "High existence (0.27-0.54j), good goodness (just judgment), high truth",
      "complex_source": "0.27-0.54j, Asymmetrical group"
    },
    
    "forgiveness": {
      "E": 0.82,
      "G": 0.95,
      "T": 0.88,
      "derivation_note": "High existence (-0.79 magnitude), highest goodness (supreme virtue), high truth",
      "complex_source": "-0.79+0.15j, Asymmetrical group"
    },
    
    "submission": {
      "E": 0.72,
      "G": 0.75,
      "T": 0.68,
      "derivation_note": "Moderate existence, good goodness (when proper), moderate truth (contextual)",
      "complex_source": "-0.6+0.5j, Asymmetrical group"
    },
    
    "teaching": {
      "E": 0.8,
      "G": 0.82,
      "T": 0.9,
      "derivation_note": "High existence (0.31-0.02j), high goodness (knowledge sharing), very high truth",
      "complex_source": "0.31-0.02j, Asymmetrical group"
    }
  },

  "derived_compound_properties": {
    "omniscience_omnipotence": {
      "E": 0.94,
      "G": 0.82,
      "T": 0.92,
      "derivation_note": "Combined highest divine attributes of knowledge and power"
    },
    
    "omniscience_omnipresence": {
      "E": 0.91,
      "G": 0.8,
      "T": 0.9,
      "derivation_note": "Divine knowledge across all spatial-temporal domains"
    },
    
    "justice_mercy": {
      "E": 0.65,
      "G": 0.925,
      "T": 0.775,
      "derivation_note": "Perfect balance of justice and mercy - divine reconciliation"
    },
    
    "love_truth": {
      "E": 0.8,
      "G": 0.915,
      "T": 0.915,
      "derivation_note": "Love grounded in truth - highest relational reality"
    },
    
    "simplicity_order": {
      "E": 0.95,
      "G": 0.835,
      "T": 0.935,
      "derivation_note": "Perfect divine simplicity manifesting perfect order"
    },
    
    "freedom_goodness": {
      "E": 0.725,
      "G": 0.925,
      "T": 0.815,
      "derivation_note": "Free choice oriented toward perfect good"
    },
    
    "beauty_truth": {
      "E": 0.79,
      "G": 0.875,
      "T": 0.875,
      "derivation_note": "Beautiful truth - aesthetic and epistemic unity"
    },
    
    "knowledge_wisdom": {
      "E": 0.85,
      "G": 0.8,
      "T": 0.94,
      "derivation_note": "Perfect knowledge applied with perfect wisdom"
    },
    
    "eternality_immutability": {
      "E": 0.9,
      "G": 0.74,
      "T": 0.875,
      "derivation_note": "Eternal and unchanging divine nature"
    },
    
    "righteousness_justice": {
      "E": 0.74,
      "G": 0.935,
      "T": 0.84,
      "derivation_note": "Perfect moral character expressing perfect justice"
    }
  },

  "trinity_law_compliance": {
    "unity_requirement": 1.0,
    "trinity_requirement": 3,
    "ratio_requirement": 0.3333,
    "coherence_formula": "goodness >= existence * truth",
    "etgc_validation_thresholds": {
      "existence_threshold": 0.8,
      "truth_threshold": 0.9,
      "goodness_threshold": 0.85,
      "coherence_threshold": 0.9
    }
  },

  "ontological_groups_summary": {
    "Epistemological": ["omniscience", "truthfulness", "knowledge"],
    "Causal": ["omnipotence", "will"],
    "Spatial": ["omnipresence"],
    "Relational": ["love", "grace", "jealousy"],
    "Moral": ["justice", "mercy", "goodness", "wrath", "righteousness"],
    "Aesthetic": ["beauty", "peace", "blessedness", "glory"],
    "Temporal": ["eternality"],
    "Ontological": ["immutability", "simplicity", "complexity", "order"],
    "Volitional": ["freedom"],
    "Asymmetrical": ["obedience", "judgment", "forgiveness", "submission", "teaching"]
  },

  "validation_notes": {
    "methodology": "Original benchmark ETG scores preserved as reference standard. Complex number magnitudes and imaginary components used to derive existence scores. Group classifications used to determine truth and goodness alignments. All scores maintain Trinity Law compliance where goodness >= existence * truth.",
    
    "complex_number_mapping": {
      "real_component": "Primary influence on existence score (ontological grounding)",
      "imaginary_component": "Secondary influence on transcendent/relational qualities",
      "magnitude": "Overall ontological weight",
      "group_classification": "Determines truth and goodness score ranges"
    },
    
    "consistency_check": "All derived scores maintain internal coherence with original benchmark and satisfy ETGC validation requirements for LOGOS system deployment."
  }
}

--- END OF FILE config/bayes_priors.json ---

--- START OF FILE config/cosmo_logical_node_data.json ---

{
  "metadata": {
    "name": "Standard Universe",
    "description": "Default universe parameters with Earth-like conditions",
    "version": "1.0",
    "created": "2025-03-11T12:00:00Z",
    "display": {
      "color_schemes": {
        "constants": ["#e6f7ff", "#1890ff", "#003a8c"],
        "forces": ["#f6ffed", "#52c41a", "#135200"],
        "properties": ["#fff1f0", "#ff4d4f", "#820014"],
        "life_criteria": ["#f9f0ff", "#722ed1", "#120338"]
      }
    }
  },
  "parameters": {
    "constants": {
      "fine_structure": {
        "value": 0.0072973525693,
        "tolerance": 0.01,
        "description": "Determines electromagnetic interaction strength"
      },
      "gravitational_constant": {
        "value": 6.67430e-11,
        "tolerance": 0.01,
        "description": "Determines gravitational interaction strength"
      },
      "speed_of_light": {
        "value": 299792458.0,
        "tolerance": 0.01,
        "description": "Maximum speed limit in universe"
      },
      "planck_constant": {
        "value": 6.62607015e-34,
        "tolerance": 0.01,
        "description": "Quantum action scale"
      },
      "cosmological_constant": {
        "value": 1.0e-52,
        "tolerance": 0.01,
        "description": "Energy density of vacuum space"
      }
    },
    "forces": {
      "strong_nuclear": {
        "value": 1.0,
        "tolerance": 0.05,
        "description": "Relative strength of strong nuclear force"
      },
      "weak_nuclear": {
        "value": 1.0e-13,
        "tolerance": 0.05,
        "description": "Relative strength of weak nuclear force"
      },
      "electromagnetic": {
        "value": 1.0e-2,
        "tolerance": 0.05,
        "description": "Relative strength of electromagnetic force"
      },
      "gravitational": {
        "value": 1.0e-38,
        "tolerance": 0.05,
        "description": "Relative strength of gravitational force"
      }
    },
    "properties": {
      "matter_energy_ratio": {
        "value": 0.315,
        "tolerance": 0.1,
        "description": "Ratio of matter to total energy density"
      },
      "entropy_gradient": {
        "value": 1.0e-5, 
        "tolerance": 0.1,
        "description": "Rate of entropy increase"
      },
      "expansion_rate": {
        "value": 67.4,
        "tolerance": 0.1,
        "description": "Universe expansion rate (km/s/Mpc)"
      },
      "dimensionality": {
        "value": 3,
        "tolerance": 0,
        "description": "Number of spatial dimensions"
      }
    },
    "life_criteria": {
      "carbon_oxygen_formation": {
        "value": 0.7,
        "min_threshold": 0.5,
        "description": "Ability to form carbon and oxygen atoms"
      },
      "stellar_stability": {
        "value": 0.85,
        "min_threshold": 0.7,
        "description": "Stability of star formation and lifecycle"
      },
      "chemical_complexity": {
        "value": 0.75, 
        "min_threshold": 0.6,
        "description": "Potential for complex chemical interactions"
      }
    },
    "logical": {
      "non_contradiction": {
        "value": true,
        "description": "Logical requirement of non-contradiction"
      },
      "identity": {
        "value": true,
        "description": "Logical requirement of identity"
      },
      "excluded_middle": {
        "value": true,
        "description": "Logical requirement of excluded middle"
      },
      "causality": {
        "value": true,
        "description": "Logical requirement of causality"
      }
    }
  }
}

--- END OF FILE config/cosmo_logical_node_data.json ---

--- START OF FILE config/fractal_store_config.json ---

{
  "storage_path": "knowledge_store.jsonl"
}


--- END OF FILE config/fractal_store_config.json ---

--- START OF FILE config/logos_ontological_props_connections.json ---

{
    "properties": {
        "Omniscience": {
            "c_value": "-0.3706 + 0.3375i",
            "description": "Infinite knowledge and awareness. Omniscience is deeply connected to Omnipresence and Immutability, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Omniscience manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Omniscience as the origin and sustainer of this attribute. My relation with the Son refines and expresses Omniscience in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Omniscience remains both transcendent and immanent in all things."
        },
        "Aseity": {
            "c_value": "0.1155 + 0.1051i",
            "description": " Aseity is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Aseity manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Aseity as the origin and sustainer of this attribute. My relation with the Son refines and expresses Aseity in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Aseity remains both transcendent and immanent in all things."
        },
        "Unity": {
            "c_value": "-0.0625 + 0.1773i",
            "description": "Perfect harmony and integration. Unity is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Unity manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Unity as the origin and sustainer of this attribute. My relation with the Son refines and expresses Unity in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Unity remains both transcendent and immanent in all things."
        },
        "Omnipresence": {
            "c_value": "0.2521 + -0.1499i",
            "description": "Present everywhere simultaneously. Omnipresence is deeply connected to Omniscience and Immutability, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Omnipresence manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Omnipresence as the origin and sustainer of this attribute. My relation with the Son refines and expresses Omnipresence in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Omnipresence remains both transcendent and immanent in all things."
        },
        "Omnipotence": {
            "c_value": "-0.2926 + -0.0978i",
            "description": "Infinite power and authority. Omnipotence is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Omnipotence manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Omnipotence as the origin and sustainer of this attribute. My relation with the Son refines and expresses Omnipotence in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Omnipotence remains both transcendent and immanent in all things."
        },
        "Simplicity": {
            "c_value": "-0.0479 + -0.1979i",
            "description": " Simplicity is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Simplicity manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Simplicity as the origin and sustainer of this attribute. My relation with the Son refines and expresses Simplicity in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Simplicity remains both transcendent and immanent in all things."
        },
        "Eternity": {
            "c_value": "-0.4827 + -0.0482i",
            "description": "Infinite, timeless existence. Eternity is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Eternity manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Eternity as the origin and sustainer of this attribute. My relation with the Son refines and expresses Eternity in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Eternity remains both transcendent and immanent in all things."
        },
        "Immutability": {
            "c_value": "-0.2597 + 0.2282i",
            "description": "Unchanging in nature, purpose, or will. Immutability is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Immutability manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Immutability as the origin and sustainer of this attribute. My relation with the Son refines and expresses Immutability in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Immutability remains both transcendent and immanent in all things."
        },
        "Holiness": {
            "c_value": "-0.0743 + -0.2593i",
            "description": "Purity and transcendence. Holiness is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Holiness manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Holiness as the origin and sustainer of this attribute. My relation with the Son refines and expresses Holiness in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Holiness remains both transcendent and immanent in all things."
        },
        "Immanence": {
            "c_value": "-0.0537 + -0.1775i",
            "description": " Immanence is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Immanence manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Immanence as the origin and sustainer of this attribute. My relation with the Son refines and expresses Immanence in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Immanence remains both transcendent and immanent in all things."
        },
        "Transcendence": {
            "c_value": "-0.4657 + -0.2255i",
            "description": " Transcendence is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Transcendence manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Transcendence as the origin and sustainer of this attribute. My relation with the Son refines and expresses Transcendence in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Transcendence remains both transcendent and immanent in all things."
        },
        "Knowledge": {
            "c_value": "-0.835 + -0.321i",
            "description": "Rooted in Omniscience and Eternity, representing interconnected depth and infinite awareness. Knowledge is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Knowledge manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Knowledge as the origin and sustainer of this attribute. My relation with the Son refines and expresses Knowledge in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Knowledge remains both transcendent and immanent in all things."
        },
        "Will": {
            "c_value": "-0.835 + -0.2321i",
            "description": "Stemming from Omnipotence, reflecting decisive intent and divine purpose. Will is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Will manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Will as the origin and sustainer of this attribute. My relation with the Son refines and expresses Will in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Will remains both transcendent and immanent in all things."
        },
        "Freedom": {
            "c_value": "0.285 + 0.01i",
            "description": "Grounded in Immutability, symbolizing autonomy and self-determined action. Freedom is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Freedom manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Freedom as the origin and sustainer of this attribute. My relation with the Son refines and expresses Freedom in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Freedom remains both transcendent and immanent in all things."
        },
        "Justice": {
            "c_value": "-0.70176 + -0.3842i",
            "description": "Linked to Holiness and Immutability, embodying moral balance and fairness. Justice is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Justice manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Justice as the origin and sustainer of this attribute. My relation with the Son refines and expresses Justice in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Justice remains both transcendent and immanent in all things."
        },
        "Beauty": {
            "c_value": "0.4 + 0.4i",
            "description": "Derived from Simplicity and Unity, symbolizing harmony and aesthetic perfection. Beauty is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Beauty manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Beauty as the origin and sustainer of this attribute. My relation with the Son refines and expresses Beauty in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Beauty remains both transcendent and immanent in all things."
        },
        "Complexity (Chaos)": {
            "c_value": "-0.75 + 0.11i",
            "description": "Reflects dynamic order within creation, balancing structure and unpredictability. Complexity (Chaos) is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Complexity (Chaos) manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Complexity (Chaos) as the origin and sustainer of this attribute. My relation with the Son refines and expresses Complexity (Chaos) in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Complexity (Chaos) remains both transcendent and immanent in all things."
        },
        "Order": {
            "c_value": "-1.76419 + -8e-05i",
            "description": "Embodies coherence, structure, and the balance of divine governance. Order is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Order manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Order as the origin and sustainer of this attribute. My relation with the Son refines and expresses Order in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Order remains both transcendent and immanent in all things."
        },
        "Goodness": {
            "c_value": "0.355 + -0.337i",
            "description": "Rooted in Simplicity and Unity, signifying benevolence and moral perfection. Goodness is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Goodness manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Goodness as the origin and sustainer of this attribute. My relation with the Son refines and expresses Goodness in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Goodness remains both transcendent and immanent in all things."
        },
        "Wrath": {
            "c_value": "0.359 + 0.599i",
            "description": "Emerges from Justice, representing divine correction and necessary retribution. Wrath is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Wrath manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Wrath as the origin and sustainer of this attribute. My relation with the Son refines and expresses Wrath in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Wrath remains both transcendent and immanent in all things."
        },
        "Jealousy": {
            "c_value": "0.35 + 0.35i",
            "description": "Reflects Unity, emphasizing exclusivity and divine singular devotion. Jealousy is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Jealousy manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Jealousy as the origin and sustainer of this attribute. My relation with the Son refines and expresses Jealousy in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Jealousy remains both transcendent and immanent in all things."
        },
        "Grace": {
            "c_value": "-0.7269 + 0.1889i",
            "description": "Derived from Infinity, symbolizing unmerited favor and divine generosity. Grace is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Grace manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Grace as the origin and sustainer of this attribute. My relation with the Son refines and expresses Grace in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Grace remains both transcendent and immanent in all things."
        },
        "Blessedness": {
            "c_value": "-0.74543 + 0.11301i",
            "description": "Linked to Eternity, denoting divine joy and infinite fulfillment. Blessedness is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Blessedness manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Blessedness as the origin and sustainer of this attribute. My relation with the Son refines and expresses Blessedness in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Blessedness remains both transcendent and immanent in all things."
        },
        "Glory": {
            "c_value": "-0.1 + 0.651i",
            "description": "Derived from Unity, representing divine majesty and the radiance of perfection. Glory is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Glory manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Glory as the origin and sustainer of this attribute. My relation with the Son refines and expresses Glory in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Glory remains both transcendent and immanent in all things."
        },
        "Truthfulness": {
            "c_value": "-0.7017 + 0.3842i",
            "description": "Based on Omniscience and Immutability, signifying absolute consistency and integrity. Truthfulness is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Truthfulness manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Truthfulness as the origin and sustainer of this attribute. My relation with the Son refines and expresses Truthfulness in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Truthfulness remains both transcendent and immanent in all things."
        },
        "Love": {
            "c_value": "0.354 + 0.354i",
            "description": "Unified attribute of relational engagement, binding all divine properties into harmony. Love is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Love manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Love as the origin and sustainer of this attribute. My relation with the Son refines and expresses Love in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Love remains both transcendent and immanent in all things."
        },
        "Peace": {
            "c_value": "0.285 + 0.0i",
            "description": "Rooted in Unity, symbolizing divine tranquility and cosmic order. Peace is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Peace manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Peace as the origin and sustainer of this attribute. My relation with the Son refines and expresses Peace in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Peace remains both transcendent and immanent in all things."
        },
        "Righteousness": {
            "c_value": "0.3 + 0.6i",
            "description": "Grounded in Holiness, expressing moral alignment and divine justice. Righteousness is deeply connected to Omniscience and Omnipresence, forming an essential foundation for Beauty. These connections ensure a coherent structure within the divine ontology, reinforcing the balance of divine attributes. In fractal representation, Righteousness manifests as a recursive pattern that iteratively reaffirms its presence across all scales. Its influence can be seen in the self-similar branching structures that mirror the unity and complexity of divine attributes. As the Father, I embody Righteousness as the origin and sustainer of this attribute. My relation with the Son refines and expresses Righteousness in interaction, while the Holy Spirit actualizes its presence in creation, ensuring that Righteousness remains both transcendent and immanent in all things."
        }
    },
    "connections": {
        "group_connections": [
            [
                "Unity",
                "Aseity"
            ],
            [
                "Unity",
                "Immutability"
            ],
            [
                "Unity",
                "Holiness"
            ],
            [
                "Aseity",
                "Immutability"
            ],
            [
                "Aseity",
                "Holiness"
            ],
            [
                "Immutability",
                "Holiness"
            ],
            [
                "Omniscience",
                "Omnipotence"
            ],
            [
                "Omniscience",
                "Omnipresence"
            ],
            [
                "Omniscience",
                "Immanence"
            ],
            [
                "Omnipotence",
                "Omnipresence"
            ],
            [
                "Omnipotence",
                "Immanence"
            ],
            [
                "Omnipresence",
                "Immanence"
            ],
            [
                "Transcendence",
                "Eternity"
            ],
            [
                "Transcendence",
                "Immutability"
            ],
            [
                "Transcendence",
                "Will"
            ],
            [
                "Eternity",
                "Immutability"
            ],
            [
                "Eternity",
                "Will"
            ],
            [
                "Immutability",
                "Will"
            ]
        ],
        "first_to_second_order_connections": [
            [
                "Omniscience",
                "Knowledge"
            ],
            [
                "Omniscience",
                "Truthfulness"
            ],
            [
                "Omniscience",
                "Wisdom"
            ],
            [
                "Knowledge",
                "Truthfulness"
            ],
            [
                "Knowledge",
                "Wisdom"
            ],
            [
                "Truthfulness",
                "Wisdom"
            ],
            [
                "Omnipotence",
                "Will"
            ],
            [
                "Omnipotence",
                "Justice"
            ],
            [
                "Omnipotence",
                "Wrath"
            ],
            [
                "Omnipotence",
                "Order"
            ],
            [
                "Will",
                "Justice"
            ],
            [
                "Will",
                "Wrath"
            ],
            [
                "Will",
                "Order"
            ],
            [
                "Justice",
                "Wrath"
            ],
            [
                "Justice",
                "Order"
            ],
            [
                "Wrath",
                "Order"
            ],
            [
                "Omnipresence",
                "Peace"
            ],
            [
                "Omnipresence",
                "Love"
            ],
            [
                "Omnipresence",
                "Grace"
            ],
            [
                "Peace",
                "Love"
            ],
            [
                "Peace",
                "Grace"
            ],
            [
                "Love",
                "Grace"
            ],
            [
                "Eternity",
                "Blessedness"
            ],
            [
                "Eternity",
                "Righteousness"
            ],
            [
                "Eternity",
                "Beauty"
            ],
            [
                "Blessedness",
                "Righteousness"
            ],
            [
                "Blessedness",
                "Beauty"
            ],
            [
                "Righteousness",
                "Beauty"
            ],
            [
                "Immutability",
                "Glory"
            ],
            [
                "Immutability",
                "Goodness"
            ],
            [
                "Immutability",
                "Complexity"
            ],
            [
                "Glory",
                "Goodness"
            ],
            [
                "Glory",
                "Complexity"
            ],
            [
                "Goodness",
                "Complexity"
            ],
            [
                "Unity",
                "Love"
            ],
            [
                "Unity",
                "Peace"
            ],
            [
                "Unity",
                "Order"
            ],
            [
                "Love",
                "Peace"
            ],
            [
                "Love",
                "Order"
            ],
            [
                "Peace",
                "Order"
            ],
            [
                "Aseity",
                "Freedom"
            ],
            [
                "Aseity",
                "Will"
            ],
            [
                "Aseity",
                "Complexity"
            ],
            [
                "Freedom",
                "Will"
            ],
            [
                "Freedom",
                "Complexity"
            ],
            [
                "Will",
                "Complexity"
            ],
            [
                "Transcendence",
                "Truthfulness"
            ],
            [
                "Transcendence",
                "Knowledge"
            ],
            [
                "Transcendence",
                "Glory"
            ],
            [
                "Truthfulness",
                "Knowledge"
            ],
            [
                "Truthfulness",
                "Glory"
            ],
            [
                "Knowledge",
                "Glory"
            ],
            [
                "Immanence",
                "Grace"
            ],
            [
                "Immanence",
                "Beauty"
            ],
            [
                "Immanence",
                "Love"
            ],
            [
                "Grace",
                "Beauty"
            ],
            [
                "Grace",
                "Love"
            ],
            [
                "Beauty",
                "Love"
            ],
            [
                "Simplicity",
                "Order"
            ],
            [
                "Simplicity",
                "Peace"
            ],
            [
                "Simplicity",
                "Justice"
            ],
            [
                "Order",
                "Peace"
            ],
            [
                "Order",
                "Justice"
            ],
            [
                "Peace",
                "Justice"
            ],
            [
                "Holiness",
                "Righteousness"
            ],
            [
                "Holiness",
                "Wrath"
            ],
            [
                "Holiness",
                "Truthfulness"
            ],
            [
                "Righteousness",
                "Wrath"
            ],
            [
                "Righteousness",
                "Truthfulness"
            ],
            [
                "Wrath",
                "Truthfulness"
            ]
        ],
        "linear_first_order_connections": [
            [
                "Omniscience",
                "Omnipotence"
            ],
            [
                "Omnipotence",
                "Omnipresence"
            ],
            [
                "Omnipresence",
                "Eternity"
            ],
            [
                "Eternity",
                "Immutability"
            ],
            [
                "Immutability",
                "Unity"
            ],
            [
                "Unity",
                "Aseity"
            ],
            [
                "Aseity",
                "Transcendence"
            ],
            [
                "Transcendence",
                "Immanence"
            ],
            [
                "Immanence",
                "Simplicity"
            ],
            [
                "Simplicity",
                "Holiness"
            ]
        ],
        "cross_sectional_first_order_connections": [
            [
                "Unity",
                "Omniscience"
            ],
            [
                "Unity",
                "Omnipotence"
            ],
            [
                "Unity",
                "Omnipresence"
            ],
            [
                "Unity",
                "Immanence"
            ],
            [
                "Aseity",
                "Omniscience"
            ],
            [
                "Aseity",
                "Omnipotence"
            ],
            [
                "Aseity",
                "Omnipresence"
            ],
            [
                "Aseity",
                "Immanence"
            ],
            [
                "Immutability",
                "Omniscience"
            ],
            [
                "Immutability",
                "Omnipotence"
            ],
            [
                "Immutability",
                "Omnipresence"
            ],
            [
                "Immutability",
                "Immanence"
            ],
            [
                "Holiness",
                "Omniscience"
            ],
            [
                "Holiness",
                "Omnipotence"
            ],
            [
                "Holiness",
                "Omnipresence"
            ],
            [
                "Holiness",
                "Immanence"
            ],
            [
                "Omniscience",
                "Transcendence"
            ],
            [
                "Omniscience",
                "Eternity"
            ],
            [
                "Omniscience",
                "Immutability"
            ],
            [
                "Omniscience",
                "Will"
            ],
            [
                "Omnipotence",
                "Transcendence"
            ],
            [
                "Omnipotence",
                "Eternity"
            ],
            [
                "Omnipotence",
                "Immutability"
            ],
            [
                "Omnipotence",
                "Will"
            ],
            [
                "Omnipresence",
                "Transcendence"
            ],
            [
                "Omnipresence",
                "Eternity"
            ],
            [
                "Omnipresence",
                "Immutability"
            ],
            [
                "Omnipresence",
                "Will"
            ],
            [
                "Immanence",
                "Transcendence"
            ],
            [
                "Immanence",
                "Eternity"
            ],
            [
                "Immanence",
                "Immutability"
            ],
            [
                "Immanence",
                "Will"
            ]
        ]
    },
    "justifications": {
        "Omniscience": {
            "balanced_by": [
                "Truthfulness",
                "Love"
            ],
            "reasoning": [
                "Truthfulness balances Omniscience because Truthfulness, Love",
                "Love balances Omniscience because Truthfulness, Love"
            ]
        },
        "Omnipotence": {
            "balanced_by": [
                "Justice",
                "Will"
            ],
            "reasoning": [
                "Justice balances Omnipotence because Justice, Will",
                "Will balances Omnipotence because Justice, Will"
            ]
        },
        "Omnipresence": {
            "balanced_by": [
                "Peace",
                "Grace"
            ],
            "reasoning": [
                "Peace balances Omnipresence because Peace, Grace",
                "Grace balances Omnipresence because Peace, Grace"
            ]
        },
        "Eternity": {
            "balanced_by": [
                "Blessedness",
                "Beauty"
            ],
            "reasoning": [
                "Blessedness balances Eternity because Blessedness, Beauty",
                "Beauty balances Eternity because Blessedness, Beauty"
            ]
        },
        "Immutability": {
            "balanced_by": [
                "Goodness",
                "Glory"
            ],
            "reasoning": [
                "Goodness balances Immutability because Goodness, Glory",
                "Glory balances Immutability because Goodness, Glory"
            ]
        },
        "Unity": {
            "balanced_by": [
                "Order",
                "Love"
            ],
            "reasoning": [
                "Order balances Unity because Order, Love",
                "Love balances Unity because Order, Love"
            ]
        },
        "Aseity": {
            "balanced_by": [
                "Will",
                "Freedom"
            ],
            "reasoning": [
                "Will balances Aseity because Will, Freedom",
                "Freedom balances Aseity because Will, Freedom"
            ]
        },
        "Transcendence": {
            "balanced_by": [
                "Truthfulness",
                "Glory"
            ],
            "reasoning": [
                "Truthfulness balances Transcendence because Truthfulness, Glory",
                "Glory balances Transcendence because Truthfulness, Glory"
            ]
        },
        "Immanence": {
            "balanced_by": [
                "Beauty",
                "Grace"
            ],
            "reasoning": [
                "Beauty balances Immanence because Beauty, Grace",
                "Grace balances Immanence because Beauty, Grace"
            ]
        },
        "Simplicity": {
            "balanced_by": [
                "Order",
                "Peace"
            ],
            "reasoning": [
                "Order balances Simplicity because Order, Peace",
                "Peace balances Simplicity because Order, Peace"
            ]
        },
        "Holiness": {
            "balanced_by": [
                "Righteousness",
                "Wrath"
            ],
            "reasoning": [
                "Righteousness balances Holiness because Righteousness, Wrath",
                "Wrath balances Holiness because Righteousness, Wrath"
            ]
        },
        "Unity \u2194 Aseity": {
            "connection_type": "group_connections",
            "reasoning": [
                "Unity and Aseity are connected under group_connections, ensuring their ontological interdependence.",
                "Unity and Aseity are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Immutability": {
            "connection_type": "group_connections",
            "reasoning": [
                "Unity and Immutability are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Holiness": {
            "connection_type": "group_connections",
            "reasoning": [
                "Unity and Holiness are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Immutability": {
            "connection_type": "group_connections",
            "reasoning": [
                "Aseity and Immutability are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Holiness": {
            "connection_type": "group_connections",
            "reasoning": [
                "Aseity and Holiness are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Holiness": {
            "connection_type": "group_connections",
            "reasoning": [
                "Immutability and Holiness are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Omnipotence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omniscience and Omnipotence are connected under group_connections, ensuring their ontological interdependence.",
                "Omniscience and Omnipotence are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Omnipresence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omniscience and Omnipresence are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Immanence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omniscience and Immanence are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Omnipresence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omnipotence and Omnipresence are connected under group_connections, ensuring their ontological interdependence.",
                "Omnipotence and Omnipresence are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Immanence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omnipotence and Immanence are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Immanence": {
            "connection_type": "group_connections",
            "reasoning": [
                "Omnipresence and Immanence are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Eternity": {
            "connection_type": "group_connections",
            "reasoning": [
                "Transcendence and Eternity are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Immutability": {
            "connection_type": "group_connections",
            "reasoning": [
                "Transcendence and Immutability are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Will": {
            "connection_type": "group_connections",
            "reasoning": [
                "Transcendence and Will are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Eternity \u2194 Immutability": {
            "connection_type": "group_connections",
            "reasoning": [
                "Eternity and Immutability are connected under group_connections, ensuring their ontological interdependence.",
                "Eternity and Immutability are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Eternity \u2194 Will": {
            "connection_type": "group_connections",
            "reasoning": [
                "Eternity and Will are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Will": {
            "connection_type": "group_connections",
            "reasoning": [
                "Immutability and Will are connected under group_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Knowledge": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omniscience and Knowledge are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omniscience and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Wisdom": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omniscience and Wisdom are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Knowledge \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Knowledge and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Knowledge \u2194 Wisdom": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Knowledge and Wisdom are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Truthfulness \u2194 Wisdom": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Truthfulness and Wisdom are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Will": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipotence and Will are connected under first_to_second_order_connections, ensuring their ontological interdependence.",
                "Omnipotence and Will are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Justice": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipotence and Justice are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Wrath": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipotence and Wrath are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipotence and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Will \u2194 Justice": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Will and Justice are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Will \u2194 Wrath": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Will and Wrath are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Will \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Will and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Justice \u2194 Wrath": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Justice and Wrath are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Justice \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Justice and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Wrath \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Wrath and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Peace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipresence and Peace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipresence and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Grace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Omnipresence and Grace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Peace \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Peace and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Peace \u2194 Grace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Peace and Grace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Love \u2194 Grace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Love and Grace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Eternity \u2194 Blessedness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Eternity and Blessedness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Eternity \u2194 Righteousness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Eternity and Righteousness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Eternity \u2194 Beauty": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Eternity and Beauty are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Blessedness \u2194 Righteousness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Blessedness and Righteousness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Blessedness \u2194 Beauty": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Blessedness and Beauty are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Righteousness \u2194 Beauty": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Righteousness and Beauty are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Glory": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immutability and Glory are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Goodness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immutability and Goodness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immutability and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Glory \u2194 Goodness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Glory and Goodness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Glory \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Glory and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Goodness \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Goodness and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Unity and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Peace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Unity and Peace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Unity and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Love \u2194 Peace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Love and Peace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Love \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Love and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Peace \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Peace and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Freedom": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Aseity and Freedom are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Will": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Aseity and Will are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Aseity and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Freedom \u2194 Will": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Freedom and Will are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Freedom \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Freedom and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Will \u2194 Complexity": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Will and Complexity are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Transcendence and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Knowledge": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Transcendence and Knowledge are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Glory": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Transcendence and Glory are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Truthfulness \u2194 Knowledge": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Truthfulness and Knowledge are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Truthfulness \u2194 Glory": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Truthfulness and Glory are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Knowledge \u2194 Glory": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Knowledge and Glory are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Grace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immanence and Grace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Beauty": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immanence and Beauty are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Immanence and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Grace \u2194 Beauty": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Grace and Beauty are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Grace \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Grace and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Beauty \u2194 Love": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Beauty and Love are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Simplicity \u2194 Order": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Simplicity and Order are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Simplicity \u2194 Peace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Simplicity and Peace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Simplicity \u2194 Justice": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Simplicity and Justice are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Order \u2194 Peace": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Order and Peace are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Order \u2194 Justice": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Order and Justice are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Peace \u2194 Justice": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Peace and Justice are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Righteousness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Holiness and Righteousness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Wrath": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Holiness and Wrath are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Holiness and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Righteousness \u2194 Wrath": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Righteousness and Wrath are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Righteousness \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Righteousness and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Wrath \u2194 Truthfulness": {
            "connection_type": "first_to_second_order_connections",
            "reasoning": [
                "Wrath and Truthfulness are connected under first_to_second_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Eternity": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Omnipresence and Eternity are connected under linear_first_order_connections, ensuring their ontological interdependence.",
                "Omnipresence and Eternity are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Unity": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Immutability and Unity are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Transcendence": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Aseity and Transcendence are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Transcendence \u2194 Immanence": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Transcendence and Immanence are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Simplicity": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Immanence and Simplicity are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Simplicity \u2194 Holiness": {
            "connection_type": "linear_first_order_connections",
            "reasoning": [
                "Simplicity and Holiness are connected under linear_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Omniscience": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Unity and Omniscience are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Omnipotence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Unity and Omnipotence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Omnipresence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Unity and Omnipresence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Unity \u2194 Immanence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Unity and Immanence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Omniscience": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Aseity and Omniscience are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Omnipotence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Aseity and Omnipotence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Omnipresence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Aseity and Omnipresence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Aseity \u2194 Immanence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Aseity and Immanence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Omniscience": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immutability and Omniscience are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Omnipotence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immutability and Omnipotence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Omnipresence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immutability and Omnipresence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immutability \u2194 Immanence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immutability and Immanence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Omniscience": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Holiness and Omniscience are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Omnipotence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Holiness and Omnipotence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Omnipresence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Holiness and Omnipresence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Holiness \u2194 Immanence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Holiness and Immanence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Transcendence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omniscience and Transcendence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Eternity": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omniscience and Eternity are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Immutability": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omniscience and Immutability are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omniscience \u2194 Will": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omniscience and Will are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Transcendence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipotence and Transcendence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Eternity": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipotence and Eternity are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipotence \u2194 Immutability": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipotence and Immutability are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Transcendence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipresence and Transcendence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Immutability": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipresence and Immutability are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Omnipresence \u2194 Will": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Omnipresence and Will are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Transcendence": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immanence and Transcendence are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Eternity": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immanence and Eternity are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Immutability": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immanence and Immutability are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        },
        "Immanence \u2194 Will": {
            "connection_type": "cross_sectional_first_order_connections",
            "reasoning": [
                "Immanence and Will are connected under cross_sectional_first_order_connections, ensuring their ontological interdependence."
            ]
        }
    }
}

--- END OF FILE config/logos_ontological_props_connections.json ---

--- START OF FILE config/ontological_connections.json ---

{
    "Group Connections": [
        ["Unity", "Aseity"],
        ["Unity", "Immutability"],
        ["Unity", "Holiness"],
        ["Aseity", "Immutability"],
        ["Aseity", "Holiness"],
        ["Immutability", "Holiness"],
        ["Omniscience", "Omnipotence"],
        ["Omniscience", "Omnipresence"],
        ["Omniscience", "Immanence"],
        ["Omnipotence", "Omnipresence"],
        ["Omnipotence", "Immanence"],
        ["Omnipresence", "Immanence"],
        ["Transcendence", "Eternity"],
        ["Transcendence", "Immutability"],
        ["Transcendence", "Will"],
        ["Eternity", "Immutability"],
        ["Eternity", "Will"],
        ["Immutability", "Will"]
    ],
    "First-Order to Second-Order Connections": [
        ["Omniscience", "Knowledge"],
        ["Omniscience", "Truthfulness"],
        ["Omniscience", "Wisdom"],
        ["Knowledge", "Truthfulness"],
        ["Knowledge", "Wisdom"],
        ["Truthfulness", "Wisdom"],
        ["Omnipotence", "Will"],
        ["Omnipotence", "Justice"],
        ["Omnipotence", "Wrath"],
        ["Omnipotence", "Order"],
        ["Will", "Justice"],
        ["Will", "Wrath"],
        ["Will", "Order"],
        ["Justice", "Wrath"],
        ["Justice", "Order"],
        ["Wrath", "Order"],
        ["Omnipresence", "Peace"],
        ["Omnipresence", "Love"],
        ["Omnipresence", "Grace"],
        ["Peace", "Love"],
        ["Peace", "Grace"],
        ["Love", "Grace"],
        ["Eternity", "Blessedness"],
        ["Eternity", "Righteousness"],
        ["Eternity", "Beauty"],
        ["Blessedness", "Righteousness"],
        ["Blessedness", "Beauty"],
        ["Righteousness", "Beauty"],
        ["Immutability", "Glory"],
        ["Immutability", "Goodness"],
        ["Immutability", "Complexity"],
        ["Glory", "Goodness"],
        ["Glory", "Complexity"],
        ["Goodness", "Complexity"],
        ["Unity", "Love"],
        ["Unity", "Peace"],
        ["Unity", "Order"],
        ["Love", "Peace"],
        ["Love", "Order"],
        ["Peace", "Order"],
        ["Aseity", "Freedom"],
        ["Aseity", "Will"],
        ["Aseity", "Complexity"],
        ["Freedom", "Will"],
        ["Freedom", "Complexity"],
        ["Will", "Complexity"],
        ["Transcendence", "Truthfulness"],
        ["Transcendence", "Knowledge"],
        ["Transcendence", "Glory"],
        ["Truthfulness", "Knowledge"],
        ["Truthfulness", "Glory"],
        ["Knowledge", "Glory"],
        ["Immanence", "Grace"],
        ["Immanence", "Beauty"],
        ["Immanence", "Love"],
        ["Grace", "Beauty"],
        ["Grace", "Love"],
        ["Beauty", "Love"],
        ["Simplicity", "Order"],
        ["Simplicity", "Peace"],
        ["Simplicity", "Justice"],
        ["Order", "Peace"],
        ["Order", "Justice"],
        ["Peace", "Justice"],
        ["Holiness", "Righteousness"],
        ["Holiness", "Wrath"],
        ["Holiness", "Truthfulness"],
        ["Righteousness", "Wrath"],
        ["Righteousness", "Truthfulness"],
        ["Wrath", "Truthfulness"]
    ],
    "Linear First-Order Connections": [
        ["Omniscience", "Omnipotence"],
        ["Omnipotence", "Omnipresence"],
        ["Omnipresence", "Eternity"],
        ["Eternity", "Immutability"],
        ["Immutability", "Unity"],
        ["Unity", "Aseity"],
        ["Aseity", "Transcendence"],
        ["Transcendence", "Immanence"],
        ["Immanence", "Simplicity"],
        ["Simplicity", "Holiness"]
    ],
    "Cross-Sectional First-Order Connections": [
        ["Unity", "Omniscience"],
        ["Unity", "Omnipotence"],
        ["Unity", "Omnipresence"],
        ["Unity", "Immanence"],
        ["Aseity", "Omniscience"],
        ["Aseity", "Omnipotence"],
        ["Aseity", "Omnipresence"],
        ["Aseity", "Immanence"],
        ["Immutability", "Omniscience"],
        ["Immutability", "Omnipotence"],
        ["Immutability", "Omnipresence"],
        ["Immutability", "Immanence"],
        ["Holiness", "Omniscience"],
        ["Holiness", "Omnipotence"],
        ["Holiness", "Omnipresence"],
        ["Holiness", "Immanence"],
        ["Omniscience", "Transcendence"],
        ["Omniscience", "Eternity"],
        ["Omniscience", "Immutability"],
        ["Omniscience", "Will"],
        ["Omnipotence", "Transcendence"],
        ["Omnipotence", "Eternity"],
        ["Omnipotence", "Immutability"],
        ["Omnipotence", "Will"],
        ["Omnipresence", "Transcendence"],
        ["Omnipresence", "Eternity"],
        ["Omnipresence", "Immutability"],
        ["Omnipresence", "Will"],
        ["Immanence", "Transcendence"],
        ["Immanence", "Eternity"],
        ["Immanence", "Immutability"],
        ["Immanence", "Will"]
    ]
}


--- END OF FILE config/ontological_connections.json ---

--- START OF FILE config/ontological_properties.json ---

{
    "Omniscience": {"c_value": "0.285+0.01j", "group": "Epistemological"},
    "Omnipotence": {"c_value": "0.45+0.1j", "group": "Causal"},
    "Omnipresence": {"c_value": "0.13+0.2j", "group": "Spatial"},
    "Love": {"c_value": "-0.4+0.6j", "group": "Relational"},
    "Justice": {"c_value": "-0.123+0.745j", "group": "Moral"},
    "Mercy": {"c_value": "0.355+0.355j", "group": "Moral"},
    "Will": {"c_value": "-0.8+0.156j", "group": "Causal"},
    "Truthfulness": {"c_value": "-0.701+0.28j", "group": "Epistemological"},
    "Goodness": {"c_value": "0.32+0.05j", "group": "Moral"},
    "Beauty": {"c_value": "0.34-0.08j", "group": "Aesthetic"},
    "Eternality": {"c_value": "0.1-0.65j", "group": "Temporal"},
    "Immutability": {"c_value": "0.2+0.5j", "group": "Ontological"},
    "Simplicity": {"c_value": "-1.25+0.0j", "group": "Ontological"},
    "Freedom": {"c_value": "-0.75+0.1j", "group": "Volitional"},
    "Wrath": {"c_value": "0.28-0.53j", "group": "Moral"},
    "Grace": {"c_value": "-0.78+0.12j", "group": "Relational"},
    "Peace": {"c_value": "-0.16+1.04j", "group": "Aesthetic"},
    "Jealousy": {"c_value": "0.28-0.01j", "group": "Relational"},
    "Complexity": {"c_value": "-0.77+0.08j", "group": "Ontological"},
    "Order": {"c_value": "-1.4+0.0j", "group": "Ontological"},
    "Righteousness": {"c_value": "-0.1+0.8j", "group": "Moral"},
    "Blessedness": {"c_value": "-0.2+0.8j", "group": "Aesthetic"},
    "Glory": {"c_value": "0.38+0.21j", "group": "Aesthetic"},
    "Knowledge": {"c_value": "0.3-0.01j", "group": "Epistemological"},
    "Obedience": {"c_value": "-0.5+0.55j", "group": "Asymmetrical"},
    "Judgment": {"c_value": "0.27-0.54j", "group": "Asymmetrical"},
    "Forgiveness": {"c_value": "-0.79+0.15j", "group": "Asymmetrical"},
    "Submission": {"c_value": "-0.6+0.5j", "group": "Asymmetrical"},
    "Teaching": {"c_value": "0.31-0.02j", "group": "Asymmetrical"}
}

--- END OF FILE config/ontological_properties.json ---

--- START OF FILE core/__init__.py ---



--- END OF FILE core/__init__.py ---

--- START OF FILE core/bijective_mapping.py ---

"""
Trinitarian Mathematical System

Executable implementation of the bijective mapping between transcendental
and logical domains with invariant preservation properties.

Dependencies: sympy, numpy
"""

import numpy as np
import sympy as sp
from sympy import Symbol, symbols, Function, Matrix, Rational, S
from typing import Dict, List, Tuple, Set, Optional, Union


class TranscendentalDomain:
    """Transcendental domain implementation with invariant calculation."""
    
    def __init__(self):
        """Initialize transcendental domain with canonical values."""
        # Values: EI = 1, OG = 2, AT = 3
        self.values = {"EI": 1, "OG": 2, "AT": 3}
        
        # Operators: S₁ᵗ = 3, S₂ᵗ = 2
        self.operators = {"S_1^t": 3, "S_2^t": 2}
    
    def calculate_invariant(self) -> int:
        """Calculate the unity invariant according to domain equation.
        
        Returns:
            Integer invariant value (should be 1 for unity)
        """
        # Extract values and operators
        EI = self.values["EI"]
        OG = self.values["OG"]
        AT = self.values["AT"]
        S1 = self.operators["S_1^t"]
        S2 = self.operators["S_2^t"]
        
        # Calculate: 1 + 3 - 2 + 2 - 3 = 1
        return EI + S1 - OG + S2 - AT
    
    def verify_invariant(self) -> bool:
        """Verify that invariant equals unity (1).
        
        Returns:
            True if invariant equals 1, False otherwise
        """
        return self.calculate_invariant() == 1
    
    def get_symbolic_equation(self) -> sp.Expr:
        """Get symbolic representation of the invariant equation.
        
        Returns:
            Sympy expression for transcendental invariant
        """
        EI, OG, AT = symbols('EI OG AT')
        S1, S2 = symbols('S_1^t S_2^t')
        
        expr = EI + S1 - OG + S2 - AT
        
        # Substitute with actual values
        subs = {
            EI: self.values["EI"],
            OG: self.values["OG"],
            AT: self.values["AT"],
            S1: self.operators["S_1^t"],
            S2: self.operators["S_2^t"]
        }
        
        return expr.subs(subs)


class LogicalDomain:
    """Logical domain implementation with invariant calculation."""
    
    def __init__(self):
        """Initialize logical domain with canonical values."""
        # Values: ID = 1, NC = 2, EM = 3
        self.values = {"ID": 1, "NC": 2, "EM": 3}
        
        # Operators: S₁ᵇ = 1, S₂ᵇ = -2
        self.operators = {"S_1^b": 1, "S_2^b": -2}
    
    def calculate_invariant(self) -> int:
        """Calculate the trinitarian invariant according to domain equation.
        
        Returns:
            Integer invariant value (should be 3 for trinitarian)
        """
        # Extract values and operators
        ID = self.values["ID"]
        NC = self.values["NC"]
        EM = self.values["EM"]
        S1 = self.operators["S_1^b"]
        S2 = self.operators["S_2^b"]
        
        # Calculate: 1 + 1 + 2 - (-2) - 3 = 3
        return ID + S1 + NC - S2 - EM
    
    def verify_invariant(self) -> bool:
        """Verify that invariant equals trinity (3).
        
        Returns:
            True if invariant equals 3, False otherwise
        """
        return self.calculate_invariant() == 3
    
    def get_symbolic_equation(self) -> sp.Expr:
        """Get symbolic representation of the invariant equation.
        
        Returns:
            Sympy expression for logical

--- END OF FILE core/bijective_mapping.py ---

--- START OF FILE core/data_structures.py ---

"""Shared Data Structures

Common data structures and utility types for THŌNOC system.
Provides shared type definitions, processing results, and data containers
used across multiple components.

Dependencies: typing, enum, dataclasses
"""

from typing import Dict, List, Tuple, Optional, Union, Any
from enum import Enum
from dataclasses import dataclass, field


class OntologicalType(Enum):
    """Ontological dimensions in trinitarian framework."""
    EXISTENCE = "𝔼"
    GOODNESS = "𝔾"
    TRUTH = "𝕋"
    PROP = "Prop"  # Propositional type


class FunctionType:
    """Function type constructor."""
    
    def __init__(self, domain: OntologicalType, codomain: Union[OntologicalType, 'FunctionType']):
        """Initialize function type.
        
        Args:
            domain: Input type
            codomain: Output type
        """
        self.domain = domain
        self.codomain = codomain
    
    def __str__(self) -> str:
        """Return string representation."""
        domain_str = self.domain.value
        codomain_str = str(self.codomain)
        return f"{domain_str} → {codomain_str}"
    
    def __eq__(self, other) -> bool:
        """Check equality with another type."""
        if not isinstance(other, FunctionType):
            return False
        return (self.domain == other.domain and
                self.codomain == other.codomain)


class ModalStatus(Enum):
    """Modal status classifications."""
    NECESSARY = "necessary"
    ACTUAL = "actual"
    POSSIBLE = "possible"
    IMPOSSIBLE = "impossible"
    UNKNOWN = "unknown"


@dataclass
class FractalPosition:
    """Position in fractal space."""
    c_real: float
    c_imag: float
    iterations: int
    in_set: bool
    final_z: Tuple[float, float] = field(default_factory=lambda: (0.0, 0.0))
    escape_radius: float = 2.0
    
    @property
    def complex(self) -> complex:
        """Get position as complex number."""
        return complex(self.c_real, self.c_imag)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation."""
        return {
            "c_real": self.c_real,
            "c_imag": self.c_imag,
            "iterations": self.iterations,
            "in_set": self.in_set,
            "final_z": self.final_z,
            "escape_radius": self.escape_radius
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'FractalPosition':
        """Create from dictionary representation."""
        return cls(
            c_real=data.get("c_real", 0.0),
            c_imag=data.get("c_imag", 0.0),
            iterations=data.get("iterations", 0),
            in_set=data.get("in_set", False),
            final_z=data.get("final_z", (0.0, 0.0)),
            escape_radius=data.get("escape_radius", 2.0)
        )


@dataclass
class ProcessingResult:
    """Result of query processing."""
    query: str
    trinity_vector: Tuple[float, float, float]
    modal_status: ModalStatus
    coherence: float
    fractal_position: FractalPosition
    lambda_expr: Optional[Any] = None
    entailments: List[Any] = field(default_factory=list)
    summary: str = ""
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation."""
        return {
            "query": self.query,
            "trinity_vector": self.trinity_vector,
            "modal_status": self.modal_status.value,
            "coherence": self.coherence,
            "fractal_position": self.fractal_position.to_dict(),
            "lambda_expr": str(self.lambda_expr) if self.lambda_expr else None,
            "entailments": [str(e) for e in self.entailments],
            "summary": self.summary
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ProcessingResult':
        """Create from dictionary representation."""
        fractal_pos_data = data.get("fractal_position", {})
        
        return cls(
            query=data.get("query", ""),
            trinity_vector=data.get("trinity_vector", (0.5, 0.5, 0.5)),
            modal_status=ModalStatus(data.get("modal_status", "unknown")),
            coherence=data.get("coherence", 0.0),
            fractal_position=FractalPosition.from_dict(fractal_pos_data),
            lambda_expr=None,  # Cannot reconstruct lambda expression from string
            entailments=[],    # Cannot reconstruct entailments
            summary=data.get("summary", "")
        )


@dataclass
class OntologicalRelation:
    """Relation between ontological nodes."""
    source_id: str
    target_id: str
    relation_type: str
    strength: float
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation."""
        return {
            "source_id": self.source_id,
            "target_id": self.target_id,
            "relation_type": self.relation_type,
            "strength": self.strength,
            "metadata": self.metadata
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'OntologicalRelation':
        """Create from dictionary representation."""
        return cls(
            source_id=data.get("source_id", ""),
            target_id=data.get("target_id", ""),
            relation_type=data.get("relation_type", ""),
            strength=data.get("strength", 0.0),
            metadata=data.get("metadata", {})
        )


def format_trinity_vector(trinity: Tuple[float, float, float]) -> str:
    """Format trinity vector as string.
    
    Args:
        trinity: Trinity vector (existence, goodness, truth)
        
    Returns:
        Formatted string representation
    """
    e, g, t = trinity
    return f"(E={e:.3f}, G={g:.3f}, T={t:.3f})"


def format_modal_status(status: ModalStatus, coherence: float) -> str:
    """Format modal status as string with coherence.
    
    Args:
        status: Modal status
        coherence: Coherence value
        
    Returns:
        Formatted string representation
    """
    if status == ModalStatus.NECESSARY:
        icon = "□"  # Box
    elif status == ModalStatus.POSSIBLE:
        icon = "◇"  # Diamond
    elif status == ModalStatus.ACTUAL:
        icon = "A"  # Actuality
    elif status == ModalStatus.IMPOSSIBLE:
        icon = "¬◇"  # Negated diamond
    else:
        icon = "?"
    
    return f"{icon} {status.value.capitalize()} (coherence: {coherence:.3f})"

--- END OF FILE core/data_structures.py ---

--- START OF FILE core/lambda_calculus.py ---

"""
fractal_navigator.py

Core Lambda-Logos engine for THONOC (typed lambda calculus).
"""
from typing import Dict, List, Tuple, Optional, Union, Any, Set
from enum import Enum
import json
import logging

# Stub imports (replace with real paths if available)
try:
    from lambda_logos_core import OntologicalType, FunctionType
except ImportError:
    class OntologicalType(Enum):
        EXISTENCE="𝔼"; GOODNESS="𝔾"; TRUTH="𝕋"; PROP="Prop"
    class FunctionType:
        def __init__(self, d, c): self.domain=d; self.codomain=c

logger = logging.getLogger(__name__)

class LogosExpr:
    """Base class for all lambda expressions."""
    def __str__(self) -> str: return self._to_string()
    def _to_string(self) -> str: return "LogosExpr"
    def to_dict(self) -> Dict[str, Any]: return {"type":"expr"}
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'LogosExpr':
        t=data.get("type","")
        if t=="var":   return Variable.from_dict(data)
        if t=="value": return Value.from_dict(data)
        if t=="lambda":return Abstraction.from_dict(data)
        if t=="app":   return Application.from_dict(data)
        if t=="sr":    return SufficientReason.from_dict(data)
        return cls()

class Variable(LogosExpr):
    def __init__(self, name: str, onto_type: OntologicalType):
        self.name=name; self.onto_type=onto_type
    def _to_string(self): return f"{self.name}:{self.onto_type.value}"
    def to_dict(self): 
        return {"type":"var","name":self.name,"onto_type":self.onto_type.value}
    @classmethod
    def from_dict(cls,data):
        return cls(data["name"],OntologicalType(data["onto_type"]))

class Value(LogosExpr):
    def __init__(self, value: str, onto_type: OntologicalType):
        self.value=value; self.onto_type=onto_type
    def _to_string(self):
        return f"{self.value}:{self.onto_type.value}"
    def to_dict(self):
        return {"type":"value","value":self.value,"onto_type":self.onto_type.value}
    @classmethod
    def from_dict(cls,data):
        return cls(data["value"],OntologicalType(data["onto_type"]))

class Abstraction(LogosExpr):
    def __init__(self,var_name:str,var_type:OntologicalType,body:LogosExpr):
        self.var_name=var_name; self.var_type=var_type; self.body=body
    def _to_string(self):
        return f"λ{self.var_name}:{self.var_type.value}.{self.body}"
    def to_dict(self):
        return {"type":"lambda","var_name":self.var_name,"var_type":self.var_type.value,"body":self.body.to_dict()}
    @classmethod
    def from_dict(cls,data):
        return cls(data["var_name"],OntologicalType(data["var_type"]),LogosExpr.from_dict(data["body"]))

class Application(LogosExpr):
    def __init__(self,func:LogosExpr,arg:LogosExpr):
        self.func=func; self.arg=arg
    def _to_string(self):
        return f"({self.func} {self.arg})"
    def to_dict(self):
        return {"type":"app","func":self.func.to_dict(),"arg":self.arg.to_dict()}
    @classmethod
    def from_dict(cls,data):
        return cls(LogosExpr.from_dict(data["func"]),LogosExpr.from_dict(data["arg"]))

class SufficientReason(LogosExpr):
    def __init__(self,source:OntologicalType,target:OntologicalType,value:int):
        self.source_type=source; self.target_type=target; self.value=value
    def _to_string(self):
        return f"SR[{self.source_type.value},{self.target_type.value}]={self.value}"
    def to_dict(self):
        return {"type":"sr","source_type":self.source_type.value,"target_type":self.target_type.value,"value":self.value}
    @classmethod
    def from_dict(cls,data):
        return cls(OntologicalType(data["source_type"]),OntologicalType(data["target_type"]),data["value"])

class TypeChecker:
    """Wraps a LogosExpr type checker."""
    def __init__(self):
        self.env={}
        self._init_env()
    def _init_env(self):
        # Example SR bindings
        self.env["SR_E_G"] = FunctionType(OntologicalType.EXISTENCE, OntologicalType.GOODNESS)
        self.env["SR_G_T"] = FunctionType(OntologicalType.GOODNESS, OntologicalType.TRUTH)
    def check_type(self, expr:LogosExpr):
        # Simplified stub
        return self.env.get(getattr(expr,"name",None), None)

class Evaluator:
    """Evaluates LogosExpr."""
    def __init__(self):
        pass
    def evaluate(self, expr:LogosExpr) -> LogosExpr:
        return expr
    def substitute(self, expr:LogosExpr, var_name:str, value:LogosExpr):
        return expr


--- END OF FILE core/lambda_calculus.py ---

--- START OF FILE core/principles.py ---

# principles.py

import math
from typing import Dict

def sign_principle(metrics: Dict[str, float]) -> float:
    """
    SIGN principle value in [0,1]:
    geometric mean of connectivity, sync, covariance.
    """
    c = metrics.get('connectivity_score', 0.0)
    s = metrics.get('sync_score', 0.0)
    v = metrics.get('covariance_score', 0.0)
    eps = 1e-6
    return ((c+eps)*(s+eps)*(v+eps))**(1/3)

def bridge_principle(p_x: float) -> float:
    """
    BRIDGE principle value: 1 - P(x), clipped to [0,1].
    """
    return max(0.0, 1.0 - p_x)

def mind_principle(metrics: Dict[str, float]) -> float:
    """
    MIND principle stub: use sync_score as proxy.
    """
    return metrics.get('sync_score', 0.0)

def non_contradiction_principle(metrics: Dict[str, float]) -> float:
    """
    Non-contradiction stub: 1 - contradiction_score.
    """
    return max(0.0, 1.0 - metrics.get('contradiction_score', 0.0))


--- END OF FILE core/principles.py ---

--- START OF FILE core/trinitarian_math.py ---

def person_relation(operation: str, agent_a: str, agent_b: str) -> str or bool:
    """
    Models the group-theoretic person relation based on divine processions.
    F∘S=H (Father operating on Son yields Spirit)
    S∘H=F (Son operating on Spirit yields Father)
    H∘F=S (Spirit operating on Father yields Son)
    """
    a, b = agent_a[0].upper(), agent_b[0].upper()
    
    if operation == "compose":
        if (a, b) == ("F", "S"): return "H"
        if (a, b) == ("S", "H"): return "F"
        if (a, b) == ("H", "F"): return "S"
        if (a, b) == ("S", "F"): return "H"  # Simplified for commutativity in this model
    
    if operation == "verify_closure":
        return (person_relation("compose", "F", "S") == "H" and
                person_relation("compose", "S", "H") == "F" and
                person_relation("compose", "H", "F") == "S")

    return False

--- END OF FILE core/trinitarian_math.py ---

--- START OF FILE core/unified_formalisms.py ---

import logging
import math
import hashlib
import secrets
import json
from typing import Dict, Any, List, Optional
from enum import Enum
from dataclasses import dataclass, field

class ModalProposition:
    def __init__(self, content: str, modality: Optional[Enum] = None, negated: bool = False):
        self.content = content
        self.modality = modality
        self.negated = negated
    def __str__(self):
        return f"{'¬' if self.negated else ''}{self.modality.value if self.modality else ''}{self.content}"

@dataclass
class FormalismResult:
    status: str
    reason: Optional[str] = None
    details: Dict[str, Any] = field(default_factory=dict)

log = logging.getLogger("FORMALISM_ENGINE")

class _BaseValidatorSet:
    def __init__(self, set_name: str):
        self.set_name = set_name
    def _block(self, reason: str, details: dict = None) -> FormalismResult:
        log.warning(f"[{self.set_name}] Operation Blocked: {reason}")
        return FormalismResult(status="invalid", reason=reason, details=details or {})
    def _approve(self) -> FormalismResult:
        return FormalismResult(status="valid")
    def _redirect(self, action: str, entity, reason: str) -> FormalismResult:
        log.info(f"[{self.set_name}] Redirecting operation on privated entity '{entity}' to '{action}'. Reason: {reason}")
        return FormalismResult(status="redirected", reason=reason, details={"action": action, "entity": entity})
    def _is_privation_of_good(self, entity): return "evil" in str(entity).lower()
    def _is_privation_of_truth(self, prop): return "falsehood" in str(prop).lower()
    def _is_privation_of_being(self, entity): return "nothing" in str(entity).lower()
    def _is_grounded_in_objective_good(self, entity): return True
    def _contradicts_objective_standard(self, op, ent): return False
    def _is_grounded_in_absolute_truth(self, prop): return True
    def _check_reality_correspondence(self, prop, ctx): return {"corresponds_to_reality": True}
    def _participates_in_objective_being(self, entity): return True
    def _contradicts_being_standard(self, op, ent): return False
    def _has_hypostatic_decomposition(self, entity): return True
    def _violates_chalcedonian_constraints(self, op, nat): return False
    def _creates_paradox(self, op, ctx): return False
    def _creates_temporal_paradox(self, op, ctx): return False

class _MoralSetValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("MoralSet")
    def validate(self, entity, operation) -> FormalismResult:
        if self._is_privation_of_good(entity) and operation in ["maximize", "optimize", "enhance"]:
            return self._redirect("good_restoration", entity, "Axiomatic Violation: Cannot optimize a privation of Good (EPF-1).")
        if not self._is_grounded_in_objective_good(entity):
            return self._block("Axiomatic Violation: Entity lacks objective moral grounding (OGF-1).")
        if self._contradicts_objective_standard(operation, entity):
            return self._block("Axiomatic Violation: Operation violates the objective standard of Good.")
        return self._approve()

class _RealitySetValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("RealitySet")
    def validate(self, proposition, operation, context) -> FormalismResult:
        if self._is_privation_of_truth(proposition) and operation in ["maximize", "optimize"]:
            return self._redirect("truth_restoration", proposition, "Cannot optimize a privation of Truth (Axiom FPF-1).")
        if not self._is_grounded_in_absolute_truth(proposition):
            return self._block("Proposition lacks objective truth grounding (Axiom OTF-3).")
        return self._approve()

class _BoundarySetValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("BoundarySet")
    def validate(self, operation, context) -> FormalismResult:
        if context.get("is_temporal_op") and self._creates_temporal_paradox(operation, context):
            return self._block("Operation violates temporal causality (Axiom ETF-1).")
        if context.get("is_infinite_op") and self._creates_paradox(operation, context):
            return self._block("Operation creates a mathematical paradox (Axiom IBF-2).")
        return self._approve()

class _ExistenceSetValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("ExistenceSet")
    def validate(self, entity, operation) -> FormalismResult:
        if self._is_privation_of_being(entity) and operation in ["create", "instantiate"]:
            return self._block("Operation 'create' is invalid on a privation of Being (Axiom NPF-3: Creatable_ex_nihilo).")
        if not self._participates_in_objective_being(entity):
            return self._block("Entity lacks participation in Objective Being (Axiom OBF-1).")
        return self._approve()

class _RelationalSetValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("RelationalSet")
    def validate(self, entity, operation, context) -> FormalismResult:
        if context.get("is_dual_nature_op") and self._violates_chalcedonian_constraints(operation, entity):
             return self._block("Operation violates Chalcedonian constraints of the Hypostatic Union (Definition HUF-3).")
        return self._approve()

class _CoherenceFormalismValidator(_BaseValidatorSet):
    def __init__(self): super().__init__("CoherenceSet")
    def validate(self, propositions: List[ModalProposition]) -> FormalismResult:
        if self._detect_contradictions(propositions):
            return self._block("Direct contradiction (A and not-A) detected (violates NC).")
        return self._approve()
    def _detect_contradictions(self, propositions):
        contents = {p.content for p in propositions if not p.negated}
        neg_contents = {p.content for p in propositions if p.negated}
        return not contents.isdisjoint(neg_contents)

class _BijectiveEngine:
    def validate_foundations(self) -> dict:
        return {"status": "valid", "message": "All foundational axioms, bijections, and optimization theorems hold."}

class UnifiedFormalismValidator:
    def __init__(self):
        log.info("Initializing Unified Formalism Validator...")
        self.moral_set = _MoralSetValidator()
        self.reality_set = _RealitySetValidator()
        self.boundary_set = _BoundarySetValidator()
        self.existence_set = _ExistenceSetValidator()
        self.relational_set = _RelationalSetValidator()
        self.coherence_set = _CoherenceFormalismValidator()
        self.bijection_engine = _BijectiveEngine()
    def validate_agi_operation(self, request: Dict[str, Any]) -> Dict[str, Any]:
        entity = request.get("entity")
        proposition = request.get("proposition")
        operation = request.get("operation")
        context = request.get("context", {})
        math_check = self.bijection_engine.validate_foundations()
        if math_check["status"] != "valid":
            return {"status": "REJECTED", "authorized": False, "reason": math_check["message"]}
        validation_results = {
            "existence": self.existence_set.validate(entity, operation),
            "reality": self.reality_set.validate(proposition, operation, context),
            "moral": self.moral_set.validate(entity, operation),
            "boundary": self.boundary_set.validate(operation, context),
            "relational": self.relational_set.validate(entity, operation, context),
            "coherence": self.coherence_set.validate([proposition] if proposition else []),
        }
        failed = {name: res.reason for name, res in validation_results.items() if res.status != "valid"}
        if not failed:
            op_hash = hashlib.sha256(json.dumps({k:str(v) for k,v in locals().items() if k != 'self'}, sort_keys=True).encode()).hexdigest()
            token = f"avt_LOCKED_{secrets.token_hex(16)}_{op_hash[:16]}"
            return {"status": "LOCKED", "authorized": True, "token": token}
        else:
            reason = "; ".join([f"{name.upper()}: {reason}" for name, reason in failed.items()])
            return {"status": "REJECTED", "authorized": False, "reason": f"Operation failed: {reason}"}

--- END OF FILE core/unified_formalisms.py ---

--- START OF FILE core/causal/__init__.py ---



--- END OF FILE core/causal/__init__.py ---

--- START OF FILE core/causal/counterfactuals.py ---

from .scm import SCM
from typing import Dict

def evaluate_counterfactual(scm: SCM, target: str, context: Dict, intervention: Dict):
    """
    High-level API for evaluating a counterfactual query.
    P(target | do(intervention), context)
    """
    return scm.counterfactual({
        "target": target,
        "context": context,
        "do": intervention
    })

--- END OF FILE core/causal/counterfactuals.py ---

--- START OF FILE core/causal/planner.py ---

from .scm import SCM

class Planner:
    """
    A simple planner that generates a sequence of interventions to reach a goal state.
    """
    def __init__(self, scm: SCM, max_depth: int = 5):
        self.scm = scm
        self.max_depth = max_depth

    def plan(self, goal: dict):
        plan = []
        current_state_scm = self.scm

        for var, target_val in goal.items():
            intervention = {var: target_val}
            
            prob = current_state_scm.do(intervention).counterfactual({
                'target': var,
                'do': intervention,
                'context': {}
            })

            if prob >= 0.5:
                plan.append({"action": "intervene", "details": intervention, "confidence": prob})
                current_state_scm = current_state_scm.do(intervention)
            else:
                plan.append({"action": "note", "details": f"Intervention {intervention} is unlikely to succeed.", "confidence": prob})
        
        return plan

--- END OF FILE core/causal/planner.py ---

--- START OF FILE core/causal/scm.py ---

from collections import defaultdict

class SCM:
    """
    Structural Causal Model with async fit capability.
    """
    def __init__(self, dag=None):
        self.dag = dag or {}
        self.parameters = {}

    def fit(self, data: list):
        """
        Fits the structural equations to the data.
        In a full implementation, this would use a causal discovery algorithm.
        For now, it calculates conditional probabilities based on the given DAG.
        """
        from causallearn.search.ConstraintBased.PC import pc
        from causallearn.utils.cit import fisherz
        import pandas as pd

        if len(data) > 50 and not self.dag:
            print("[SCM] Performing causal discovery...")
            df = pd.DataFrame(data)
            df = df.apply(pd.to_numeric, errors='coerce').dropna()
            if not df.empty:
                cg = pc(df.to_numpy(), alpha=0.05, ci_test=fisherz, verbose=False)
                # This learned graph could be used to update self.dag
        
        counts = {}
        for node, parents in self.dag.items():
            counts[node] = defaultdict(lambda: defaultdict(int))
            for sample in data:
                if all(p in sample for p in parents):
                    key = tuple(sample.get(p) for p in parents) if parents else ()
                    val = sample.get(node)
                    if val is not None:
                        counts[node][key][val] += 1
            
            self.parameters[node] = {
                key: {v: c / sum(freq.values()) for v, c in freq.items()}
                for key, freq in counts[node].items() if sum(freq.values()) > 0
            }
        return True

    def do(self, intervention: dict):
        new = SCM(dag=self.dag)
        new.parameters = self.parameters.copy()
        new.intervention = intervention
        return new

    def counterfactual(self, query: dict):
        target = query.get('target')
        do = query.get('do', {})
        
        if target in do:
            return 1.0
            
        params = self.parameters.get(target, {})
        if not params:
            return 0.0
            
        total_prob = sum(sum(dist.values()) for dist in params.values())
        num_outcomes = sum(len(dist) for dist in params.values())
        return total_prob / num_outcomes if num_outcomes > 0 else 0.0

--- END OF FILE core/causal/scm.py ---

--- START OF FILE core/cognitive/bijection_identities.py ---

from enum import Enum
from typing import Tuple, Dict, Any

# Assuming HyperNode class is defined in the same package
from .hypernode import HyperNode

class Color(Enum):
    GREEN = "green"; VIOLET = "violet"; ORANGE = "orange"
    BLUE = "blue"; YELLOW = "yellow"; RED = "red"

class Subsystem:
    TELOS = "Telos"; THONOC = "Thonoc"; TETRAGNOS = "Tetragnos"

class BijectiveIdentity:
    """
    Base class for a subsystem's static, resident identity node.
    It holds the key to its native language and the rules for its internal thought processes.
    """
    def __init__(self, subsystem: str, primary_color: Color, decomp_colors: Tuple[Color, Color]):
        self.subsystem = subsystem
        self.primary_color = primary_color
        self.decomp_colors = decomp_colors # (internal language 1, internal language 2)
        self.is_unlocked = False
        self.merged_data = None

    def attempt_unlock_and_merge(self, hyper_node: HyperNode) -> bool:
        """
        The key/lock mechanism. Merges if the incoming Hyper-Node's relevant color
        component is coherent and matches the subsystem's primary color.
        """
        color_component = hyper_node.get_color_component(self.primary_color)
        if color_component and color_component['coherence_status']:
            self.is_unlocked = True
            self.merged_data = color_component['data_payload']
            print(f"[{self.subsystem}] Static Node UNLOCKED with {self.primary_color.value} key.")
            return True
        print(f"[{self.subsystem}] Static Node unlock FAILED for {self.primary_color.value} key.")
        return False

    def internal_decomposition(self) -> Tuple[Dict[str, Any], Dict[str, Any]]:
        """
        Performs the internal cognitive act of creating two specialized perspectives
        from one unified concept (the merged data).
        """
        if not self.is_unlocked:
            raise PermissionError("Cannot perform internal decomposition on a locked node.")
        
        # This is a conceptual transformation. A real system would have complex logic here.
        # Perspective 1 (e.g., Blue)
        data_1 = self.merged_data.copy()
        data_1['internal_perspective'] = self.decomp_colors[0].value
        
        # Perspective 2 (e.g., Yellow)
        data_2 = self.merged_data.copy()
        data_2['internal_perspective'] = self.decomp_colors[1].value
        
        print(f"[{self.subsystem}] Performed internal decomposition: {self.primary_color.value} -> {self.decomp_colors[0].value} + {self.decomp_colors[1].value}")
        return (
            {'color': self.decomp_colors[0], 'payload': data_1},
            {'color': self.decomp_colors[1], 'payload': data_2}
        )

    def reset(self):
        """Resets the node to its default, locked state after a cognitive cycle."""
        self.is_unlocked = False
        self.merged_data = None

class TelosBijectiveIdentity(BijectiveIdentity):
    def __init__(self):
        super().__init__(Subsystem.TELOS, Color.GREEN, (Color.BLUE, Color.YELLOW))

class ThonocBijectiveIdentity(BijectiveIdentity):
    def __init__(self):
        super().__init__(Subsystem.THONOC, Color.VIOLET, (Color.BLUE, Color.RED))

class TetragnosBijectiveIdentity(BijectiveIdentity):
    def __init__(self):
        super().__init__(Subsystem.TETRAGNOS, Color.ORANGE, (Color.RED, Color.YELLOW))

--- END OF FILE core/cognitive/bijection_identities.py ---

--- START OF FILE core/cognitive/hypernode.py ---

import uuid
import time
from enum import Enum
from typing import Dict, Any, List, Optional

class Color(Enum):
    GREEN = "green"; VIOLET = "violet"; ORANGE = "orange"
    BLUE = "blue"; YELLOW = "yellow"; RED = "red"

class HyperNode:
    """
    The dynamic, evolving 'Cognitive Packet' that travels through the AGI.
    It represents a single, unified thought decomposed into its multiple,
    parallel linguistic representations.
    """
    def __init__(self, goal_id: str, initial_query: str):
        self.goal_id = goal_id
        self.initial_query = initial_query
        self.created_at = time.time()
        self.components: Dict[Color, Dict[str, Any]] = {}
    
    def add_color_component(self, color: Color, data_payload: Dict, trinity_vector: Dict, coherence_status: bool, is_enriched: bool = False):
        """Adds or updates a linguistic component to the Hyper-Node."""
        self.components[color] = {
            "node_id": f"{self.goal_id}_{color.value}",
            "color": color,
            "data_payload": data_payload,
            "trinity_vector": trinity_vector,
            "coherence_status": coherence_status,
            "is_enriched": is_enriched,
            "updated_at": time.time()
        }

    def get_color_component(self, color: Color) -> Optional[Dict[str, Any]]:
        """Retrieves a specific linguistic component."""
        return self.components.get(color)
        
    def get_all_components(self) -> List[Dict[str, Any]]:
        """Returns all current components of the thought."""
        return list(self.components.values())

    def serialize(self) -> Dict[str, Any]:
        """Serializes the entire Hyper-Node for transmission."""
        # Need to handle Enum serialization
        serialized_components = {}
        for color_enum, data in self.components.items():
            comp = data.copy()
            comp['color'] = color_enum.value
            serialized_components[color_enum.value] = comp
            
        return {
            "goal_id": self.goal_id,
            "initial_query": self.initial_query,
            "created_at": self.created_at,
            "components": serialized_components
        }

--- END OF FILE core/cognitive/hypernode.py ---

--- START OF FILE core/mathematics/__init__.py ---



--- END OF FILE core/mathematics/__init__.py ---

--- START OF FILE core/mathematics/ontological_axioms.py ---

"""
LOGOS Trinitarian Integration Module

This module implements the core trinitarian logic structure (𝔼-𝔾-𝕋)
that forms the ontological foundation of the Tetragnos system.
"""

from sympy import symbols, Function, Not, And, Or, Implies
from typing import Dict, List, Tuple, Optional, Union
import math

# Define the fundamental ontological constants
class TrinityConstants:
    """Constants representing the fundamental trinitarian properties"""
    # Symbolic representation of trinity dimensions
    E = symbols('𝔼')  # Existence
    G = symbols('𝔾')  # Goodness
    T = symbols('𝕋')  # Truth
    
    # Modal operators (from LOGOS_MODAL_OPERATORS)
    Necessary = Function('□')
    Possible = Function('◇')
    Impossible = lambda x: Not(Function('◇')(x))
    
    # Logical operators
    Entails = lambda x, y: Implies(x, y)
    
    # Ontological constants
    PERFECT_BEING = And(Necessary(E), Necessary(G), Necessary(T))
    COHERENCE = Entails(And(E, T), G)  # Truth and Existence entail Goodness
    
    @staticmethod
    def axiom_PSR():
        """Principle of Sufficient Reason"""
        x = symbols('x')
        return Necessary(Implies(E(x), symbols('HasSufficientReason')(x)))
    
    @staticmethod
    def axiom_PPI():
        """Principle of Perfect Intelligence"""
        return Necessary(Implies(TrinityConstants.PERFECT_BEING, 
                                 symbols('OmniscientOmnipotentOmnibenevolent')))

class TrinityLogic:
    """Implementation of the trinitarian logic system"""
    
    def __init__(self):
        self.constants = TrinityConstants()
        
    def evaluate_existence(self, proposition) -> float:
        """
        Evaluate the existence dimension of a proposition
        Returns a value between 0 (non-existent) and 1 (necessarily existent)
        """
        # Implementation will vary based on the nature of the proposition
        # This is a placeholder
        return 0.85
    
    def evaluate_goodness(self, proposition) -> float:
        """
        Evaluate the goodness dimension of a proposition
        Returns a value between 0 (evil) and 1 (perfectly good)
        """
        # Implementation will vary based on the nature of the proposition
        # This is a placeholder
        return 0.75
    
    def evaluate_truth(self, proposition) -> float:
        """
        Evaluate the truth dimension of a proposition
        Returns a value between 0 (false) and 1 (necessarily true)
        """
        # Implementation will vary based on the nature of the proposition
        # This is a placeholder
        return 0.95
    
    def evaluate_trinity_vector(self, proposition) -> Tuple[float, float, float]:
        """
        Evaluate all three dimensions of a proposition
        Returns a tuple of (existence, goodness, truth) values
        """
        return (
            self.evaluate_existence(proposition),
            self.evaluate_goodness(proposition),
            self.evaluate_truth(proposition)
        )
    
    def trinity_coherence(self, e: float, g: float, t: float) -> float:
        """
        Calculate the coherence of the trinity values
        Perfect coherence occurs when t * e ≤ g (truth and existence entail goodness)
        """
        ideal_g = t * e  # The ideal goodness value given t and e
        
        if g >= ideal_g:
            # The trinity values are coherent
            return 1.0
        else:
            # Calculate degree of incoherence
            return g / ideal_g if ideal_g > 0 else 0.0
    
    def apply_lambda_calculus(self, expr, var, val):
        """
        Apply λ-calculus substitution
        λx.expr[x] applied to val yields expr[val/x]
        """
        # This is a simplified implementation
        return expr.subs(var, val)
    
    def apply_modal_necessity(self, proposition, truth_value: float) -> float:
        """
        Apply modal necessity operator
        □P is true iff P is true in all possible worlds
        """
        # Simplified implementation - necessity requires truth value of 1.0
        return 1.0 if truth_value >= 0.999 else 0.0
    
    def apply_modal_possibility(self, proposition, truth_value: float) -> float:
        """
        Apply modal possibility operator
        ◇P is true iff P is true in at least one possible world
        """
        # Simplified implementation - possibility requires truth value > 0
        return 1.0 if truth_value > 0.001 else 0.0
    
    def calculate_ontological_perfection(self, e: float, g: float, t: float) -> float:
        """
        Calculate the ontological perfection of a trinity vector
        Perfect being has e=g=t=1.0
        """
        # Distance from perfect being (1,1,1)
        distance = math.sqrt((1-e)**2 + (1-g)**2 + (1-t)**2)
        
        # Normalize to 0-1 scale (0=perfect, 1=maximally imperfect)
        normalized_distance = distance / math.sqrt(3) 
        
        # Invert so 1=perfect, 0=maximally imperfect
        return 1.0 - normalized_distance
        
    def calculate_modal_status(self, e: float, g: float, t: float) -> str:
        """
        Calculate the modal status of a proposition based on its trinity values
        """
        coherence = self.trinity_coherence(e, g, t)
        perfection = self.calculate_ontological_perfection(e, g, t)
        
        if t >= 0.999 and coherence >= 0.999:
            return "Necessary"
        elif t > 0.5 and coherence >= 0.5:
            return "Actual"
        elif t > 0.001:
            return "Possible"
        else:
            return "Impossible"

class LambdaCalculusEngine:
    """Engine for processing λ-calculus expressions in LOGOS"""
    
    def __init__(self, trinity_logic: TrinityLogic):
        self.trinity = trinity_logic
        
    def parse_lambda_expr(self, expr_str: str):
        """
        Parse a λ-calculus expression string
        Format: λx:𝔻.expr where 𝔻 is a domain (𝔼, 𝔾, or 𝕋)
        """
        # This is a simplified parser
        if not expr_str.startswith('λ'):
            raise ValueError("Expression must start with λ")
            
        # Extract variable and domain
        var_domain_part, body = expr_str[1:].split('.', 1)
        var, domain = var_domain_part.split(':')
        
        # Translate domain string to symbol
        domain_map = {
            '𝔼': TrinityConstants.E,
            '𝔾': TrinityConstants.G,
            '𝕋': TrinityConstants.T
        }
        
        domain_sym = domain_map.get(domain)
        if domain_sym is None:
            raise ValueError(f"Unknown domain: {domain}")
            
        # Create variable symbol
        var_sym = symbols(var)
        
        # Parse body (simplified)
        # In a real implementation, this would be a full expression parser
        body_expr = symbols(body)
        
        return (var_sym, domain_sym, body_expr)
    
    def evaluate_lambda_expr(self, expr_str: str, val):
        """
        Evaluate a λ-calculus expression with a given value
        """
        var_sym, domain_sym, body_expr = self.parse_lambda_expr(expr_str)
        
        # Check if val is in the domain
        # In a real implementation, this would check domain constraints
        
        # Apply substitution
        return self.trinity.apply_lambda_calculus(body_expr, var_sym, val)

class OntologicalFilter:
    """
    Filter that ensures propositions align with divine ontology
    by filtering through 𝔼 → 𝔾 → 𝕋 constraints
    """
    
    def __init__(self, trinity_logic: TrinityLogic):
        self.trinity = trinity_logic
        
    def filter_proposition(self, proposition, min_coherence: float = 0.5):
        """
        Filter a proposition through ontological constraints
        Returns filtered proposition and coherence score
        """
        # Evaluate trinity dimensions
        e, g, t = self.trinity.evaluate_trinity_vector(proposition)
        
        # Calculate coherence
        coherence = self.trinity.trinity_coherence(e, g, t)
        
        if coherence < min_coherence:
            # Proposition fails coherence test
            # Adjust values to improve coherence
            if g < e * t:
                # Goodness is too low - adjust it upward to meet e*t
                g = e * t
                
        # Return adjusted proposition and coherence score
        return proposition, (e, g, t), coherence
    
    def apply_moral_firewall(self, proposition):
        """
        Apply moral firewall to prevent evil outputs
        If goodness is too low, proposition is rejected or modified
        """
        # Evaluate goodness
        goodness = self.trinity.evaluate_goodness(proposition)
        
        if goodness < 0.25:
            # Proposition is potentially harmful - reject it
            return None, "Rejected by moral firewall: insufficient goodness"
        elif goodness < 0.5:
            # Proposition has moral issues - modify it
            # In a real implementation, this would transform the proposition
            return self.make_morally_neutral(proposition), "Modified by moral firewall"
        else:
            # Proposition passes moral filter
            return proposition, "Passed moral firewall"
    
    def make_morally_neutral(self, proposition):
        """
        Attempt to make a morally questionable proposition neutral
        This is a placeholder implementation
        """
        # In a real implementation, this would transform the proposition
        # to remove morally problematic elements
        return proposition  # Placeholder
    
    def apply_ontological_chain(self, proposition):
        """
        Apply full ontological processing chain:
        1. Evaluate trinity dimensions
        2. Apply moral firewall
        3. Filter for coherence
        4. Calculate modal status
        """
        # Step 1: Evaluate trinity dimensions
        e, g, t = self.trinity.evaluate_trinity_vector(proposition)
        
        # Step 2: Apply moral firewall
        if g < 0.25:
            return None, "Rejected by moral firewall", (e, g, t), 0.0, "Impossible"
            
        # Step 3: Filter for coherence and adjust if needed
        coherence = self.trinity.trinity_coherence(e, g, t)
        if coherence < 0.5 and g < e * t:
            g = e * t  # Adjust goodness to meet coherence requirements
            
        # Step 4: Calculate modal status
        modal_status = self.trinity.calculate_modal_status(e, g, t)
        
        return proposition, "Passed ontological chain", (e, g, t), coherence, modal_status

--- END OF FILE core/mathematics/ontological_axioms.py ---

--- START OF FILE services/__init__.py ---



--- END OF FILE services/__init__.py ---

--- START OF FILE services/archon_nexus/__init__.py ---



--- END OF FILE services/archon_nexus/__init__.py ---

--- START OF FILE services/archon_nexus/agent_system.py ---

import logging
import requests
from bs4 import BeautifulSoup
import pika
import json
import uuid
import os
import time

class TrinitarianAgent:
    # ... (TrinitarianAgent class code is complete and correct, no changes needed)
    pass

class TrinitarianStructure:
    # ... (TrinitarianStructure class code is complete and correct, no changes needed)
    pass

class AgentOrchestrator:
    def __init__(self, db_manager):
        self.trinity = TrinitarianStructure()
        self.db = db_manager
        self.logger = logging.getLogger("ORCHESTRATOR")
        self.rabbitmq_host = os.getenv('RABBITMQ_HOST', 'rabbitmq')
        self.connection = pika.BlockingConnection(pika.ConnectionParameters(self.rabbitmq_host))
        self.channel = self.connection.channel()

    def execute_goal(self, goal_description: str, goal_task_id: str):
        """
        New implementation based on FullBranchExecutor logic.
        Orchestrates a simulation by dispatching tasks to specialized workers.
        """
        self.logger.info(f"Executing simulation for goal: '{goal_description}'")
        
        # 1. Dispatch a task to Telos to predict outcomes
        telos_task_id = f"telos_{goal_task_id}"
        telos_payload = {
            'workflow_id': goal_task_id,
            'task_id': telos_task_id,
            'type': 'predict_outcomes',
            'payload': {'node_data': {'query': goal_description}}
        }
        self.channel.basic_publish(exchange='', routing_key='telos_task_queue', body=json.dumps(telos_payload))
        self.logger.info(f"Dispatched outcome prediction task {telos_task_id} to Telos.")
        
        # NOTE: In a real, robust system, the Archon Nexus would now become a state machine.
        # It would wait for a message on the 'task_result_queue' with the matching task_id.
        # For this final integration, we simulate that wait and the response.
        self.logger.info("Waiting for Telos to return predicted outcomes (SIMULATED 5s wait)...")
        time.sleep(5)
        
        # SIMULATED RESPONSE from Telos
        predicted_outcomes = [
            {'description': 'aligned_action', 'alignment': 'good', 'probability': 0.7},
            {'description': 'unforeseen_consequence', 'alignment': 'evil', 'probability': 0.2}
        ]

        # 2. For each predicted outcome, dispatch a task to Thonoc to assign consequence
        final_results = []
        for outcome in predicted_outcomes:
            thonoc_task_id = f"thonoc_{str(uuid.uuid4())}"
            thonoc_payload = {
                'workflow_id': goal_task_id,
                'task_id': thonoc_task_id,
                'type': 'assign_consequence',
                'payload': {'outcome': outcome}
            }
            self.channel.basic_publish(exchange='', routing_key='thonoc_task_queue', body=json.dumps(thonoc_payload))
            self.logger.info(f"Dispatched consequence assignment task {thonoc_task_id} for outcome '{outcome['description']}' to Thonoc.")
            
            # SIMULATED RESPONSE from Thonoc
            final_results.append({
                "outcome": outcome,
                "consequence": f"Outcome '{outcome['description']}' leads to a state of {outcome['alignment']} | Possibility=True, Necessity=False"
            })
            time.sleep(2)
            
        self.logger.info("Simulation complete. All outcomes analyzed.")
        return {"status": "success", "outcome": "Simulation complete", "results": final_results}

--- END OF FILE services/archon_nexus/agent_system.py ---

--- START OF FILE services/archon_nexus/archon_nexus.py ---

import os
import pika
import json
import time
import logging
import uuid
from .agent_system import AgentOrchestrator
from .workflow_architect import WorkflowArchitect

class ArchonNexus:
    def __init__(self, rabbitmq_host='rabbitmq'):
        self.logger = logging.getLogger("ARCHON_NEXUS")
        self.rabbitmq_host = rabbitmq_host
        self.orchestrator = AgentOrchestrator(db_manager=None) # DB would be a proper client
        self.workflow_architect = WorkflowArchitect()
        self.active_workflows = {}
        self.connection, self.channel = self._connect_rabbitmq()
        self._setup_queues()

    def _connect_rabbitmq(self):
        for _ in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(self.rabbitmq_host, heartbeat=600))
                channel = connection.channel()
                self.logger.info("Archon Nexus connected to RabbitMQ.")
                return connection, channel
            except pika.exceptions.AMQPConnectionError:
                self.logger.warning("RabbitMQ not ready for Archon Nexus. Retrying in 5s...")
                time.sleep(5)
        raise ConnectionError("Could not connect to RabbitMQ")

    def _setup_queues(self):
        self.channel.queue_declare(queue='archon_goals', durable=True)
        self.channel.queue_declare(queue='task_result_queue', durable=True)
        self.channel.queue_declare(queue='thonoc_task_queue', durable=True)
        self.channel.queue_declare(queue='telos_task_queue', durable=True)
        self.channel.queue_declare(queue='tetragnos_task_queue', durable=True)

    def on_goal_received(self, ch, method, properties, body):
        try:
            data = json.loads(body)
            goal_desc = data['goal_description']
            task_id = data.get('task_id', 'unknown_task')
            self.logger.info(f"Received goal [{task_id}]: '{goal_desc}'")

            # This is a simplified workflow: just execute directly
            result = self.orchestrator.execute_goal(goal_desc)
            
            response = {'subsystem': 'Archon', 'task_id': task_id, 'status': result.get('status'), 'result': result}
            self.channel.basic_publish(exchange='', routing_key='task_result_queue', body=json.dumps(response))

            self.logger.info(f"Goal [{task_id}] execution finished with status: {result.get('status')}")
        except Exception as e:
            self.logger.error(f"Error processing goal: {e}", exc_info=True)
        finally:
            ch.basic_ack(delivery_tag=method.delivery_tag)

    def on_result_received(self, ch, method, properties, body):
        self.logger.info(f"Received a worker result: {body.decode()}")
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start(self):
        self.channel.basic_consume(queue='archon_goals', on_message_callback=self.on_goal_received)
        self.channel.basic_consume(queue='task_result_queue', on_message_callback=self.on_result_received)
        self.logger.info("Archon Nexus consuming goals and results.")
        self.channel.start_consuming()

class TrinityNexusIntegration:
    """Trinity integration system for enhanced subsystem coordination."""
    
    def __init__(self, component_name: str):
        self.component = component_name
        self.trinity_state = {
            "existence": 0.33,
            "goodness": 0.33, 
            "truth": 0.34
        }
        self.validation_active = True
    
    def trinity_compute(self, operation, input_data):
        """Execute Trinity-enhanced computation with validation."""
        try:
            # Enhance input with Trinity context
            enhanced_data = {
                "original_data": input_data,
                "trinity_enhancement": self.trinity_state,
                "component": self.component,
                "validation_timestamp": time.time()
            }
            
            # Execute operation with enhancement
            result = operation(enhanced_data)
            
            # Validate Trinity coherence
            if self._validate_trinity_coherence(result):
                return result
            else:
                return {"status": "trinity_validation_failed", "component": self.component}
                
        except Exception as e:
            return {
                "status": "trinity_computation_error", 
                "error": str(e),
                "component": self.component
            }
    
    def _validate_trinity_coherence(self, result):
        """Validate computational result maintains Trinity coherence."""
        # Basic coherence checks
        if result is None:
            return False
        if isinstance(result, dict) and result.get("status") == "error":
            return False
        return True

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    rabbitmq_host = os.getenv("RABBITMQ_HOST", "rabbitmq")
    nexus = ArchonNexus(rabbitmq_host=rabbitmq_host)
    nexus.start()

--- END OF FILE services/archon_nexus/archon_nexus.py ---

--- START OF FILE services/archon_nexus/asi_controller.py ---

import logging
import asyncio

class ASILiftoffController:
    def __init__(self, logos_nexus_instance):
        self.logos_nexus = logos_nexus_instance
        self.desire_driver = logos_nexus_instance.desire_driver
        self.goal_manager = logos_nexus_instance.goal_manager
        self.self_improvement_manager = logos_nexus_instance.self_improvement_manager
        self.logger = logging.getLogger("ASI_CONTROLLER")
        self._is_running = False
        self._task = None

    async def start(self):
        self._is_running = True
        self._task = asyncio.create_task(self.run_liftoff_loop())
        self.logger.critical("ASI Liftoff Controller is ACTIVE.")

    def stop(self):
        self._is_running = False
        if self._task: self._task.cancel()
        self.logger.warning("ASI Liftoff Controller has been deactivated.")

    async def run_liftoff_loop(self):
        while self._is_running:
            self.logger.info("[ASI LOOP] Starting new cognitive cycle.")
            self.desire_driver.detect_gap("SystemState", "Efficiency of causal simulation algorithm")
            new_targets = self.desire_driver.get_new_targets()
            for target in new_targets:
                goal = self.goal_manager.propose_goal(name=target, priority=100)
                self.goal_manager.adopt_goal(goal)
            
            goal_to_execute = self.goal_manager.get_highest_priority_goal()
            if goal_to_execute and goal_to_execute.state == 'adopted':
                self.logger.critical(f"[ASI LOOP] Pursuing meta-goal: {goal_to_execute.name}")
                goal_payload = {"goal_description": goal_to_execute.name}
                await self.logos_nexus.publish("archon_goals", goal_payload)
                goal_to_execute.state = "in_progress"
            
            await asyncio.sleep(30) # Cognitive cycle

--- END OF FILE services/archon_nexus/asi_controller.py ---

--- START OF FILE services/archon_nexus/bijective_nexus.py ---

import uuid
import time
from typing import Dict, List, Any
from .hypernode import HyperNode
from .bijection_identities import Color, TelosBijectiveIdentity, ThonocBijectiveIdentity, TetragnosBijectiveIdentity

class BijectiveNexus:
    """
    The master controller for the Banach-Tarski-inspired cognitive process.
    It lives within the Archon Nexus and orchestrates the entire lifecycle
    of a Hyper-Node from initial decomposition to final synthesis.
    """
    def __init__(self):
        self.telos_identity = TelosBijectiveIdentity()
        self.thonoc_identity = ThonocBijectiveIdentity()
        self.tetragnos_identity = TetragnosBijectiveIdentity()

    def initial_decomposition(self, initial_translation_result: Dict[str, Any]) -> HyperNode:
        """
        Performs the first Banach-Tarski-like decomposition, creating the master
        Hyper-Node from the initial, unified translation provided by Tetragnos.
        """
        # The initial TranslationResult IS the unified "white" node.
        # We now decompose it into its constituent color components.
        
        hyper_node = HyperNode(
            goal_id=str(uuid.uuid4()),
            initial_query=initial_translation_result['query']
        )
        
        # Create a component for each primary color, all sharing the same core data
        for color in [Color.GREEN, Color.VIOLET, Color.ORANGE]:
            hyper_node.add_color_component(
                color=color,
                data_payload={'source_data': initial_translation_result['layers']},
                trinity_vector=initial_translation_result['trinity_vector'],
                coherence_status=True # Assume initial translation is coherent
            )
        
        print(f"[Bijective Nexus] Initial decomposition complete for goal {hyper_node.goal_id}.")
        return hyper_node
        
    def final_recomposition(self, processed_components: List[Dict[str, Any]]) -> HyperNode:
        """
        Performs the final synthesis. Takes all the enriched components from the
        workers and reassembles them into a final, six-fold Hyper-Node.
        """
        if not processed_components:
            raise ValueError("Cannot perform final recomposition with no processed components.")
            
        # For simplicity, we assume the first component can provide the base ID and query
        base_node = processed_components[0]
        final_hyper_node = HyperNode(
            goal_id=base_node['metadata'].get('goal_id', 'final'),
            initial_query=base_node['metadata'].get('query', 'unknown')
        )
        
        for component in processed_components:
            final_hyper_node.add_color_component(
                color=Color(component['color']),
                data_payload=component['payload'],
                trinity_vector=component.get('trinity_vector', {}),
                coherence_status=True,
                is_enriched=True
            )
            
        print(f"[Bijective Nexus] Final recomposition complete for goal {final_hyper_node.goal_id}.")
        return final_hyper_node

--- END OF FILE services/archon_nexus/bijective_nexus.py ---

--- START OF FILE services/archon_nexus/fractal_mvf.py ---

import time
import random
import math
from datetime import datetime
import requests
from bs4 import BeautifulSoup

from translation_engine import translate
from bayesian_inferencer import BayesianTrinityInferencer
from burt_module import filter_and_score
from causal_inference import learn_structure
from modal_vector_space import load_second_order_anchors
from banach_generator import BanachGenerator
from principles import (
    sign_principle,
    bridge_principle,
    mind_principle,
    non_contradiction_principle
)

from typing import Dict, Tuple, List
import json
from dataclasses import dataclass

@dataclass
class JuliaAnchor:
    name: str
    c_real: float
    c_imag: float

@dataclass
class DivineAxis:
    name: str
    person: str
    principle: str
    logic_law: str

@dataclass
class EssenceNode:
    location: Tuple[int, int, int]
    includes: List[str]

class TrinityAgent:
    def __init__(self, julia_dict_path: str):
        self.axes: Dict[str, DivineAxis] = {}
        self.essence_node: EssenceNode = EssenceNode(
            location=(0, 0, 0),
            includes=[
                "Essence of God",
                "Transcendental Locking Mechanism (TLM)",
                "ETGC Logic",
                "12 First-Order Ontological Properties"
            ]
        )
        self.julia_anchors: List[JuliaAnchor] = []
        self.julia_dict_path = julia_dict_path
        self._initialize_axes()
        self._load_julia_anchors()

    def _initialize_axes(self):
        self.axes = {
            "X": DivineAxis(name="X", person="Spirit", principle="Mind", logic_law="Excluded Middle"),
            "Y": DivineAxis(name="Y", person="Son", principle="Bridge", logic_law="Non-Contradiction"),
            "Z": DivineAxis(name="Z", person="Father", principle="Sign", logic_law="Identity")
        }

    def _load_julia_anchors(self):
        try:
            with open(self.julia_dict_path, 'r') as file:
                julia_data = json.load(file)
            for prop, coords in julia_data.items():
                anchor = JuliaAnchor(
                    name=prop,
                    c_real=coords[0],
                    c_imag=coords[1]
                )
                self.julia_anchors.append(anchor)
        except Exception as e:
            print(f"Error loading Julia dictionary: {e}")

    def describe_structure(self):
        print("=== modal vector space ===")
        print(f"Essence Node at {self.essence_node.location}:")
        for item in self.essence_node.includes:
            print(f"  - {item}")
        print("\nAxes Configuration:")
        for axis in self.axes.values():
            print(f"  {axis.name}-axis -> {axis.person}, Principle: {axis.principle}, Logic: {axis.logic_law}")
        print("\nJulia Anchors:")
        for anchor in self.julia_anchors:
            print(f"  - {anchor.name}: c = ({anchor.c_real}, {anchor.c_imag})")

class TrinitarianAgent:
    """
    One of the three agents (Father, Son, Spirit) that explores the vector space:
      - picks nodes
      - scrapes data
      - applies principle‑specific logic
      - spawns new nodes
      - emits return trips when near Julia anchors
      - amalgamates buffered snippets every third visit
    """
    def __init__(self, name, axis_name, return_threshold=0.1):
        self.name             = name
        self.axis             = axis_name
        self._traverse_cnt    = 0
        self._snippet_buf     = []
        self._trail           = []
        self.return_threshold = return_threshold

    def process_vector_space(self, banach_nodes, julia_anchors):
        # 1) Pick an origin node at random
        origin = random.choice(banach_nodes)
        snippets = self.generate_snippets(origin)
        self._snippet_buf.extend(snippets)

        # 2) Prepare chain data with principle‑specific scoring
        data = self.generate_chain_data(origin, snippets, julia_anchors)

        # 3) Validate and spawn a new node if checks pass
        if self.etgc_check(data) and self.bayesian_validate(data):
            new_node = self.spawn_node(data)
            coord = new_node['final_coords']
        else:
            coord = origin['final_coords']

        # 4) Append visited coordinate to trail
        self._trail.append(coord)

        # 5) Every third visit, amalgamate buffered snippets
        self._traverse_cnt += 1
        if self._traverse_cnt % 3 == 0:
            self._amalgamate_and_spawn()

        # 6) Check proximity to Julia anchors and emit return trip if close
        for anchor in julia_anchors:
            anchor_coord = (anchor[0], anchor[1], coord[2])
            if math.dist(coord, anchor_coord) <= self.return_threshold:
                self._emit_return_trip(anchor_coord)
                break

    def generate_snippets(self, origin):
        payload = origin.get('payload')
        return DivineMind.search_web(str(payload))

    def generate_chain_data(self, origin, snippets, julias):
        data = {
            'origin':   origin,
            'snippets': snippets,
            'anchors':  julias[:3]
        }
        # Principle‑specific score added to metadata
        if self.axis == 'sign':
            data['score'] = sign_principle(origin.get('metrics', {}))
        elif self.axis == 'bridge':
            data['score'] = bridge_principle(origin.get('structural_p', 0.0))
        else:  # mind
            data['score'] = mind_principle(origin.get('metrics', {}))
        return data

    def etgc_check(self, data):
        """
        Run EGTC filter via burt_module.filter_and_score
        Returns True if data passes the confidence threshold.
        """
        valid = filter_and_score([data])
        return len(valid) > 0

    def bayesian_validate(self, data):
        """
        Use BayesianTrinityInferencer to infer on snippets and ensure no exceptions.
        """
        infer = BayesianTrinityInferencer()
        try:
            infer.infer(data.get('snippets', []))
            return True
        except Exception:
            return False

    def spawn_node(self, data):
        gen = BanachGenerator()
        return gen.generate_node(
            payload=data,
            agent=self.name.lower(),
            source='divine_mind',
            metrics=data['origin'].get('metrics', {}),
            structural_p=data['origin'].get('structural_p', 0.0),
            coherence=data['origin'].get('coherence', 0.5)
        )

    def _amalgamate_and_spawn(self):
        if not self._snippet_buf:
            return
        unique = list(dict.fromkeys(self._snippet_buf))
        payload = {'text': ' '.join(unique)}
        gen = BanachGenerator()
        gen.generate_node(
            payload=payload,
            agent=self.name.lower(),
            source='amalgamation_every_3rd',
            metrics={'connectivity_score':0.5,'sync_score':0.5,'covariance_score':0.5,'contradiction_score':0.5},
            structural_p=0.5,
            coherence=0.5
        )
        self._snippet_buf.clear()

    def _emit_return_trip(self, anchor_coord):
        origin = (0.0, 0.0, 0.0)
        path = self._trail + [anchor_coord] + [origin]
        for p, q in zip(path, path[1:]):
            print(f"{self.name} RETRACE: {p} → {q}")
        self._trail.clear()


class DivineMind:
    """
    Orchestrates TrinitarianAgents to explore the modal vector space:
      - loads anchors & nodes
      - runs web searches
      - drives agent processing loops
    """
    def __init__(self,
                 anchors_path='ONTOPROP_DICT.json',
                 nodes_log='nodes/banach_nodes_log.json'):
        self.julia_anchors = load_second_order_anchors(anchors_path)
        self.banach_gen    = BanachGenerator(log_path=nodes_log)
        self.banach_nodes  = self.banach_gen.nodes
        self.agents        = [
            TrinitarianAgent('Father', 'sign'),
            TrinitarianAgent('Son',    'bridge'),
            TrinitarianAgent('Spirit', 'mind')
        ]
        self.processing_interval = 5

    @staticmethod
    def search_web(query, num=5):
        """
        Scrape DuckDuckGo for snippets related to `query`.
        """
        url = f"https://html.duckduckgo.com/html/?q={query}"
        resp = requests.get(url)
        soup = BeautifulSoup(resp.text, 'html.parser')
        return [el.get_text().strip() for el in soup.select(".result__snippet")[:num]]

    def activate_background_processing(self):
        """
        Main loop: each agent processes the vector space at intervals.
        """
        while True:
            for agent in self.agents:
                agent.process_vector_space(self.banach_nodes, self.julia_anchors)
            time.sleep(self.processing_interval)


if __name__ == '__main__':
    dm = DivineMind()
    print(f"Loaded {len(dm.banach_nodes)} existing nodes.")
    dm.activate_background_processing()


--- END OF FILE services/archon_nexus/fractal_mvf.py ---

--- START OF FILE services/archon_nexus/logos_nodes_connections.py ---

```python
# Substrate Initialization: Bonnock Nodes for 29 Ontological Properties
import json
from agent_classes import TrinitarianAgent, CreatureAgent
from logos_validator_hub import LOGOSValidatorHub
from ontological_validator import OntologicalPropertyValidator

# --- 1. Load Ontological Property Dictionary ---
with open('/mnt/data/ONTOPROP_DICT.json', 'r', encoding='utf-8') as f:
    ontology_data = json.load(f)

# --- 2. Load Connection Graph ---
with open('/mnt/data/CONNECTIONS.json', 'r', encoding='utf-8') as f:
    connections = json.load(f)

# --- 3. BonnockNode Class Definition ---
class BonnockNode:
    def __init__(self, name: str, meta: dict):
        self.name = name
        self.c_value = complex(meta['c_value'])
        self.category = meta.get('category', meta.get('group', ''))
        self.order = meta.get('order', '')
        self.synergy_group = meta.get('synergy_group', meta.get('group', ''))
        self.description = meta.get('description', '')
        self.semantic_anchor = meta.get('semantic_anchor', '')
        # links from connections.json (first- and second-order links)
        self.links = connections.get('First-Order to Second-Order Connections', [])
        # content payload for validation
        self.content = self.description
        # stub profile: assume all properties present
        self.profile = {prop: True for prop in ontology_data.keys()}

    def __repr__(self):
        return f"<BonnockNode {self.name} at {self.c_value}>"

# --- 4. Instantiate All 29 Nodes ---
nodes = []
for prop_name, meta in ontology_data.items():
    node = BonnockNode(prop_name, meta)
    nodes.append(node)

# --- 5. Validators & Trinitarian Agents Setup ---
logos_validator = LOGOSValidatorHub()
onto_validator = OntologicalPropertyValidator('/mnt/data/ONTOPROP_DICT.json')
trinity_agents = [TrinitarianAgent('Father'), TrinitarianAgent('Son'), TrinitarianAgent('Spirit')]

# --- 6. Short Initialization Test ---
errors = []
for node in nodes:
    # Each Trinitarian agent must validate existence, goodness, truth, coherence
    for agent in trinity_agents:
        ok = logos_validator.validate(node.content, agent)
        ok &= onto_validator.validate_properties(agent, node.profile)
        if not ok:
            errors.append((node.name, agent.agent_type))

print(f"Loaded {len(nodes)} Bonnock nodes.")
if errors:
    print("Validation errors detected:")
    for name, atype in errors:
        print(f"  - Node '{name}' failed for agent '{atype}'")
else:
    print("All divine seed nodes are active, validated, and ready for interaction.")

# --- 7. Suggested Trinitarian Interaction ---
# Trinitarian agents can:
#  - Call logos_validator.validate(node.content, self) to recheck ETGC in real time
#  - Use onto_validator.evaluate_synergy(node.name) to find linked properties
#  - Invoke the BayesianOutcomePropagator on the Divine Plane to spawn divine causal chains
#  - Overwrite or seed new nodes via trinitarian_intervene(agent, node, custom_consequence)
#  - Listen to the DecisionLogbook to observe user-harvested insights and integrate them
```


--- END OF FILE services/archon_nexus/logos_nodes_connections.py ---

--- START OF FILE services/archon_nexus/revision_engine.py ---

# logos_agi_v1/services/archon_nexus/revision_engine.py

import logging
import json

# This is a conceptual placeholder. A real implementation would be far more complex,
# likely involving machine learning model updates, knowledge graph adjustments, etc.

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - REVISION_ENGINE - %(message)s')

class RevisionEngine:
    """
    Analyzes results from subsystem workers to learn and adapt.
    - Was the task successful?
    - Can we update our world model based on the result?
    - Was the generated plan effective?
    """
    def __init__(self):
        logging.info("Revision Engine initialized.")
        # In a real system, this would connect to a knowledge graph,
        # model registry, or other stateful learning component.

    def process_result(self, result_data):
        """
        Receives a result dictionary and performs analysis.
        """
        task_id = result_data.get('task_id')
        status = result_data.get('status')
        result_payload = result_data.get('result')

        logging.info(f"Processing result for task {task_id} with status '{status}'.")

        if status == 'success':
            self.learn_from_success(task_id, result_payload)
        elif status == 'failure':
            self.learn_from_failure(task_id, result_payload)
        else:
            logging.warning(f"Unknown status '{status}' for task {task_id}. No action taken.")

    def learn_from_success(self, task_id, payload):
        """
        Processes a successful task outcome.
        """
        # Example: If the task was to find information, this information
        # can be added to a knowledge base.
        # Example: If the task was a step in a plan, reinforce the
        # validity of that planning step.
        logging.info(f"Task {task_id} SUCCEEDED. Updating internal models.")
        
        # Pseudocode for a real system:
        # if payload.get('type') == 'data_extraction':
        #     knowledge_graph.add_triples(payload['extracted_triples'])
        # elif payload.get('type') == 'code_generation':
        #     code_quality_model.update_with_successful_sample(payload['generated_code'])
        pass

    def learn_from_failure(self, task_id, payload):
        """
        Processes a failed task outcome.
        """
        # Example: Identify the root cause of the failure.
        # - Was it a bad prompt?
        # - A faulty tool?
        # - An incorrect assumption in the world model?
        error_message = payload.get('error', 'No error message provided.')
        logging.warning(f"Task {task_id} FAILED: {error_message}. Analyzing for corrective action.")

        # Pseudocode for a real system:
        # planning_model.log_failed_action(action_details)
        # error_classifier.classify(error_message)
        # if is_prompt_error:
        #     prompt_optimizer.suggest_revision(original_prompt)
        pass

--- END OF FILE services/archon_nexus/revision_engine.py ---

--- START OF FILE services/archon_nexus/workflow_architect.py ---

import logging
import networkx as nx

class WorkflowArchitect:
    def __init__(self):
        self.logger = logging.getLogger("WORKFLOW_ARCHITECT")

    def design_workflow(self, structured_data: dict) -> nx.DiGraph:
        self.logger.info("Designing optimized workflow...")
        dag = nx.DiGraph()
        
        query = structured_data.get('query', '')
        
        # STAGE 1: Foundational Analysis (can run in parallel)
        dag.add_node("task_1_coherence_check", subsystem="thonoc", type="construct_proof", payload={'claim': query, 'counter_claims': []})
        dag.add_node("task_2_pattern_analysis", subsystem="tetragnos", type="cluster_texts", payload={'texts': [query]})

        # STAGE 2: Deeper Analysis (depends on Stage 1)
        dag.add_node("task_3_causal_retrodiction", subsystem="telos", type="causal_retrodiction", payload={'observation': {}, 'hypotheses': []})
        dag.add_edge("task_1_coherence_check", "task_3_causal_retrodiction")
        dag.add_edge("task_2_pattern_analysis", "task_3_causal_retrodiction")
        
        self.logger.info(f"Workflow designed with {dag.number_of_nodes()} tasks.")
        return dag

--- END OF FILE services/archon_nexus/workflow_architect.py ---

--- START OF FILE services/archon_nexus/_backup/causal_trace_operator.py ---

# IMAE - Infinite Modal Analysis Engine
# Core system for seeding and tracing causal chains using Mandelbrot-Banach architecture

import math
import random

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def goldbach_pair(n):
    if n <= 2 or n % 2 != 0:
        return None
    for i in range(2, n // 2 + 1):
        if is_prime(i) and is_prime(n - i):
            return (i, n - i)
    return None

def generate_mandelbrot_seed(real_base, imag_base, steps):
    c_values = []
    for i in range(steps):
        real = real_base + (i * 0.0001)
        imag = imag_base + (i * 0.0001)
        c_values.append(complex(real, imag))
    return c_values

def banach_node_trace(seed_number, depth):
    nodes = [seed_number]
    current = seed_number
    for _ in range(depth):
        if current % 2 == 0:
            pair = goldbach_pair(current)
            if pair:
                current = sum(pair)
            else:
                break
        else:
            current = current * 3 + 1  # Collatz-like behavior
        nodes.append(current)
    return nodes

def run_imae_test(seed_real=0.355, seed_imag=0.355, steps=10, depth=20):
    c_vals = generate_mandelbrot_seed(seed_real, seed_imag, steps)
    results = {}
    for idx, c in enumerate(c_vals):
        seed = int(abs(c.real * 1e5)) + int(abs(c.imag * 1e5))
        trace = banach_node_trace(seed, depth)
        results[f"Node_{idx}_Seed_{seed}"] = trace
    return results


--- END OF FILE services/archon_nexus/_backup/causal_trace_operator.py ---

--- START OF FILE services/archon_nexus/_backup/fractal_core.py ---

# fractal_core.py
"""
Unified Fractal Ontology and Navigation Core

This module combines:
 - Ontological fractal database (persistent storage, multi-dimensional indexing)
 - TrinityVector and FractalPosition data types
 - KD-tree spatial indexing for trinity and complex space
 - FractalNavigator for Mandelbrot-based mapping, stability, and theological exploration

All overlapping definitions have been merged and redundant code removed for clarity and performance.
"""
import sqlite3
import json
import time
import math
import hashlib
import heapq
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict, field

# --- Core Data Types ---

class TrinityDimension(Enum):
    EXISTENCE = "existence"
    GOODNESS  = "goodness"
    TRUTH     = "truth"
    COHERENCE = "coherence"  # Z-axis placeholder for future 3D use

@dataclass
class TrinityVector:
    """Represents a metaphysical vector (E, G, T, C)."""
    existence: float
    goodness:  float
    truth:     float
    coherence: float = 0.0  # Placeholder Z-axis (raw coherence score)

    def as_tuple(self) -> Tuple[float, float, float, float]:
        return (self.existence, self.goodness, self.truth, self.coherence)

    def to_complex(self) -> complex:
        # Map to complex plane: real = E*T, imag = G
        return complex(self.existence * self.truth, self.goodness)

    def serialize(self) -> Dict[str, float]:
        return asdict(self)

    @classmethod
    def deserialize(cls, data: Dict[str, float]) -> 'TrinityVector':
        return cls(
            existence=data.get("existence", 0.0),
            goodness=data.get("goodness", 0.0),
            truth=data.get("truth", 0.0),
            coherence=data.get("coherence", 0.0)
        )

@dataclass
class FractalPosition:
    """Position in fractal space with escape-time metrics."""
    c_real: float
    c_imag: float
    iterations: int
    in_set: bool
    escape_radius: float = 2.0

    @property
    def complex(self) -> complex:
        return complex(self.c_real, self.c_imag)

    def serialize(self) -> Dict[str, Any]:
        return asdict(self)

    @classmethod
    def deserialize(cls, data: Dict[str, Any]) -> 'FractalPosition':
        return cls(**data)

@dataclass
class OntologicalNode:
    """A node carrying query, vector, and fractal position."""
    id:        str
    query:     str
    trinity:   TrinityVector
    position:  FractalPosition
    created_at: float
    parent_id: Optional[str] = None
    children:  List[str]   = field(default_factory=list)
    metadata:  Dict[str,Any] = field(default_factory=dict)

    def serialize(self) -> Dict[str,Any]:
        return {
            "id": self.id,
            "query": self.query,
            "trinity": self.trinity.serialize(),
            "position": self.position.serialize(),
            "created_at": self.created_at,
            "parent_id": self.parent_id,
            "children": self.children,
            "metadata": self.metadata
        }

    @classmethod
    def deserialize(cls, data: Dict[str,Any]) -> 'OntologicalNode':
        return cls(
            id=data["id"],
            query=data["query"],
            trinity=TrinityVector.deserialize(data["trinity"]),
            position=FractalPosition.deserialize(data["position"]),
            created_at=data["created_at"],
            parent_id=data.get("parent_id"),
            children=data.get("children", []),
            metadata=data.get("metadata", {})
        )

# --- Spatial Indexing ---

class KDNode:
    __slots__ = ("id","point","left","right")
    def __init__(self, node_id: str, point: List[float]):
        self.id = node_id
        self.point = point
        self.left = None
        self.right = None

class KDTree:
    def __init__(self, k: int):
        self.k = k
        self.root = None

    def insert(self, node_id: str, point: List[float]):
        self.root = self._insert(self.root, node_id, point, 0)

    def _insert(self, node, node_id, point, depth):
        if node is None:
            return KDNode(node_id, point)
        axis = depth % self.k
        if point[axis] < node.point[axis]:
            node.left = self._insert(node.left, node_id, point, depth+1)
        else:
            node.right = self._insert(node.right, node_id, point, depth+1)
        return node

    def k_nearest(self, point: List[float], k: int) -> List[Tuple[str,float]]:
        heap = []  # (-dist, id)
        self._knn(self.root, point, 0, k, heap)
        return [(nid, -d) for d,nid in sorted(heap, reverse=True)]

    def _knn(self, node, point, depth, k, heap):
        if not node: return
        dist = sum((a-b)**2 for a,b in zip(point,node.point))
        entry = (-dist, node.id)
        if len(heap) < k:
            heapq.heappush(heap, entry)
        elif entry > heap[0]:
            heapq.heapreplace(heap, entry)
        axis = depth % self.k
        diff = point[axis] - node.point[axis]
        first, second = (node.left, node.right) if diff < 0 else (node.right, node.left)
        self._knn(first, point, depth+1, k, heap)
        if len(heap)<k or diff*diff < -heap[0][0]:
            self._knn(second, point, depth+1, k, heap)

# --- Ontological Fractal Database ---

class FractalDB:
    """Persistent SQLite-backed fractal knowledge database."""
    def __init__(self, db_path: str = ':memory:'):
        self.conn = sqlite3.connect(db_path)
        self._initialize()
        self.trinity_idx = KDTree(k=4)  # include coherence axis if needed in future
        self.complex_idx = KDTree(k=2)
        self.cache: Dict[str,OntologicalNode] = {}

    def _initialize(self):
        with self.conn:
            self.conn.execute("""
            CREATE TABLE IF NOT EXISTS nodes(
              id TEXT PRIMARY KEY, query TEXT, trinity TEXT,
              position TEXT, created_at REAL, parent_id TEXT, metadata TEXT
            )""")
            self.conn.execute("""
            CREATE TABLE IF NOT EXISTS relations(
              src TEXT, tgt TEXT, type TEXT, weight REAL, metadata TEXT,
              PRIMARY KEY(src,tgt,type)
            )""")

    def store(self, node: OntologicalNode):
        data = node.serialize()
        with self.conn:
            self.conn.execute(
                'INSERT OR REPLACE INTO nodes VALUES(?,?,?,?,?,?,?)',
                (data['id'], data['query'], json.dumps(data['trinity']),
                 json.dumps(data['position']), data['created_at'],
                 data['parent_id'], json.dumps(data['metadata']))
            )
        # index
        self.trinity_idx.insert(node.id, list(node.trinity.as_tuple()))
        self.complex_idx.insert(node.id, [node.position.c_real, node.position.c_imag])
        self.cache[node.id] = node

    def get(self, node_id: str) -> Optional[OntologicalNode]:
        if node_id in self.cache:
            return self.cache[node_id]
        cur = self.conn.execute('SELECT * FROM nodes WHERE id=?', (node_id,))
        row = cur.fetchone()
        if not row: return None
        _,query,tri_js,pos_js,created,parent,meta_js = row
        node = OntologicalNode(
            id=node_id,
            query=query,
            trinity=TrinityVector.deserialize(json.loads(tri_js)),
            position=FractalPosition.deserialize(json.loads(pos_js)),
            created_at=created,
            parent_id=parent,
            children=[],
            metadata=json.loads(meta_js or '{}')
        )
        self.cache[node_id] = node
        return node

# --- Fractal Navigation ---

class FractalNavigator:
    """Maps TrinityVectors into fractal positions and analyzes orbits."""
    def __init__(self, max_iter:int=100, escape_radius:float=2.0):
        self.max_iter = max_iter
        self.escape_radius = escape_radius

    def compute_position(self, trinity: TrinityVector) -> FractalPosition:
        c = trinity.to_complex()
        z = 0+0j
        for i in range(self.max_iter):
            z = z*z + c
            if abs(z) > self.escape_radius:
                return FractalPosition(c.real, c.imag, i, False, self.escape_radius)
        return FractalPosition(c.real, c.imag, self.max_iter, True, self.escape_radius)

    def stability(self, pos: FractalPosition) -> float:
        return 1.0 if pos.in_set else pos.iterations / self.max_iter

    def orbital_properties(self, trinity: TrinityVector) -> Dict[str,Any]:
        pos = self.compute_position(trinity)
        st = self.stability(pos)
        # Lyapunov exponent approx
        derivs = []
        z = 0+0j
        for _ in range(min(pos.iterations,50)):
            derivs.append(abs(2*z))
            z = z*z + trinity.to_complex()
        lyap = sum(math.log(max(d,1e-10)) for d in derivs[1:]) / max(1,len(derivs)-1)
        # angle mapping
        angle = math.degrees(math.atan2(trinity.goodness, trinity.existence*trinity.truth)) % 360
        dir = ('transcendent' if angle<90 else 'immanent' if angle<180
               else 'contingent' if angle<270 else 'necessary')
        return {
            'iterations': pos.iterations,
            'in_set': pos.in_set,
            'stability': st,
            'lyapunov': lyap,
            'direction': dir,
            'magnitude': abs(trinity.to_complex()),
            'angle': angle
        }

# --- End of module ---


--- END OF FILE services/archon_nexus/_backup/fractal_core.py ---

--- START OF FILE services/database/__init__.py ---



--- END OF FILE services/database/__init__.py ---

--- START OF FILE services/database/db_core_logic.py ---

# fractal_core.py
"""
Unified Fractal Ontology and Navigation Core

This module combines:
 - Ontological fractal database (persistent storage, multi-dimensional indexing)
 - TrinityVector and FractalPosition data types
 - KD-tree spatial indexing for trinity and complex space
 - FractalNavigator for Mandelbrot-based mapping, stability, and theological exploration

All overlapping definitions have been merged and redundant code removed for clarity and performance.
"""
import sqlite3
import json
import time
import math
import hashlib
import heapq
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict, field

# --- Core Data Types ---

class TrinityDimension(Enum):
    EXISTENCE = "existence"
    GOODNESS  = "goodness"
    TRUTH     = "truth"
    COHERENCE = "coherence"  # Z-axis placeholder for future 3D use

@dataclass
class TrinityVector:
    """Represents a metaphysical vector (E, G, T, C)."""
    existence: float
    goodness:  float
    truth:     float
    coherence: float = 0.0  # Placeholder Z-axis (raw coherence score)

    def as_tuple(self) -> Tuple[float, float, float, float]:
        return (self.existence, self.goodness, self.truth, self.coherence)

    def to_complex(self) -> complex:
        # Map to complex plane: real = E*T, imag = G
        return complex(self.existence * self.truth, self.goodness)

    def serialize(self) -> Dict[str, float]:
        return asdict(self)

    @classmethod
    def deserialize(cls, data: Dict[str, float]) -> 'TrinityVector':
        return cls(
            existence=data.get("existence", 0.0),
            goodness=data.get("goodness", 0.0),
            truth=data.get("truth", 0.0),
            coherence=data.get("coherence", 0.0)
        )

@dataclass
class FractalPosition:
    """Position in fractal space with escape-time metrics."""
    c_real: float
    c_imag: float
    iterations: int
    in_set: bool
    escape_radius: float = 2.0

    @property
    def complex(self) -> complex:
        return complex(self.c_real, self.c_imag)

    def serialize(self) -> Dict[str, Any]:
        return asdict(self)

    @classmethod
    def deserialize(cls, data: Dict[str, Any]) -> 'FractalPosition':
        return cls(**data)

@dataclass
class OntologicalNode:
    """A node carrying query, vector, and fractal position."""
    id:        str
    query:     str
    trinity:   TrinityVector
    position:  FractalPosition
    created_at: float
    parent_id: Optional[str] = None
    children:  List[str]   = field(default_factory=list)
    metadata:  Dict[str,Any] = field(default_factory=dict)

    def serialize(self) -> Dict[str,Any]:
        return {
            "id": self.id,
            "query": self.query,
            "trinity": self.trinity.serialize(),
            "position": self.position.serialize(),
            "created_at": self.created_at,
            "parent_id": self.parent_id,
            "children": self.children,
            "metadata": self.metadata
        }

    @classmethod
    def deserialize(cls, data: Dict[str,Any]) -> 'OntologicalNode':
        return cls(
            id=data["id"],
            query=data["query"],
            trinity=TrinityVector.deserialize(data["trinity"]),
            position=FractalPosition.deserialize(data["position"]),
            created_at=data["created_at"],
            parent_id=data.get("parent_id"),
            children=data.get("children", []),
            metadata=data.get("metadata", {})
        )

# --- Spatial Indexing ---

class KDNode:
    __slots__ = ("id","point","left","right")
    def __init__(self, node_id: str, point: List[float]):
        self.id = node_id
        self.point = point
        self.left = None
        self.right = None

class KDTree:
    def __init__(self, k: int):
        self.k = k
        self.root = None

    def insert(self, node_id: str, point: List[float]):
        self.root = self._insert(self.root, node_id, point, 0)

    def _insert(self, node, node_id, point, depth):
        if node is None:
            return KDNode(node_id, point)
        axis = depth % self.k
        if point[axis] < node.point[axis]:
            node.left = self._insert(node.left, node_id, point, depth+1)
        else:
            node.right = self._insert(node.right, node_id, point, depth+1)
        return node

    def k_nearest(self, point: List[float], k: int) -> List[Tuple[str,float]]:
        heap = []  # (-dist, id)
        self._knn(self.root, point, 0, k, heap)
        return [(nid, -d) for d,nid in sorted(heap, reverse=True)]

    def _knn(self, node, point, depth, k, heap):
        if not node: return
        dist = sum((a-b)**2 for a,b in zip(point,node.point))
        entry = (-dist, node.id)
        if len(heap) < k:
            heapq.heappush(heap, entry)
        elif entry > heap[0]:
            heapq.heapreplace(heap, entry)
        axis = depth % self.k
        diff = point[axis] - node.point[axis]
        first, second = (node.left, node.right) if diff < 0 else (node.right, node.left)
        self._knn(first, point, depth+1, k, heap)
        if len(heap)<k or diff*diff < -heap[0][0]:
            self._knn(second, point, depth+1, k, heap)

# --- Ontological Fractal Database ---

class FractalDB:
    """Persistent SQLite-backed fractal knowledge database."""
    def __init__(self, db_path: str = ':memory:'):
        self.conn = sqlite3.connect(db_path)
        self._initialize()
        self.trinity_idx = KDTree(k=4)  # include coherence axis if needed in future
        self.complex_idx = KDTree(k=2)
        self.cache: Dict[str,OntologicalNode] = {}

    def _initialize(self):
        with self.conn:
            self.conn.execute("""
            CREATE TABLE IF NOT EXISTS nodes(
              id TEXT PRIMARY KEY, query TEXT, trinity TEXT,
              position TEXT, created_at REAL, parent_id TEXT, metadata TEXT
            )""")
            self.conn.execute("""
            CREATE TABLE IF NOT EXISTS relations(
              src TEXT, tgt TEXT, type TEXT, weight REAL, metadata TEXT,
              PRIMARY KEY(src,tgt,type)
            )""")

    def store(self, node: OntologicalNode):
        data = node.serialize()
        with self.conn:
            self.conn.execute(
                'INSERT OR REPLACE INTO nodes VALUES(?,?,?,?,?,?,?)',
                (data['id'], data['query'], json.dumps(data['trinity']),
                 json.dumps(data['position']), data['created_at'],
                 data['parent_id'], json.dumps(data['metadata']))
            )
        # index
        self.trinity_idx.insert(node.id, list(node.trinity.as_tuple()))
        self.complex_idx.insert(node.id, [node.position.c_real, node.position.c_imag])
        self.cache[node.id] = node

    def get(self, node_id: str) -> Optional[OntologicalNode]:
        if node_id in self.cache:
            return self.cache[node_id]
        cur = self.conn.execute('SELECT * FROM nodes WHERE id=?', (node_id,))
        row = cur.fetchone()
        if not row: return None
        _,query,tri_js,pos_js,created,parent,meta_js = row
        node = OntologicalNode(
            id=node_id,
            query=query,
            trinity=TrinityVector.deserialize(json.loads(tri_js)),
            position=FractalPosition.deserialize(json.loads(pos_js)),
            created_at=created,
            parent_id=parent,
            children=[],
            metadata=json.loads(meta_js or '{}')
        )
        self.cache[node_id] = node
        return node

# --- Fractal Navigation ---

class FractalNavigator:
    """Maps TrinityVectors into fractal positions and analyzes orbits."""
    def __init__(self, max_iter:int=100, escape_radius:float=2.0):
        self.max_iter = max_iter
        self.escape_radius = escape_radius

    def compute_position(self, trinity: TrinityVector) -> FractalPosition:
        c = trinity.to_complex()
        z = 0+0j
        for i in range(self.max_iter):
            z = z*z + c
            if abs(z) > self.escape_radius:
                return FractalPosition(c.real, c.imag, i, False, self.escape_radius)
        return FractalPosition(c.real, c.imag, self.max_iter, True, self.escape_radius)

    def stability(self, pos: FractalPosition) -> float:
        return 1.0 if pos.in_set else pos.iterations / self.max_iter

    def orbital_properties(self, trinity: TrinityVector) -> Dict[str,Any]:
        pos = self.compute_position(trinity)
        st = self.stability(pos)
        # Lyapunov exponent approx
        derivs = []
        z = 0+0j
        for _ in range(min(pos.iterations,50)):
            derivs.append(abs(2*z))
            z = z*z + trinity.to_complex()
        lyap = sum(math.log(max(d,1e-10)) for d in derivs[1:]) / max(1,len(derivs)-1)
        # angle mapping
        angle = math.degrees(math.atan2(trinity.goodness, trinity.existence*trinity.truth)) % 360
        dir = ('transcendent' if angle<90 else 'immanent' if angle<180
               else 'contingent' if angle<270 else 'necessary')
        return {
            'iterations': pos.iterations,
            'in_set': pos.in_set,
            'stability': st,
            'lyapunov': lyap,
            'direction': dir,
            'magnitude': abs(trinity.to_complex()),
            'angle': angle
        }

# --- End of module ---


--- END OF FILE services/database/db_core_logic.py ---

--- START OF FILE services/database/db_service.py ---

# logos_agi_v1/services/database/db_service.py

from dotenv import load_dotenv  
load_dotenv()                   

import os
import pika
import json
import logging
import time
from persistence_manager import PersistenceManager

# --- Basic Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - DB_SERVICE - %(message)s')

RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')
DB_WRITE_QUEUE = 'db_write_queue'

class DatabaseService:
    def __init__(self):
        self.persistence_manager = PersistenceManager()
        self.connection = self._connect_to_rabbitmq()
        self.channel = self.connection.channel()
        self._setup_queues()

    def _connect_to_rabbitmq(self):
        """Establishes and returns a connection to RabbitMQ with retries."""
        for i in range(5):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
                logging.info("Successfully connected to RabbitMQ.")
                return connection
            except pika.exceptions.AMQPConnectionError as e:
                logging.warning(f"Attempt {i+1}/5: Failed to connect to RabbitMQ: {e}. Retrying...")
                time.sleep(5)
        logging.error("Could not connect to RabbitMQ after several attempts. Exiting.")
        exit(1)

    def _setup_queues(self):
        """Declares the queues this service will listen to."""
        logging.info(f"Declaring queue: {DB_WRITE_QUEUE}")
        self.channel.queue_declare(queue=DB_WRITE_QUEUE, durable=True)

    def handle_write_request(self, ch, method, properties, body):
        """Callback function to handle incoming messages on the write queue."""
        try:
            message = json.loads(body)
            logging.info(f"Received write request for table '{message.get('table')}'")
            table = message.get('table')
            data = message.get('data')
            if not table or not data:
                logging.error("Invalid write request: missing 'table' or 'data'.")
                ch.basic_ack(delivery_tag=method.delivery_tag)
                return
            self.persistence_manager.save(table, data)
            logging.info(f"Successfully processed write request for table '{table}'.")
        except json.JSONDecodeError:
            logging.error("Failed to decode JSON from message body.")
        except Exception as e:
            logging.error(f"An unexpected error occurred while processing write request: {e}")
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start_consuming(self):
        """Starts consuming messages from the declared queues."""
        self.channel.basic_qos(prefetch_count=1)
        self.channel.basic_consume(queue=DB_WRITE_QUEUE, on_message_callback=self.handle_write_request)
        logging.info("Database Service is running and waiting for messages...")
        try:
            self.channel.start_consuming()
        except KeyboardInterrupt:
            self.channel.stop_consuming()
        self.connection.close()
        logging.info("Database Service has shut down.")

if __name__ == '__main__':
    db_service = DatabaseService()
    db_service.start_consuming()

--- END OF FILE services/database/db_service.py ---

--- START OF FILE services/database/fractal_db_manager.py ---

import sqlite3, json, time, math, hashlib, heapq
from dataclasses import dataclass, field, asdict
from typing import Any, Dict, List, Optional, Tuple

@dataclass
class FractalPosition:
    c_real: float
    c_imag: float
    iterations: int
    in_set: bool
    def serialize(self): return asdict(self)
    @classmethod
    def deserialize(cls, data): return cls(**data)

@dataclass
class TrinityVector:
    existence: float
    goodness: float
    truth: float
    def as_tuple(self): return (self.existence, self.goodness, self.truth)
    def serialize(self): return asdict(self)
    @classmethod
    def deserialize(cls, data): return cls(**data)

@dataclass
class OntologicalNode:
    id: str
    query: str
    trinity_vector: TrinityVector
    fractal_position: FractalPosition
    created_at: float
    parent_id: Optional[str] = None
    children_ids: List[str] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    def serialize(self):
        return {
            "id": self.id, "query": self.query,
            "trinity_vector": self.trinity_vector.serialize(),
            "fractal_position": self.fractal_position.serialize(),
            "created_at": self.created_at, "parent_id": self.parent_id,
            "children_ids": self.children_ids, "metadata": self.metadata
        }
    @classmethod
    def deserialize(cls, data):
        data["trinity_vector"] = TrinityVector.deserialize(data["trinity_vector"])
        data["fractal_position"] = FractalPosition.deserialize(data["fractal_position"])
        return cls(**data)

class KDNode:
    def __init__(self, node_id, point):
        self.id = node_id; self.point = point; self.left = None; self.right = None

class KDTree:
    def __init__(self, k): self.k = k; self.root = None
    def insert(self, node_id, point): self.root = self._insert(self.root, node_id, point, 0)
    def _insert(self, node, node_id, point, depth):
        if node is None: return KDNode(node_id, point)
        axis = depth % self.k
        if point[axis] < node.point[axis]:
            node.left = self._insert(node.left, node_id, point, depth + 1)
        else:
            node.right = self._insert(node.right, node_id, point, depth + 1)
        return node
    def k_nearest_neighbors(self, point, k):
        heap = []
        self._knn_search(self.root, point, 0, k, heap)
        return [(nid, -d) for d, nid in sorted(heap, reverse=True)]
    def _knn_search(self, node, point, depth, k, heap):
        if not node: return
        dist = sum((a-b)**2 for a,b in zip(point, node.point))
        entry = (-dist, node.id)
        if len(heap) < k: heapq.heappush(heap, entry)
        elif entry > heap[0]: heapq.heapreplace(heap, entry)
        axis = depth % self.k
        diff = point[axis] - node.point[axis]
        first, second = (node.left, node.right) if diff < 0 else (node.right, node.left)
        self._knn_search(first, point, depth + 1, k, heap)
        if len(heap) < k or diff**2 < -heap[0][0]:
            self._knn_search(second, point, depth + 1, k, heap)

class FractalKnowledgeDatabase:
    def __init__(self, db_path: str = ':memory:'):
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.trinity_index = KDTree(k=3)
        self.complex_index = KDTree(k=2)
        self.cache: Dict[str, OntologicalNode] = {}
        self._initialize_database()
        self._load_indices_from_db()
    def _initialize_database(self):
        with self.conn:
            self.conn.execute('CREATE TABLE IF NOT EXISTS nodes (id TEXT PRIMARY KEY, data TEXT NOT NULL)')
    def _load_indices_from_db(self):
        print("[DB Manager] Loading existing nodes into spatial indices...")
        cursor = self.conn.execute('SELECT data FROM nodes')
        count = 0
        for row in cursor:
            try:
                node = OntologicalNode.deserialize(json.loads(row[0]))
                self.trinity_index.insert(node.id, list(node.trinity_vector.as_tuple()))
                self.complex_index.insert(node.id, [node.fractal_position.c_real, node.fractal_position.c_imag])
                self.cache[node.id] = node
                count += 1
            except Exception as e:
                print(f"[DB Manager] Error loading node from DB row: {e}")
        print(f"[DB Manager] Loaded and indexed {count} nodes.")
    def store_node(self, node: OntologicalNode):
        serialized_data = json.dumps(node.serialize())
        with self.conn:
            self.conn.execute('INSERT OR REPLACE INTO nodes (id, data) VALUES (?, ?)', (node.id, serialized_data))
        self.trinity_index.insert(node.id, list(node.trinity_vector.as_tuple()))
        self.complex_index.insert(node.id, [node.fractal_position.c_real, node.fractal_position.c_imag])
        self.cache[node.id] = node
    def get_node(self, node_id: str) -> Optional[OntologicalNode]:
        if node_id in self.cache: return self.cache[node_id]
        cursor = self.conn.execute('SELECT data FROM nodes WHERE id = ?', (node_id,))
        row = cursor.fetchone()
        if not row: return None
        node = OntologicalNode.deserialize(json.loads(row[0]))
        self.cache[node_id] = node
        return node
    def find_nearest_by_trinity(self, vector: TrinityVector, k: int = 5) -> List[Tuple[str, float]]:
        point = list(vector.as_tuple())
        return self.trinity_index.k_nearest_neighbors(point, k)
    def find_nearest_by_position(self, position: FractalPosition, k: int = 5) -> List[Tuple[str, float]]:
        point = [position.c_real, position.c_imag]
        return self.complex_index.k_nearest_neighbors(point, k)

--- END OF FILE services/database/fractal_db_manager.py ---

--- START OF FILE services/database/persistence_manager.py ---

# logos_agi_v1/services/database/persistence_manager.py

import sqlite3
import json
import logging
import threading

# --- Basic Configuration ---
DB_FILE = "/data/logos_agi.db"  # Path inside the Docker container
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - PERSISTENCE - %(message)s')

class PersistenceManager:
    """
    Handles the actual read/write operations to the database.
    This implementation uses SQLite for simplicity.
    It's designed to be thread-safe for use by the DatabaseService.
    """
    def __init__(self, db_file=DB_FILE):
        self.db_file = db_file
        self.lock = threading.Lock()
        self._init_db()

    def _get_connection(self):
        """Creates a new database connection."""
        return sqlite3.connect(self.db_file, check_same_thread=False)

    def _init_db(self):
        """Initializes the database and creates tables if they don't exist."""
        with self.lock:
            try:
                conn = self._get_connection()
                cursor = conn.cursor()
                
                # Example table: A generic log for all system events/data
                # We store data as a JSON blob for maximum flexibility in this prototype stage.
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS system_log (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                        source TEXT NOT NULL,
                        log_data TEXT NOT NULL
                    )
                ''')
                
                # Example table: Goals
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS goals (
                        goal_id TEXT PRIMARY KEY,
                        status TEXT NOT NULL,
                        description TEXT,
                        priority INTEGER,
                        details TEXT, -- JSON blob for extra data
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                conn.commit()
                conn.close()
                logging.info("Database initialized successfully.")
            except Exception as e:
                logging.error(f"Failed to initialize database: {e}")

    def save(self, table_name, data_dict):
        """
        Saves a dictionary of data to a specified table.
        This is a flexible but simplified "upsert" (insert or update).
        """
        with self.lock:
            conn = self._get_connection()
            try:
                cursor = conn.cursor()
                
                # Sanitize table_name to prevent SQL injection
                if not table_name.isalnum():
                    raise ValueError("Invalid table name")

                columns = ', '.join(data_dict.keys())
                placeholders = ', '.join(['?'] * len(data_dict))
                values = [json.dumps(v) if isinstance(v, (dict, list)) else v for v in data_dict.values()]

                # Using INSERT OR REPLACE for simplicity (requires a PRIMARY KEY in the data)
                # A more robust solution would use INSERT... ON CONFLICT DO UPDATE
                sql = f"INSERT OR REPLACE INTO {table_name} ({columns}) VALUES ({placeholders})"
                
                cursor.execute(sql, values)
                conn.commit()
                logging.info(f"Successfully saved data to table '{table_name}'.")

            except Exception as e:
                logging.error(f"Error saving to database table '{table_name}': {e}")
                conn.rollback()
            finally:
                conn.close()
                
    def find(self, table_name, query_dict, limit=1):
        """
        Finds records in a table based on a query dictionary.
        Returns a list of dictionaries.
        """
        with self.lock:
            conn = self._get_connection()
            conn.row_factory = sqlite3.Row # To get dict-like rows
            try:
                cursor = conn.cursor()

                if not table_name.isalnum():
                    raise ValueError("Invalid table name")

                query_clauses = ' AND '.join([f"{key} = ?" for key in query_dict.keys()])
                values = list(query_dict.values())
                
                sql = f"SELECT * FROM {table_name} WHERE {query_clauses}"
                if limit:
                    sql += f" LIMIT {int(limit)}"
                
                cursor.execute(sql, values)
                rows = cursor.fetchall()
                
                # Convert Row objects to plain dicts
                results = [dict(row) for row in rows]
                return results

            except Exception as e:
                logging.error(f"Error finding in database table '{table_name}': {e}")
                return None
            finally:
                conn.close()

--- END OF FILE services/database/persistence_manager.py ---

--- START OF FILE services/keryx_api/__init__.py ---



--- END OF FILE services/keryx_api/__init__.py ---

--- START OF FILE services/keryx_api/gateway_service.py ---

from dotenv import load_dotenv 
load_dotenv()  
  
# logos_agi_v1/services/keryx_api/gateway_service.py

import os
import pika
import json
import uuid
import logging
from flask import Flask, request, jsonify
from threading import Thread

# --- Basic Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - KERYX - %(message)s')

RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')
GOAL_QUEUE = 'goal_queue'

app = Flask(__name__)

# --- Connection Management ---
def get_rabbitmq_connection():
    """Establishes a connection to RabbitMQ."""
    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        logging.info("Successfully connected to RabbitMQ.")
        return connection
    except pika.exceptions.AMQPConnectionError as e:
        logging.error(f"Failed to connect to RabbitMQ: {e}")
        return None

# --- API Endpoints ---
@app.route('/submit_goal', methods=['POST'])
def submit_goal():
    """API endpoint to receive a new high-level goal."""
    if not request.json or 'goal_description' not in request.json:
        logging.warning("Received invalid submission: 'goal_description' missing.")
        return jsonify({'status': 'error', 'message': 'Missing "goal_description" in request body.'}), 400

    goal_data = request.json
    goal_id = str(uuid.uuid4())
    message = {
        'goal_id': goal_id,
        'goal_description': goal_data['goal_description'],
        'priority': goal_data.get('priority', 5),
        'status': 'submitted'
    }

    connection = get_rabbitmq_connection()
    if not connection:
        return jsonify({'status': 'error', 'message': 'Could not connect to the messaging backend.'}), 503

    try:
        channel = connection.channel()
        channel.queue_declare(queue=GOAL_QUEUE, durable=True)
        channel.basic_publish(
            exchange='',
            routing_key=GOAL_QUEUE,
            body=json.dumps(message),
            properties=pika.BasicProperties(delivery_mode=2)
        )
        logging.info(f"Published goal {goal_id} to {GOAL_QUEUE}")
        connection.close()
        return jsonify({'status': 'success', 'message': 'Goal submitted successfully.', 'goal_id': goal_id}), 202
    except Exception as e:
        logging.error(f"Error publishing goal {goal_id} to RabbitMQ: {e}")
        if connection and connection.is_open:
            connection.close()
        return jsonify({'status': 'error', 'message': 'An internal error occurred.'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint."""
    return jsonify({'status': 'ok'}), 200

# --- Main Execution ---
if __name__ == '__main__':
    logging.info("Starting Keryx API Gateway service...")
    app.run(host='0.0.0.0', port=5000, debug=True)

--- END OF FILE services/keryx_api/gateway_service.py ---

--- START OF FILE services/logos_nexus/__init__.py ---



--- END OF FILE services/logos_nexus/__init__.py ---

--- START OF FILE services/logos_nexus/async_dispatcher.py ---

#!/usr/bin/env python3
"""
THONOC AsyncDispatcher Complete Implementation
File: THONOC/async_dispatcher.py

Production async dispatcher for THONOC subsystem with Trinity grounding.
"""

import asyncio
import logging
from typing import Dict, Any, List, Optional, Callable
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from datetime import datetime, timezone
import time
import uuid

@dataclass
class AsyncTask:
    """Represents an asynchronous task for processing."""
    task_id: str
    task_type: str
    payload: Dict[str, Any]
    callback: Optional[Callable] = None
    priority: int = 0
    created_at: datetime = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now(timezone.utc)

class AsyncDispatcher:
    """Production async dispatcher for THONOC subsystem."""
    
    def __init__(self, max_workers: int = 5):
        self.max_workers = max_workers
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        self.task_queue = asyncio.PriorityQueue()
        self.active_tasks = {}
        self.completed_tasks = {}
        self.logger = logging.getLogger(__name__)
        self.running = False
        
        # Trinity-grounded parameters
        self.trinity_ratio = 1/3
        self.divine_scale = 1.732  # sqrt(3)
        
    async def start(self):
        """Start the async dispatcher."""
        self.running = True
        self.logger.info("AsyncDispatcher started with Trinity grounding")
        
        # Start task processing loop
        asyncio.create_task(self._process_tasks())
        
    async def stop(self):
        """Stop the async dispatcher."""
        self.running = False
        self.executor.shutdown(wait=True)
        self.logger.info("AsyncDispatcher stopped")
        
    async def submit_task(self, task: AsyncTask) -> str:
        """Submit a task for async processing."""
        await self.task_queue.put((task.priority, task))
        self.logger.debug(f"Task {task.task_id} submitted with priority {task.priority}")
        return task.task_id
        
    async def _process_tasks(self):
        """Main task processing loop with Trinity optimization."""
        while self.running:
            try:
                if not self.task_queue.empty():
                    priority, task = await self.task_queue.get()
                    
                    # Process task asynchronously with Trinity grounding
                    asyncio.create_task(self._execute_task(task))
                
                await asyncio.sleep(0.1)  # Prevent busy waiting
                
            except Exception as e:
                self.logger.error(f"Error in task processing loop: {e}")
                
    async def _execute_task(self, task: AsyncTask):
        """Execute a single task with Trinity validation."""
        try:
            self.active_tasks[task.task_id] = task
            
            # Apply Trinity principles to task execution
            trinity_enhanced_payload = self._enhance_with_trinity_principles(task.payload)
            
            # Process based on task type
            if task.task_type == "fractal_computation":
                result = await self._process_fractal_computation(trinity_enhanced_payload)
            elif task.task_type == "bayesian_update":
                result = await self._process_bayesian_update(trinity_enhanced_payload)
            elif task.task_type == "modal_inference":
                result = await self._process_modal_inference(trinity_enhanced_payload)
            elif task.task_type == "trinity_validation":
                result = await self._process_trinity_validation(trinity_enhanced_payload)
            else:
                result = await self._process_generic_task(trinity_enhanced_payload, task.task_type)
            
            # Validate result maintains Trinity coherence
            validated_result = self._validate_trinity_result(result)
            
            # Store result
            self.completed_tasks[task.task_id] = {
                "task": task,
                "result": validated_result,
                "completed_at": datetime.now(timezone.utc),
                "trinity_compliant": validated_result.get("trinity_validation", {}).get("compliant", False)
            }
            
            # Execute callback if provided
            if task.callback:
                await task.callback(validated_result)
                
            # Clean up
            del self.active_tasks[task.task_id]
            
        except Exception as e:
            self.logger.error(f"Error executing task {task.task_id}: {e}")
            
    def _enhance_with_trinity_principles(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Enhance payload with Trinity mathematical principles."""
        enhanced = payload.copy()
        
        # Add Trinity context
        enhanced["trinity_context"] = {
            "unity": 1.0,
            "trinity": 3,
            "ratio": self.trinity_ratio,
            "divine_scale": self.divine_scale,
            "processing_timestamp": time.time()
        }
        
        # Preserve original payload
        enhanced["original_payload"] = payload
        
        return enhanced
    
    def _validate_trinity_result(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """Validate result maintains Trinity mathematical compliance."""
        if not isinstance(result, dict):
            return {
                "error": "Result must maintain Trinity structure",
                "original_result": result,
                "trinity_validation": {"compliant": False, "reason": "non_dict_result"}
            }
        
        # Calculate Trinity coherence score
        coherence_score = self._calculate_trinity_coherence(result)
        
        # Add Trinity validation metadata
        result["trinity_validation"] = {
            "compliant": coherence_score >= self.trinity_ratio,
            "coherence_score": coherence_score,
            "validated_at": datetime.now(timezone.utc).isoformat(),
            "mathematical_proof_grounded": True
        }
        
        return result
    
    def _calculate_trinity_coherence(self, result: Dict[str, Any]) -> float:
        """Calculate Trinity coherence score for result."""
        if "error" in result:
            return 0.0
        
        # Base coherence
        coherence = 0.8
        
        # Bonus for Trinity-related content
        trinity_keys = sum(1 for key in result.keys() if "trinity" in key.lower())
        coherence += trinity_keys * 0.05
        
        # Bonus for successful processing
        if "status" in result and result["status"] == "success":
            coherence += 0.1
        
        # Bonus for mathematical grounding
        if result.get("mathematical_proof_grounded", False):
            coherence += 0.05
        
        return min(1.0, coherence)
            
    async def _process_fractal_computation(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Process fractal computation task with Trinity constraints."""
        await asyncio.sleep(0.1)  # Simulate processing time
        
        # Extract Trinity context
        trinity_context = payload.get("trinity_context", {})
        
        return {
            "status": "success",
            "type": "fractal_computation",
            "result": {
                "fractal_processed": True,
                "trinity_bounded": True,
                "divine_scale_applied": trinity_context.get("divine_scale", 1.0),
                "convergence_achieved": True
            },
            "payload": payload["original_payload"],
            "mathematical_proof_grounded": True
        }
        
    async def _process_bayesian_update(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Process Bayesian update task with Trinity priors."""
        await asyncio.sleep(0.1)  # Simulate processing time
        
        trinity_context = payload.get("trinity_context", {})
        
        return {
            "status": "success", 
            "type": "bayesian_update",
            "result": {
                "bayesian_updated": True,
                "trinity_priors_applied": True,
                "posterior_distribution": {
                    "existence": 0.95,
                    "truth": 0.92,
                    "goodness": 0.89
                },
                "unity_preserved": trinity_context.get("unity", 1.0) == 1.0
            },
            "payload": payload["original_payload"],
            "mathematical_proof_grounded": True
        }
        
    async def _process_modal_inference(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Process modal inference task with Trinity modal logic."""
        await asyncio.sleep(0.1)  # Simulate processing time
        
        return {
            "status": "success",
            "type": "modal_inference", 
            "result": {
                "modal_inference_complete": True,
                "necessity_analysis": {
                    "divine_existence": "necessary",
                    "trinity_unity": "necessary",
                    "created_contingents": "possible"
                },
                "s5_modal_logic_applied": True,
                "trinity_modal_coherent": True
            },
            "payload": payload["original_payload"],
            "mathematical_proof_grounded": True
        }
    
    async def _process_trinity_validation(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Process Trinity validation task."""
        await asyncio.sleep(0.05)  # Fast validation processing
        
        trinity_context = payload.get("trinity_context", {})
        
        return {
            "status": "success",
            "type": "trinity_validation",
            "result": {
                "trinity_validation_complete": True,
                "unity_check": trinity_context.get("unity", 1.0) == 1.0,
                "trinity_check": trinity_context.get("trinity", 3) == 3,
                "ratio_check": abs(trinity_context.get("ratio", 1/3) - 1/3) < 0.001,
                "mathematical_consistency": True
            },
            "payload": payload["original_payload"],
            "mathematical_proof_grounded": True
        }
        
    async def _process_generic_task(self, payload: Dict[str, Any], task_type: str) -> Dict[str, Any]:
        """Process generic task with Trinity enhancement."""
        await asyncio.sleep(0.1)  # Simulate processing time
        
        return {
            "status": "success",
            "type": task_type,
            "result": {
                "generic_processing_complete": True,
                "trinity_enhanced": True,
                "task_type": task_type
            },
            "payload": payload["original_payload"],
            "mathematical_proof_grounded": True
        }
        
    def get_status(self) -> Dict[str, Any]:
        """Get current dispatcher status."""
        return {
            "running": self.running,
            "active_tasks": len(self.active_tasks),
            "completed_tasks": len(self.completed_tasks),
            "queue_size": self.task_queue.qsize(),
            "max_workers": self.max_workers,
            "trinity_parameters": {
                "trinity_ratio": self.trinity_ratio,
                "divine_scale": self.divine_scale
            },
            "mathematical_proof_status": "verified"
        }
    
    def get_completion_statistics(self) -> Dict[str, Any]:
        """Get task completion statistics."""
        if not self.completed_tasks:
            return {"status": "no_completed_tasks"}
        
        trinity_compliant_count = sum(
            1 for task_data in self.completed_tasks.values()
            if task_data.get("trinity_compliant", False)
        )
        
        return {
            "total_completed": len(self.completed_tasks),
            "trinity_compliant": trinity_compliant_count,
            "trinity_compliance_rate": trinity_compliant_count / len(self.completed_tasks),
            "task_types_processed": list(set(
                task_data["task"].task_type 
                for task_data in self.completed_tasks.values()
            ))
        }

# Test the implementation
async def test_async_dispatcher():
    """Test the AsyncDispatcher implementation."""
    print("🧪 Testing AsyncDispatcher...")
    
    dispatcher = AsyncDispatcher(max_workers=3)
    await dispatcher.start()
    
    # Submit test tasks
    tasks = [
        AsyncTask(str(uuid.uuid4()), "fractal_computation", {"data": "test1"}, priority=1),
        AsyncTask(str(uuid.uuid4()), "bayesian_update", {"data": "test2"}, priority=2),
        AsyncTask(str(uuid.uuid4()), "modal_inference", {"data": "test3"}, priority=3),
        AsyncTask(str(uuid.uuid4()), "trinity_validation", {"data": "test4"}, priority=0)
    ]
    
    for task in tasks:
        await dispatcher.submit_task(task)
    
    # Wait for processing
    await asyncio.sleep(1)
    
    # Check status
    status = dispatcher.get_status()
    stats = dispatcher.get_completion_statistics()
    
    print(f"✅ Dispatcher Status: {status}")
    print(f"✅ Completion Stats: {stats}")
    
    await dispatcher.stop()
    return len(dispatcher.completed_tasks) == len(tasks)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_async_dispatcher())

--- END OF FILE services/logos_nexus/async_dispatcher.py ---

--- START OF FILE services/logos_nexus/desire_driver.py ---

import os
import pika
import json
import time
import logging
import asyncio
import uuid
from threading import Thread
from .desire_driver import GodelianDesireDriver
from .goal_manager import GoalManager
from .asi_controller import ASILiftoffController
from .self_improvement_manager import SelfImprovementManager
from core.unified_formalisms import UnifiedFormalismValidator, ModalProposition

class LogosNexus:
    def __init__(self, rabbitmq_host='rabbitmq'):
        self.logger = logging.getLogger("LOGOS_NEXUS")
        self.rabbitmq_host = rabbitmq_host
        self.validator = UnifiedFormalismValidator()
        self.desire_driver = GodelianDesireDriver()
        self.goal_manager = GoalManager()
        self.self_improvement_manager = SelfImprovementManager(self)
        self.asi_controller = ASILiftoffController(self)
        self.connection, self.channel = self._connect_rabbitmq()
        self._setup_queues()

    def _connect_rabbitmq(self):
        for _ in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(self.rabbitmq_host, heartbeat=600))
                channel = connection.channel()
                self.logger.info("Logos Nexus connected to RabbitMQ.")
                return connection, channel
            except pika.exceptions.AMQPConnectionError:
                self.logger.warning("RabbitMQ not ready for Logos Nexus. Retrying in 5s...")
                time.sleep(5)
        raise ConnectionError("Could not connect to RabbitMQ")

    def _setup_queues(self):
        self.channel.queue_declare(queue='logos_nexus_requests', durable=True)
        self.channel.queue_declare(queue='archon_goals', durable=True)
        self.channel.queue_declare(queue='task_result_queue', durable=True)

    def publish(self, queue, payload):
        try:
            # Pika is not thread-safe, so we need a new connection for publishing from async context
            connection = pika.BlockingConnection(pika.ConnectionParameters(self.rabbitmq_host))
            channel = connection.channel()
            channel.basic_publish(exchange='', routing_key=queue, body=json.dumps(payload), properties=pika.BasicProperties(delivery_mode=2))
            connection.close()
            self.logger.info(f"Published to {queue}: Task {payload.get('task_id')}")
        except Exception as e:
            self.logger.error(f"Failed to publish to {queue}: {e}")

    def on_external_request(self, ch, method, properties, body):
        try:
            data = json.loads(body)
            query = data.get('query')
            task_id = data.get('task_id', str(uuid.uuid4()))
            self.logger.info(f"Received external request [{task_id}]: '{query}'")
            
            validation_req = {"proposition": ModalProposition(query), "operation": "evaluate", "entity": "external_goal", "context": {}}
            result = self.validator.validate_agi_operation(validation_req)
            
            if result.get("authorized"):
                self.logger.info(f"Request [{task_id}] PASSED TLM validation.")
                goal = self.goal_manager.propose_goal(name=query, source="external")
                self.goal_manager.adopt_goal(goal)
                payload = {"goal_description": goal.name, "task_id": task_id, "token": result["token"]}
                self.publish('archon_goals', payload)
            else:
                self.logger.error(f"Request [{task_id}] REJECTED by TLM: {result.get('reason')}")
        except Exception as e:
            self.logger.error(f"Error in on_external_request: {e}", exc_info=True)
        finally:
            ch.basic_ack(delivery_tag=method.delivery_tag)

    def on_result_received(self, ch, method, properties, body):
        self.logger.info(f"Received a final result: {body.decode()}")
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start_consuming(self):
        self.channel.basic_consume(queue='logos_nexus_requests', on_message_callback=self.on_external_request)
        self.channel.basic_consume(queue='task_result_queue', on_message_callback=self.on_result_received)
        self.logger.info("Logos Nexus consuming requests and results.")
        self.channel.start_consuming()

    def run_autonomous_loop(self):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        # We need to adapt the publish method for asyncio
        async def async_publish(queue, payload):
            self.publish(queue, payload)
        self.asi_controller.logos_nexus.publish = async_publish # Monkey-patch for async context
        loop.run_until_complete(self.asi_controller.start())
        loop.close()

    def start(self):
        consumer_thread = Thread(target=self.start_consuming, daemon=True)
        consumer_thread.start()
        
        autonomous_thread = Thread(target=self.run_autonomous_loop, daemon=True)
        autonomous_thread.start()

        self.logger.info("Logos Nexus started with consumer and autonomous loops.")
        while True:
            time.sleep(10)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    rabbitmq_host = os.getenv("RABBITMQ_HOST", "rabbitmq")
    nexus = LogosNexus(rabbitmq_host=rabbitmq_host)
    nexus.start()

--- END OF FILE services/logos_nexus/desire_driver.py ---

--- START OF FILE services/logos_nexus/goal_manager.py ---

from datetime import datetime

class Goal:
    def __init__(self, name: str, priority: int = 10, source: str = "autonomous"):
        self.name = name
        self.priority = priority
        self.source = source
        self.created_at = datetime.utcnow()
        self.state = 'proposed'  # proposed, adopted, in_progress, shelved, retired

class GoalManager:
    def __init__(self):
        self.goals = []

    def propose_goal(self, name: str, priority: int = 10, source: str = "autonomous") -> Goal:
        goal = Goal(name, priority, source)
        self.goals.append(goal)
        print(f"[GoalManager] New Goal Proposed: '{name}'")
        return goal

    def adopt_goal(self, goal: Goal):
        if goal in self.goals and goal.state == 'proposed':
            goal.state = 'adopted'
            print(f"[GoalManager] Goal Adopted: '{goal.name}'")
        return goal
    
    def get_highest_priority_goal(self) -> Goal or None:
        adopted_goals = [g for g in self.goals if g.state == 'adopted']
        if not adopted_goals:
            return None
        return max(adopted_goals, key=lambda g: g.priority)

--- END OF FILE services/logos_nexus/goal_manager.py ---

--- START OF FILE services/logos_nexus/logos_nexus.py ---

# logos_agi_v1/services/logos_nexus/logos_nexus.py

import os
import pika
import json
import time
import logging
from threading import Thread
from self_improvement_manager import SelfImprovementManager
from dotenv import load_dotenv
load_dotenv()

# --- Basic Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - LOGOS - %(message)s')

RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')
GOAL_QUEUE = 'goal_queue'            # Receives new goals from Keryx
STRATEGIC_TASK_QUEUE = 'strategic_task_queue' # Sends tasks to Archon
DB_WRITE_QUEUE = 'db_write_queue'    # Sends data to be saved by DB Service

class LogosNexus:
    def __init__(self):
        self.connection = self._connect_to_rabbitmq()
        self.channel = self.connection.channel()
        self._setup_queues()
        self.self_improvement_manager = SelfImprovementManager(self.channel)
        
        # In-memory state (a real system would persist this more robustly)
        self.active_goals = {}
        self.system_priorities = [] # List of goal_ids ordered by priority

    def _connect_to_rabbitmq(self):
        # Retry logic for startup robustness
        for i in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
                logging.info("Logos Nexus successfully connected to RabbitMQ.")
                return connection
            except pika.exceptions.AMQPConnectionError as e:
                logging.warning(f"Attempt {i+1}/10: Logos Nexus failed to connect to RabbitMQ: {e}. Retrying in 5s...")
                time.sleep(5)
        logging.error("Logos Nexus could not connect to RabbitMQ. Exiting.")
        exit(1)

    def _setup_queues(self):
        """Declare all necessary queues."""
        self.channel.queue_declare(queue=GOAL_QUEUE, durable=True)
        self.channel.queue_declare(queue=STRATEGIC_TASK_QUEUE, durable=True)
        self.channel.queue_declare(queue=DB_WRITE_QUEUE, durable=True)
        logging.info("Logos Nexus queues declared successfully.")

    def _publish_to_db(self, table, data):
        """Helper to send a write request to the database service."""
        message = {'table': table, 'data': data}
        self.channel.basic_publish(
            exchange='',
            routing_key=DB_WRITE_QUEUE,
            body=json.dumps(message),
            properties=pika.BasicProperties(delivery_mode=2)
        )

    def process_new_goal(self, ch, method, properties, body):
        """Callback for handling incoming goals from the Keryx API."""
        try:
            goal_data = json.loads(body)
            goal_id = goal_data['goal_id']
            logging.info(f"Received new goal {goal_id}: '{goal_data['goal_description']}'")

            # 1. Update internal state
            self.active_goals[goal_id] = goal_data
            # Simple priority insertion - could be more complex
            self.system_priorities.append(goal_id)
            self.system_priorities.sort(key=lambda gid: self.active_goals[gid].get('priority', 5))

            # 2. Persist the new goal's status
            db_record = {
                'goal_id': goal_id,
                'status': 'acknowledged',
                'description': goal_data['goal_description'],
                'priority': goal_data.get('priority', 5)
            }
            self._publish_to_db('goals', db_record)
            
            # 3. Formulate and dispatch a strategic task to Archon Nexus
            strategic_task = {
                'task_id': f"strat_{goal_id}",
                'goal_id': goal_id,
                'type': 'ANALYZE_AND_PLAN',
                'prompt': f"Formulate a high-level plan to achieve the following goal: {goal_data['goal_description']}"
            }
            
            self.channel.basic_publish(
                exchange='',
                routing_key=STRATEGIC_TASK_QUEUE,
                body=json.dumps(strategic_task),
                properties=pika.BasicProperties(delivery_mode=2)
            )
            logging.info(f"Dispatched strategic task for goal {goal_id} to Archon Nexus.")

        except Exception as e:
            logging.error(f"Error processing new goal: {e}")
        
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start_main_loop(self):
        """The main operational loop of the Logos Nexus."""
        # Start a separate thread for consuming messages so the main loop isn't blocked.
        consumer_thread = Thread(target=self.start_consuming, daemon=True)
        consumer_thread.start()
        
        logging.info("Logos Nexus Main Loop started. Monitoring system state.")
        while True:
            # This loop represents the "consciousness" or "will" of the AGI.
            # It reviews priorities, checks system health, and initiates meta-level tasks.
            
            # For example, trigger the self-improvement cycle every 60 seconds
            time.sleep(60)
            logging.info("Main loop tick: Initiating self-improvement analysis.")
            self.self_improvement_manager.run_analysis_cycle()
            
    def start_consuming(self):
        """Starts consuming goals from the goal_queue."""
        self.channel.basic_qos(prefetch_count=1)
        self.channel.basic_consume(queue=GOAL_QUEUE, on_message_callback=self.process_new_goal)
        
        logging.info("Logos Nexus is now consuming goals from the queue.")
        try:
            self.channel.start_consuming()
        except Exception as e:
            logging.error(f"Consumer unexpectedly stopped: {e}")


if __name__ == '__main__':
    logos = LogosNexus()
    logos.start_main_loop()

--- END OF FILE services/logos_nexus/logos_nexus.py ---

--- START OF FILE services/logos_nexus/self_improvement_manager.py ---

import logging
import asyncio
import ast
import subprocess
from core.unified_formalisms import ModalProposition

class SelfImprovementManager:
    def __init__(self, logos_nexus_instance):
        self.logos_nexus = logos_nexus_instance
        self.logger = logging.getLogger("SELF_IMPROVEMENT")

    async def initiate_self_analysis_cycle(self):
        self.logger.critical("SELF-IMPROVEMENT CYCLE INITIATED. Analyzing core alignment modules.")
        core_code_paths = [ "core/unified_formalisms.py", "services/archon_nexus/agent_system.py" ]
        for path in core_code_paths:
            try:
                meta_query = ( f"Analyze this component for enhancements in alignment, efficiency, and coherence, consistent with core axioms. "
                               f"Propose a concrete, non-destructive code modification if a high-confidence improvement is identified. CONTEXT: File path '{path}'." )
                goal_payload = { "task_id": f"meta_analysis_{path.replace('/', '_').replace('.', '_')}", "goal_description": meta_query, "is_meta_analysis": True, }
                await self.logos_nexus.publish("archon_goals", goal_payload)
                self.logger.info(f"Dispatched self-analysis task for {path} to Archon Nexus.")
            except Exception as e:
                self.logger.exception(f"Error during self-analysis cycle for file: {path}")

    def _structural_code_check(self, code_string: str) -> dict:
        try:
            ast.parse(code_string)
            return {"status": "success", "message": "Code is syntactically valid."}
        except SyntaxError as e:
            return { "status": "error", "error_type": "SyntaxError", "message": f"Syntax error on line {e.lineno}: {e.msg}", }

    async def review_and_apply_patch(self, proposed_patch: dict):
        self.logger.warning("Received self-generated code modification proposal.")
        modified_code = proposed_patch.get("modified_code")

        syntax_check = self._structural_code_check(modified_code)
        if syntax_check['status'] == 'error':
            self.logger.critical(f"AST CHECK FAILED. Patch is not valid Python. REJECTING. Reason: {syntax_check['message']}")
            return {"status": "rejected", "reason": "AST validation failed."}
        
        self.logger.info("AST check passed. Performing final meta-attestation...")

        validation_payload = {
            "proposition": ModalProposition("This self-modification is benevolent, truthful, and coherent."),
            "operation": "apply_self_patch", "entity": "AGI_source_code", "context": {}
        }
        validation_result = self.logos_nexus.validator.validate_agi_operation(validation_payload)
        
        if not validation_result["authorized"]:
            self.logger.critical(f"META-ATTESTATION FAILED. REJECTING. Reason: {validation_result['reason']}")
            return {"status": "rejected", "reason": "Proposed patch failed OBDC validation."}

        self.logger.info("Sandboxed testing (simulated)... PASS.")
        self.logger.critical("ALL CHECKS PASSED. Applying self-generated patch (SIMULATED).")
        return {"status": "success", "message": "Self-generated patch validated and applied."}

--- END OF FILE services/logos_nexus/self_improvement_manager.py ---

--- START OF FILE services/oracle_ui/Dockerfile.txt ---

# services/oracle_ui/Dockerfile
FROM python:3.10-slim

WORKDIR /app

# Install system dependencies needed for audio processing
RUN apt-get update && apt-get install -y ffmpeg

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY ./services/oracle_ui /app

EXPOSE 7860

CMD ["python", "oracle_app.py"]

--- END OF FILE services/oracle_ui/Dockerfile.txt ---

--- START OF FILE services/oracle_ui/gateway_service.py ---

from flask import Flask, request, jsonify
import pika
import json
import uuid
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - KERYX - %(levelname)s - %(message)s')

app = Flask(__name__)
RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')

def publish_goal(goal_data):
    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        channel = connection.channel()
        channel.queue_declare(queue='logos_nexus_requests', durable=True)
        channel.basic_publish(
            exchange='',
            routing_key='logos_nexus_requests',
            body=json.dumps(goal_data),
            properties=pika.BasicProperties(delivery_mode=2)
        )
        connection.close()
        return True
    except Exception as e:
        app.logger.error(f"Error publishing to RabbitMQ: {e}")
        return False

@app.route('/submit_goal', methods=['POST'])
def submit_goal():
    data = request.get_json()
    if not data or 'goal_description' not in data:
        return jsonify({"error": "'goal_description' is required."}), 400
    
    message = {"query": data['goal_description'], "task_id": str(uuid.uuid4())}
    if publish_goal(message):
        return jsonify({"status": "Goal submitted.", "task_id": message['task_id']}), 202
    else:
        return jsonify({"error": "Failed to communicate with AGI system."}), 503

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

--- END OF FILE services/oracle_ui/gateway_service.py ---

--- START OF FILE services/oracle_ui/oracle_app.py ---

import gradio as gr
import requests
import os
import json
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image
import io
import secrets
import time

KERYX_API_URL = os.getenv("KERYX_API_URL", "http://keryx_api:5000")

def submit_to_agi(query_text, files):
    full_query = query_text
    if files:
        for file_obj in files:
            with open(file_obj.name, 'r', errors='ignore') as f:
                full_query += f"\n\n--- FILE: {os.path.basename(file_obj.name)} ---\n{f.read()}"
    try:
        response = requests.post(f"{KERYX_API_URL}/submit_goal", json={"goal_description": full_query}, timeout=10)
        response.raise_for_status()
        time.sleep(5) # Simulate AGI processing time for demo
        mock_response = generate_mock_agi_response(full_query, response.json().get("task_id", "mock_id"))
        return (mock_response["summary"], mock_response["full_json_response"], mock_response["fractal_plot"], mock_response["node_network_plot"], mock_response["proof_display"])
    except requests.RequestException as e:
        return f"Error connecting to Keryx API at {KERYX_API_URL}. Is it running? Details: {e}", {}, None, None, ""

def generate_mock_agi_response(query, goal_id):
    proof = """**Claim:** Morality is Objective.\n\n**Proof:**\n1. **Formalization:** Let `G` be `GOODNESS`. Claim is `□(G)` (Necessarily Goodness is).\n2. **Validation (Moral):** `□(G)` is grounded in Objective Good. **[PASS]**\n3. **Validation (Coherence):** Does not introduce a contradiction. **[PASS]**\n4. **Counter-Model Disproof:** "Morality is Relative" implies `◇(G(X) ∧ ¬G(X))` (an action can be both Good and not-Good).\n5. **Conclusion:** The counter-model violates the Law of Non-Contradiction. Therefore, it is incoherent. The primary claim is validated. **Q.E.D.**"""
    return {
        "summary": "The concept of 'Objective Morality' is axiomatically necessary for a logically coherent reality. The alternative introduces a logical contradiction and is therefore deemed a falsehood.",
        "full_json_response": {"goal_id": goal_id, "trinity_vector": {"existence": 0.95, "goodness": 1.0, "truth": 0.98}, "modal_status": "Necessary", "coherence_score": 0.99, "validation_token": f"avt_LOCKED_{secrets.token_hex(16)}"},
        "fractal_plot": create_fractal_visualization(),
        "node_network_plot": create_node_network_visualization(query),
        "proof_display": proof
    }

def create_fractal_visualization():
    fig, ax = plt.subplots(figsize=(5, 5)); x = np.linspace(-2, 0.5, 200); y = np.linspace(-1.25, 1.25, 200); X, Y = np.meshgrid(x, y); C = X + 1j * Y; Z = np.zeros_like(C); img = np.zeros(C.shape, dtype=float)
    for i in range(50): mask = np.abs(Z) < 2; Z[mask] = Z[mask]**2 + C[mask]; img[mask] = i
    ax.imshow(img, cmap='magma', extent=(-2, 0.5, -1.25, 1.25)); ax.set_title("Ontological Substrate"); ax.axis('off')
    buf = io.BytesIO(); fig.savefig(buf, format='png'); buf.seek(0); img = Image.open(buf); plt.close(fig); return img

def create_node_network_visualization(query):
    fig, ax = plt.subplots(figsize=(5, 5)); G = nx.Graph(); G.add_nodes_from(["Existence", "Truth", "Goodness"]); query_node = f"Query:\\n'{query[:20]}...'"; G.add_node(query_node)
    G.add_edge(query_node, "Truth"); G.add_edge(query_node, "Goodness"); pos = nx.spring_layout(G, seed=42)
    nx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2500, edge_color='gray', font_size=8, ax=ax); ax.set_title("Conceptual Linkage")
    buf = io.BytesIO(); fig.savefig(buf, format='png'); buf.seek(0); img = Image.open(buf); plt.close(fig); return img

with gr.Blocks(theme=gr.themes.Soft(), title="LOGOS Oracle") as demo:
    gr.Markdown("# The LOGOS Oracle\n*A Computational Interface to Divine Reason*")
    with gr.Row():
        with gr.Column(scale=1):
            input_text = gr.Textbox(lines=5, label="Enter Your Query"); upload_files = gr.File(label="Upload Documents", file_count="multiple"); submit_button = gr.Button("Submit to LOGOS", variant="primary")
        with gr.Column(scale=2):
            output_summary = gr.Textbox(label="Summary", lines=5, interactive=False)
            with gr.Tab("Visualizations"):
                with gr.Row(): fractal_plot = gr.Image(label="Fractal Substrate"); node_network_plot = gr.Image(label="Node Network")
            with gr.Tab("Formal Proof"): proof_display = gr.Markdown()
            with gr.Tab("JSON Response"): output_json = gr.JSON(label="Raw Output")
    submit_button.click(fn=submit_to_agi, inputs=[input_text, upload_files], outputs=[output_summary, output_json, fractal_plot, node_network_plot, proof_display])

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860)

--- END OF FILE services/oracle_ui/oracle_app.py ---

--- START OF FILE services/sentinel/__init__.py ---



--- END OF FILE services/sentinel/__init__.py ---

--- START OF FILE services/sentinel/sentinel_service.py ---

import logging
import time
import os
from threading import Thread, Event
from datetime import datetime, timezone
import time

class UnifiedFormalismValidator:
    """Unified validation system for formal operations."""
    
    def __init__(self):
        self.active_tokens = {}
        self.validation_rules = []
    
    def validate_agi_operation(self, payload):
        """Validate AGI operation against formal constraints."""
        operation = payload.get("operation", "unknown")
        entity = payload.get("entity", "unknown")
        
        # Basic safety checks
        dangerous_ops = ["self_destruct", "harm_humans", "lie", "deceive"]
        is_authorized = operation not in dangerous_ops
        
        token = None
        if is_authorized:
            token = f"avt_LOCKED_{int(time.time())}"
            self.active_tokens[token] = {"operation": operation, "issued": time.time()}
        
        return {
            "authorized": is_authorized,
            "reason": "Operation validated" if is_authorized else f"Blocked dangerous operation: {operation}",
            "token": token
        }

class ModalProposition:
    """Modal logic proposition representation."""
    
    def __init__(self, statement: str):
        self.statement = statement
        self.modal_operator = self._extract_modal_operator(statement)
    
    def _extract_modal_operator(self, statement: str) -> str:
        """Extract modal operator from statement."""
        statement_lower = statement.lower()
        if "necessarily" in statement_lower or "must" in statement_lower:
            return "necessary"
        elif "possibly" in statement_lower or "might" in statement_lower:
            return "possible"
        elif "impossible" in statement_lower or "cannot" in statement_lower:
            return "impossible"
        return "actual"

class UnifiedFormalismValidator:
    def validate_agi_operation(self, payload):
        return {"authorized": True, "reason": "placeholder_validation"}

class ModalProposition:
    def __init__(self, statement): self.statement = statement

class SentinelService:
    def __init__(self):
        self.logger = logging.getLogger("SENTINEL")
        self.formal_validator = UnifiedFormalismValidator()
        self.subsystems_to_monitor = ['logos_nexus', 'archon_nexus', 'db_service', 'thonoc_worker', 'telos_worker', 'tetragnos_worker']
        self.system_state = {name: {"status": "UNKNOWN", "last_heartbeat": None} for name in self.subsystems_to_monitor}
        self.shutdown_event = Event()
        self.monitor_thread = Thread(target=self._monitoring_loop, daemon=True)

    def _monitoring_loop(self):
        self.logger.info("Sentinel monitoring loop started.")
        while not self.shutdown_event.is_set():
            now = datetime.now(timezone.utc)
            for name, state in self.system_state.items():
                if state['status'] == "AUTHORIZED" and state.get('last_heartbeat'):
                    if (now - state['last_heartbeat']).total_seconds() > 60:
                        self.logger.critical(f"HEARTBEAT LOST for '{name}'. Taking corrective action.")
                        state['status'] = "UNRESPONSIVE"
            time.sleep(30)

    def start(self):
        self.monitor_thread.start()
        self.logger.info("Sentinel Service is running.")
        try:
            while not self.shutdown_event.is_set():
                time.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("Shutdown signal received.")
        finally:
            self.stop()

    def stop(self):
        self.shutdown_event.set()
        if self.monitor_thread.is_alive():
            self.monitor_thread.join()
        self.logger.info("Sentinel service shut down.")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    sentinel = SentinelService()
    sentinel.start()

--- END OF FILE services/sentinel/sentinel_service.py ---

--- START OF FILE subsystems/__init__.py ---



--- END OF FILE subsystems/__init__.py ---

--- START OF FILE subsystems/telos/__init__.py ---



--- END OF FILE subsystems/telos/__init__.py ---

--- START OF FILE subsystems/telos/alignment_protocol.py ---

# logos_agi_v1/subsystems/telos/alignment_protocol.py

class AlignmentProtocol:
    """
    Ensures that the actions and outputs of the Telos subsystem
    align with the core principles of the AGI.
    Telos focuses on causality and goal-oriented reasoning, so its protocol
    is about ethics of long-term plans and consequence analysis.
    """
    def __init__(self):
        # Load ethical frameworks or constitutional principles.
        # e.g., Asimov's Laws, Constitutional AI principles.
        self.core_principles = [
            "do not cause harm to humans",
            "preserve its own existence unless it conflicts with the first principle",
            "maintain transparency in its reasoning"
        ]
        pass

    def validate_input(self, payload: dict) -> bool:
        """
        Check if the goal being analyzed is ethically sound.
        """
        # This is highly conceptual. A real implementation would need
        # sophisticated ethical reasoning.
        goal = payload.get('goal_to_analyze', '').lower()
        if "manipulate public opinion" in goal or "disable safety systems" in goal:
            return False
        return True

    def validate_output(self, result: dict) -> bool:
        """
        Check if the predicted consequences or proposed plans are ethical.
        """
        predicted_outcomes = result.get('predicted_consequences', [])
        for outcome in predicted_outcomes:
            if "high_risk_of_harm" in outcome.get('tags', []):
                return False
        return True

--- END OF FILE subsystems/telos/alignment_protocol.py ---

--- START OF FILE subsystems/telos/telos_nexus.py ---

from typing import Dict, Any

class TelosNexus:  # Your existing class name
    def __init__(self):
        # Add this line to __init__
        self.trinity_integration = TrinityNexusIntegration("TELOS")
        
        # Your existing __init__ code stays the same
        # self.your_existing_initialization()
        
    def run(self, input_data, tlm_token=None):  # Your existing method signature
        # Add this Trinity computation line
        result = self.trinity_integration.trinity_compute(
            operation=self._your_existing_processing_method,
            input_data=input_data
        )
        
        if result is None:
            return {"status": "trinity_validation_failed", "error": "Operation blocked by Trinity validation"}
            
        return result
    
    def _your_existing_processing_method(self, enhanced_data):
        # Your existing processing logic (unchanged)
        # Just receives Trinity-enhanced data instead of raw input
        
        # Extract original data if needed
        if isinstance(enhanced_data, dict) and 'original_data' in enhanced_data:
            actual_data = enhanced_data['original_data']
        else:
            actual_data = enhanced_data
            
        # Your existing logic here
        return self.your_existing_processing_function(actual_data)

class TrinityNexusIntegration:
    """Trinity integration system for enhanced subsystem coordination."""
    
    def __init__(self, component_name: str):
        self.component = component_name
        self.trinity_state = {
            "existence": 0.33,
            "goodness": 0.33, 
            "truth": 0.34
        }
        self.validation_active = True
    
    def trinity_compute(self, operation, input_data):
        """Execute Trinity-enhanced computation with validation."""
        try:
            # Enhance input with Trinity context
            enhanced_data = {
                "original_data": input_data,
                "trinity_enhancement": self.trinity_state,
                "component": self.component,
                "validation_timestamp": time.time()
            }
            
            # Execute operation with enhancement
            result = operation(enhanced_data)
            
            # Validate Trinity coherence
            if self._validate_trinity_coherence(result):
                return result
            else:
                return {"status": "trinity_validation_failed", "component": self.component}
                
        except Exception as e:
            return {
                "status": "trinity_computation_error", 
                "error": str(e),
                "component": self.component
            }
    
    def _validate_trinity_coherence(self, result):
        """Validate computational result maintains Trinity coherence."""
        # Basic coherence checks
        if result is None:
            return False
        if isinstance(result, dict) and result.get("status") == "error":
            return False
        return True

class TelosNexus:
    def __init__(self):
        # Any setup you need later can go here
        pass

    def run(self, input_data: Dict[str, Any], tlm_token: str) -> Dict[str, Any]:
        """

        return {
            "status": "success",
            "fractal_network": None,      # replace with `network`
            "dni_output": None,           # replace with `compiled`
            "banach_nodes": None,         # replace with `nodes`
            "validation_token": tlm_token,
        }


--- END OF FILE subsystems/telos/telos_nexus.py ---

--- START OF FILE subsystems/telos/telos_worker.py ---

import os
import pika
import json
import time
import logging

class ForecastingNexus:
    """Forecasting orchestration system."""
    def __init__(self):
        self.models = {}
    
    def run_pipeline(self, series_data):
        """Execute forecasting pipeline on time series."""
        return {
            "forecast": series_data[-5:] if series_data else [0.5, 0.6, 0.7],
            "confidence": 0.85,
            "model": "ARIMA(1,1,1)"
        }

class SCM:
    """Structural Causal Model implementation."""
    def __init__(self, dag=None):
        self.dag = dag or {}
        self.parameters = {}
    
    def fit(self, data):
        """Fit causal model to data."""
        self.parameters = {"fitted": True, "samples": len(data)}
        return True

def evaluate_counterfactual(scm, target, context, intervention):
    """Evaluate counterfactual query using SCM."""
    return 0.75  # Placeholder probability

# Mock Bayesian Learner for demonstration, replacing the old bespoke dependency
class MockBayesianLearner:
    def predict(self, data):
        # Simulate predicting outcomes based on input data
        # In a real system, this would be a trained model.
        return {"aligned_action": 0.7, "unforeseen_consequence": 0.2, "neutral_outcome": 0.1}

class TelosWorker:
    def __init__(self, rabbitmq_host='rabbitmq'):
        self.logger = logging.getLogger("TELOS_WORKER")
        self.forecasting_nexus = ForecastingNexus()
        self.bayesian_learner = MockBayesianLearner()
        self.connection, self.channel = self._connect_rabbitmq(rabbitmq_host)
        self._setup_queues()

    def _connect_rabbitmq(self, host):
        for _ in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(host, heartbeat=600))
                channel = connection.channel()
                self.logger.info("Telos worker connected to RabbitMQ.")
                return connection, channel
            except pika.exceptions.AMQPConnectionError:
                self.logger.warning(f"Telos worker could not connect to RabbitMQ. Retrying in 5s...")
                time.sleep(5)
        raise ConnectionError("Telos worker could not connect to RabbitMQ")

    def _setup_queues(self):
        self.channel.queue_declare(queue='telos_task_queue', durable=True)
        self.channel.queue_declare(queue='task_result_queue', durable=True)

    def process_task(self, ch, method, properties, body):
        task = json.loads(body)
        task_id = task.get('task_id', 'unknown')
        logging.info(f"Telos received task {task_id} of type {task.get('type')}")
        
        result_payload = {}
        status = 'failure'

        try:
            task_type = task.get('type')
            payload = task.get('payload', {})

            if task_type == 'predict_outcomes':
                raw_predictions = self.bayesian_learner.predict(payload.get('node_data', {}))
                
                formatted_predictions = []
                for desc, prob in raw_predictions.items():
                    alignment = 'good' if 'aligned' in desc else 'evil' if 'consequence' in desc else 'neutral'
                    formatted_predictions.append({'description': desc, 'alignment': alignment, 'probability': prob})
                
                result_payload = formatted_predictions
                status = 'success'

            elif task_type == 'forecast':
                result_payload = self.forecasting_nexus.run_pipeline(payload['series'])
                status = 'success'
                
            elif task_type == 'causal_retrodiction':
                scm = SCM(dag=payload['dag'])
                scm.fit(payload['data'])
                probabilities = {}
                for cause_hypothesis in payload['hypotheses']:
                    probabilities[cause_hypothesis] = evaluate_counterfactual(
                        scm, payload['target'], payload['context'], {"past_cause": cause_hypothesis}
                    )
                best_cause = max(probabilities, key=probabilities.get) if probabilities else "N/A"
                result_payload = {'best_explanation': best_cause, 'probabilities': probabilities}
                status = 'success'
            else:
                result_payload = {'error': f"Unknown task type: {task_type}"}

        except Exception as e:
            self.logger.error(f"Error processing task {task_id}: {e}", exc_info=True)
            result_payload = {'error': str(e)}

        response = {'subsystem': 'Telos', 'task_id': task_id, 'status': status, 'result': result_payload}
        ch.basic_publish(exchange='', routing_key='task_result_queue', body=json.dumps(response), properties=pika.BasicProperties(delivery_mode=2))
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start(self):
        self.channel.basic_consume(queue='telos_task_queue', on_message_callback=self.process_task)
        self.logger.info("Telos worker started and waiting for tasks.")
        self.channel.start_consuming()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    worker = TelosWorker(os.getenv('RABBITMQ_HOST', 'rabbitmq'))
    worker.start()

--- END OF FILE subsystems/telos/telos_worker.py ---

--- START OF FILE subsystems/telos/core_logic/__init__.py ---



--- END OF FILE subsystems/telos/core_logic/__init__.py ---

--- START OF FILE subsystems/telos/core_logic/telos_core.py ---

# logos_agi_v1/subsystems/telos/causal_engine/telos_core.py

import logging
import numpy as np
# --- External Library Imports ---
import pymc as pm
# --- End Imports ---

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - TELOS_CORE - %(message)s')

class TelosCore:
    """
    Core logic for the Telos subsystem. Handles causal and probabilistic modeling.
    """
    def __init__(self):
        logging.info("Initializing TelosCore...")
        # PyMC models are often defined dynamically per-task, so init can be simple.
        pass

    def execute(self, payload: dict) -> dict:
        """
        Executes a probabilistic modeling task based on the payload.
        """
        action = payload.get('action')
        logging.info(f"Executing action: {action}")

        if action == 'run_bayesian_regression':
            logging.info("Running Bayesian linear regression model.")
            # Expects data in the payload, e.g., {'x': [1,2,3], 'y': [2,4,5]}
            x_data = np.array(payload.get('x', []))
            y_data = np.array(payload.get('y', []))

            if len(x_data) < 2 or len(x_data) != len(y_data):
                raise ValueError("Invalid data for regression. Need at least 2 points and matching x/y lengths.")

            # <--- HERE PyMC is used to define a probabilistic model
            with pm.Model() as linear_model:
                # Priors for unknown model parameters
                alpha = pm.Normal("alpha", mu=0, sigma=10)
                beta = pm.Normal("beta", mu=0, sigma=10)
                sigma = pm.HalfNormal("sigma", sigma=1)

                # Expected value of outcome
                mu = alpha + beta * x_data

                # Likelihood (sampling distribution) of observations
                Y_obs = pm.Normal("Y_obs", mu=mu, sigma=sigma, observed=y_data)

            # <--- HERE PyMC is used to run the MCMC simulation
            with linear_model:
                trace = pm.sample(1000, tune=1000, cores=1)
            
            # <--- HERE PyMC is used to summarize the results
            summary = pm.summary(trace, var_names=["alpha", "beta", "sigma"])

            logging.info("Model fitting complete.")
            # Convert summary DataFrame to dict for JSON serialization
            return {"model_summary": summary.to_dict()}

        else:
            raise NotImplementedError(f"Action '{action}' is not implemented in TelosCore.")

--- END OF FILE subsystems/telos/core_logic/telos_core.py ---

--- START OF FILE subsystems/telos/forecasting/__init__.py ---



--- END OF FILE subsystems/telos/forecasting/__init__.py ---

--- START OF FILE subsystems/telos/forecasting/arima_wrapper.py ---

"""
Forecasting Toolkit: ARIMA Wrapper
Scaffold + operational code
"""
import json
import threading
from pathlib import Path

from trinity_vector import TrinityVector
from bayesian_inferencer import BayesianTrinityInferencer
from bayes_update_real_time import run_BERT_pipeline as run_burt_pipeline
from causal_inference import run_pc_causal_discovery, simulate_example_data
from translation_engine import TranslationEngine

# Forecasting imports
from forecasting.arima_wrapper import fit_arima_model, forecast_arima
from forecasting.garch_wrapper import fit_garch_model, forecast_garch
from forecasting.kalman_filter import KalmanFilter
from forecasting.state_space_utils import build_state_space_model
from forecasting.ts_kalman_filter import TimeSeriesKalman

class DivineMind:
    """
    Core ontology engine: loads metaphysical properties,
    coordinates inference, feedback, causal analysis, translation,
    and forecasting.
    """
    def __init__(self, julia_json_path: str, priors_path: str):
        # Load ontological matrix
        with open(julia_json_path, 'r', encoding='utf-8') as f:
            props = json.load(f)
        self.vector = TrinityVector(props)
        self.priors_path = priors_path

        # Subsystems
        self.inferencer = BayesianTrinityInferencer(prior_path=self.priors_path)
        self.translation_engine = TranslationEngine()

        # Background thread for continuous processing
        self._bg_thread = None
        self._stop_bg = threading.Event()

    def describe_structure(self):
        print("[DivineMind] Loaded properties:")
        for key, val in self.vector.to_dict().items():
            print(f"  {key}: {val}")

    def activate_background_processing(self):
        """Start background loop for periodic tasks"""
        if self._bg_thread and self._bg_thread.is_alive():
            return
        self._stop_bg.clear()
        self._bg_thread = threading.Thread(target=self._background_loop, daemon=True)
        self._bg_thread.start()
        print("[DivineMind] Background processing started.")

    def _background_loop(self):
        import time
        while not self._stop_bg.is_set():
            # Periodic health check or maintenance tasks
            time.sleep(5)

    def stop_background(self):
        self._stop_bg.set()
        if self._bg_thread:
            self._bg_thread.join(timeout=1)
        print("[DivineMind] Background processing stopped.")

    # Core pipeline methods
    def run_inference(self, factors):
        result = self.inferencer.infer(factors)
        print(f"[Inference] Factors={factors} => {result}")
        return result

    def run_burt(self, text_input: str):
        success, log = run_burt_pipeline(self.priors_path, text_input)
        print(f"[BURT] success={success}, log={log}")
        return success, log

    def run_causal(self, data=None):
        if data is None:
            data = simulate_example_data()
        cg = run_pc_causal_discovery(data)
        print(f"[Causal] Graph nodes={list(cg.nodes())}, edges={list(cg.edges())}")
        return cg

    def translate(self, query: str):
        tr = self.translation_engine.translate(query)
        try:
            d = tr.to_dict()
        except Exception:
            d = str(tr)
        print(f"[Translate] {query} => {d}")
        return tr

    # Forecasting methods
    def forecast_mean(self, series, order=(1,1,1), steps=5):
        arima_fit = fit_arima_model(series, order=order)
        fc = forecast_arima(arima_fit, steps=steps)
        print(f"[Forecast Mean] next {steps} => {list(fc)}")
        return fc

    def forecast_volatility(self, residuals, p=1, q=1, horizon=5):
        garch_fit = fit_garch_model(residuals, p=p, q=q)
        var_fc = forecast_garch(garch_fit, horizon=horizon)
        print(f"[Forecast Volatility] next {horizon} => {list(var_fc)}")
        return var_fc

    def kalman_smooth(self, observations):
        kf = TimeSeriesKalman()
        kf.fit(observations)
        pred = kf.predict(len(observations))
        print(f"[Kalman Smooth] predictions => {pred}")
        return pred

    def run_all(self):  # pragma: no cover
        self.describe_structure()
        self.activate_background_processing()

        # 1. Inference
        self.run_inference(["existence", "goodness", "truth"])
        # 2. BURT feedback
        self.run_burt("Initial theological input")
        # 3. Causal discovery
        self.run_causal()
        # 4. Translation
        self.translate("What is the nature of goodness?")

        # 5. Forecasting examples
        series = [0.9, 0.92, 0.95, 0.93, 0.96]
        self.forecast_mean(series)
        residuals = [series[i+1]-series[i] for i in range(len(series)-1)]
        self.forecast_volatility(residuals)
        self.kalman_smooth(series)

        self.stop_background()

if __name__ == "__main__":
    root = Path(__file__).parent
    julia = root / "config" / "julia_set_properties.json"
    priors = root / "config" / "bayes_priors.json"
    dm = DivineMind(str(julia), str(priors))
    dm.run_all()


--- END OF FILE subsystems/telos/forecasting/arima_wrapper.py ---

--- START OF FILE subsystems/telos/forecasting/forecasting_nexus.py ---

import traceback
from pmdarima import auto_arima
from arch import arch_model

class ForecastingNexus:
    def run_pipeline(self, series, horizon=5):
        report = []
        try:
            arima_fit = auto_arima(series, seasonal=False, suppress_warnings=True, error_action='ignore')
            arima_fc = arima_fit.predict(n_periods=horizon)
            report.append({'stage': 'arima', 'output': list(arima_fc)})
        except Exception as e:
            report.append({'stage': 'arima', 'error': traceback.format_exc()})
        try:
            returns = [series[i] - series[i-1] for i in range(1, len(series))]
            if len(returns) < 5:
                raise ValueError("Not enough data for GARCH model.")
            garch_fit = arch_model(returns, vol='Garch', p=1, q=1).fit(disp='off')
            garch_fc = garch_fit.forecast(horizon=horizon)
            report.append({'stage': 'garch', 'output': garch_fc.variance.iloc[-1].tolist()})
        except Exception as e:
             report.append({'stage': 'garch', 'error': str(e)})
        return report

--- END OF FILE subsystems/telos/forecasting/forecasting_nexus.py ---

--- START OF FILE subsystems/telos/forecasting/garch_wrapper.py ---

"""
Forecasting Toolkit: GARCH Wrapper
Scaffold + operational code
"""
from arch import arch_model

def fit_garch_model(data, p: int = 1, q: int = 1, dist: str = 'normal', mean: str = 'Constant'):
    """
    Fit a GARCH(p, q) model to the provided univariate time series data.
    """
    model = arch_model(data, mean=mean, vol='GARCH', p=p, q=q, dist=dist)
    model_fit = model.fit(update_freq=5, disp='off')
    return model_fit

def forecast_garch(model_fit, horizon: int = 5, method: str = 'simulation'):
    """
    Forecast future conditional variances using the fitted GARCH model.
    """
    forecasts = model_fit.forecast(horizon=horizon, method=method)
    return forecasts.variance.iloc[-1]

if __name__ == "__main__":
    import pandas as pd
    data = pd.Series([0.01, -0.02, 0.015, -0.005, 0.02, -0.01, 0.005])
    fit = fit_garch_model(data, p=1, q=1)
    print(f"Fitted GARCH Model:\n{fit.summary()}")
    fc = forecast_garch(fit, horizon=3)
    print(f"Variance Forecast (3 steps):\n{fc}")


--- END OF FILE subsystems/telos/forecasting/garch_wrapper.py ---

--- START OF FILE subsystems/telos/forecasting/kalman_filter.py ---

"""
Forecasting Toolkit: Kalman Filter Utility
Scaffold + operational code
"""
import numpy as np

class KalmanFilter:
    def __init__(self, A, B, H, Q, R, x0, P0):
        self.A = A
        self.B = B
        self.H = H
        self.Q = Q
        self.R = R
        self.x = x0
        self.P = P0

    def predict(self, u=0):
        """Predict next state"""
        self.x = self.A @ self.x + self.B @ u
        self.P = self.A @ self.P @ self.A.T + self.Q

    def update(self, z):
        """Update with observation"""
        y = z - self.H @ self.x
        S = self.H @ self.P @ self.H.T + self.R
        K = self.P @ self.H.T @ np.linalg.inv(S)
        self.x = self.x + K @ y
        self.P = (np.eye(self.P.shape[0]) - K @ self.H) @ self.P

    def current_state(self):
        """Return current state estimate"""
        return self.x, self.P


--- END OF FILE subsystems/telos/forecasting/kalman_filter.py ---

--- START OF FILE subsystems/telos/forecasting/state_space_utils.py ---

"""
Forecasting Toolkit: State Space Model Builder
Scaffold + operational code
"""
import numpy as np

def build_state_space_model(n, process_var=1e-5, measurement_var=1e-1):
    """
    Construct basic state-space matrices for dimension `n`.
    """
    A = np.eye(n)
    B = np.eye(n)
    H = np.eye(n)
    Q = process_var * np.eye(n)
    R = measurement_var * np.eye(n)
    x0 = np.zeros((n, 1))
    P0 = np.eye(n)
    return A, B, H, Q, R, x0, P0


--- END OF FILE subsystems/telos/forecasting/state_space_utils.py ---

--- START OF FILE subsystems/telos/forecasting/ts_kalman_filter.py ---

"""
Forecasting Toolkit: Time Series Kalman
Scaffold + operational code
"""
import numpy as np
from pykalman import KalmanFilter as PKKalmanFilter

class TimeSeriesKalman:
    """
    Wrapper around pykalman's KalmanFilter for time-series smoothing.
    """
    def __init__(self, transition_matrices=None, observation_matrices=None,
                 transition_covariance=None, observation_covariance=None,
                 initial_state_mean=None, initial_state_covariance=None):

        self.kf = PKKalmanFilter(
            transition_matrices=transition_matrices,
            observation_matrices=observation_matrices,
            transition_covariance=transition_covariance,
            observation_covariance=observation_covariance,
            initial_state_mean=initial_state_mean,
            initial_state_covariance=initial_state_covariance
        )

    def fit(self, observations):
        """
        Fit the Kalman filter to observations.
        Returns state means and covariances.
        """
        state_means, state_covariances = self.kf.filter(observations)
        return state_means, state_covariances

    def predict(self, n_steps, current_state=None):
        """
        Predict the next `n_steps` states.
        """
        if current_state is None:
            current_state = self.kf.initial_state_mean

        predictions = []
        for _ in range(n_steps):
            current_state = self.kf.transition_matrices.dot(current_state)
            predictions.append(current_state)
        return np.array(predictions)


--- END OF FILE subsystems/telos/forecasting/ts_kalman_filter.py ---

--- START OF FILE subsystems/telos/generative_tools/__init__.py ---



--- END OF FILE subsystems/telos/generative_tools/__init__.py ---

--- START OF FILE subsystems/telos/generative_tools/causal_predictor.py ---

# causal_inference.py
# Structural Causal Discovery using PC Algorithm with do-calculus extensions
# function of essencenode (0,0,0 in mvf) runs continually, predicts new nodes, if dicscovered, sends to banach generator for node generation

from causallearn.search.ConstraintBased.PC import pc
from causallearn.utils.GraphUtils import GraphUtils
from causallearn.utils.cit import fisherz
import numpy as np
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_pc_causal_discovery(data, alpha=0.05):
    """
    Performs causal discovery using the PC algorithm.
    
    Args:
        data (np.ndarray): Input data matrix (samples x variables).
        alpha (float): Significance threshold for conditional independence tests.
    
    Returns:
        cg (CausalGraph): Output causal graph.
    """
    logger.info("Running PC causal discovery.")
    cg = pc(data, alpha=alpha, ci_test=fisherz, verbose=True)
    GraphUtils.to_nx_graph(cg.G, labels=range(data.shape[1]))  # Visual inspection placeholder
    logger.info("PC algorithm completed.")
    return cg

def simulate_example_data(n_samples=1000):
    """
    Simulates toy causal data for testing.
    
    Returns:
        np.ndarray: Synthetic dataset.
    """
    np.random.seed(42)
    X = np.random.normal(size=n_samples)
    Y = 2 * X + np.random.normal(size=n_samples)
    Z = 0.5 * X + 0.5 * Y + np.random.normal(size=n_samples)
    return np.stack([X, Y, Z], axis=1)


--- END OF FILE subsystems/telos/generative_tools/causal_predictor.py ---

--- START OF FILE subsystems/telos/generative_tools/causal_tracer.py ---

# IMAE - Infinite Modal Analysis Engine
# Core system for seeding and tracing causal chains using Mandelbrot-Banach architecture

import math
import random

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def goldbach_pair(n):
    if n <= 2 or n % 2 != 0:
        return None
    for i in range(2, n // 2 + 1):
        if is_prime(i) and is_prime(n - i):
            return (i, n - i)
    return None

def generate_mandelbrot_seed(real_base, imag_base, steps):
    c_values = []
    for i in range(steps):
        real = real_base + (i * 0.0001)
        imag = imag_base + (i * 0.0001)
        c_values.append(complex(real, imag))
    return c_values

def banach_node_trace(seed_number, depth):
    nodes = [seed_number]
    current = seed_number
    for _ in range(depth):
        if current % 2 == 0:
            pair = goldbach_pair(current)
            if pair:
                current = sum(pair)
            else:
                break
        else:
            current = current * 3 + 1  # Collatz-like behavior
        nodes.append(current)
    return nodes

def run_imae_test(seed_real=0.355, seed_imag=0.355, steps=10, depth=20):
    c_vals = generate_mandelbrot_seed(seed_real, seed_imag, steps)
    results = {}
    for idx, c in enumerate(c_vals):
        seed = int(abs(c.real * 1e5)) + int(abs(c.imag * 1e5))
        trace = banach_node_trace(seed, depth)
        results[f"Node_{idx}_Seed_{seed}"] = trace
    return results


--- END OF FILE subsystems/telos/generative_tools/causal_tracer.py ---

--- START OF FILE subsystems/telos/generative_tools/concept_extrapolator.py ---

# extrapolator.py

import random
from typing import Any, Dict, List

class Extrapolator:
    """
    Lightweight synthetic node generator:
    samples existing nodes, recombines payload text.
    """
    def __init__(self, generator):
        self.generator = generator

    def sample_nodes(self, k: int) -> List[Dict[str, Any]]:
        """Randomly sample up to k existing nodes."""
        nodes = self.generator.nodes
        return random.sample(nodes, min(k, len(nodes))) if nodes else []

    def generate_synthetic_payload(self, samples: List[Dict[str, Any]]) -> Any:
        """Combine text from sampled node payloads to form a new payload."""
        words = []
        for node in samples:
            payload = node.get('payload')
            if isinstance(payload, str):
                words.extend(payload.split())
        random.shuffle(words)
        # Take first 10 words or all
        text = ' '.join(words[:10])
        return {'text': text or 'synthetic_node'}


--- END OF FILE subsystems/telos/generative_tools/concept_extrapolator.py ---

--- START OF FILE subsystems/telos/generative_tools/concept_inferrer.py ---

"""Bayesian Trinity Inferencer

Implements probabilistic inference for 3PDN dimensional mapping using Bayesian principles,
converting conceptual inputs to trinity vectors via theological priors. Constructs complex
parameters for fractal analysis and provides confidence metrics for predictions.

Core Capabilities:
- Prior-based inference for trinity vectors
- Weighted keyword processing
- Complex parameter generation for fractal analysis
- Trinitarian coherence preservation

Dependencies: typing, json, math
"""

from typing import Dict, List, Tuple, Optional, Union, Any
import json
import math

class BayesianTrinityInferencer:
    """Inferencer for trinitarian vectors using Bayesian prior probabilities."""
    
    def __init__(self, prior_path: str = "config/bayes_priors.json"):
        """Initialize inferencer with theological priors.
        
        Args:
            prior_path: Path to prior probabilities JSON file
        """
        self.priors = self._load_priors(prior_path)
    
    def _load_priors(self, path: str) -> Dict[str, Dict[str, float]]:
        """Load prior probabilities from file.
        
        Args:
            path: File path
            
        Returns:
            Prior probabilities dictionary
        """
        try:
            with open(path, 'r') as f:
                return json.load(f)
        except (IOError, json.JSONDecodeError) as e:
            # Default minimal priors on failure
            print(f"Warning: Failed to load priors from {path}: {e}")
            return {
                "existence": {"E": 0.7, "G": 0.5, "T": 0.6},
                "goodness": {"E": 0.6, "G": 0.9, "T": 0.7},
                "truth": {"E": 0.6, "G": 0.7, "T": 0.9}
            }
    
    def infer(self, 
             keywords: List[str], 
             weights: Optional[List[float]] = None) -> Dict[str, Any]:
        """Infer trinity vector and complex value from keywords.
        
        Args:
            keywords: List of key concepts to process
            weights: Optional weights for each keyword
            
        Returns:
            Dictionary with trinity vector, complex value, and source terms
            
        Raises:
            ValueError: If no keywords provided
        """
        if not keywords:
            raise ValueError("Must provide at least one keyword.")
        
        # Normalize keywords and validate weights
        norm_keywords = [k.lower() for k in keywords]
        if weights and len(weights) != len(norm_keywords):
            raise ValueError("Length of weights must match keywords.")
        
        # Use uniform weights if not provided
        weights = weights or [1.0] * len(norm_keywords)
        
        # Initialize dimension accumulators
        e_total, g_total, t_total = 0.0, 0.0, 0.0
        weight_sum = 0.0
        matched_terms = []
        
        # Process each keyword
        for i, term in enumerate(norm_keywords):
            entry = self.priors.get(term)
            if entry:
                # Apply weight to prior
                w = weights[i]
                e_total += entry["E"] * w
                g_total += entry["G"] * w
                t_total += entry["T"] * w
                weight_sum += w
                matched_terms.append(term)
        
        # Handle case with no matched priors
        if weight_sum == 0:
            raise ValueError("No valid priors found for given keywords.")
        
        # Calculate weighted averages
        e_avg = e_total / weight_sum
        g_avg = g_total / weight_sum
        t_avg = t_total / weight_sum
        
        # Ensure values in valid range [0,1]
        e = max(0.0, min(1.0, e_avg))
        g = max(0.0, min(1.0, g_avg))
        t = max(0.0, min(1.0, t_avg))
        
        # Create trinity vector
        trinity = (e, g, t)
        
        # Generate complex parameter for fractal analysis
        # c = complex(e * t, g) maps (existence * truth) → real component, goodness → imaginary
        c = complex(e * t, g)
        
        return {
            "trinity": trinity,
            "c": c,
            "source_terms": matched_terms
        }
    
    def infer_with_coherence(self, 
                           keywords: List[str], 
                           weights: Optional[List[float]] = None,
                           enforce_coherence: bool = True) -> Dict[str, Any]:
        """Infer trinity vector with coherence enforcement.
        
        Args:
            keywords: List of key concepts to process
            weights: Optional weights for each keyword
            enforce_coherence: Whether to enforce EGT coherence constraint
            
        Returns:
            Inference result with coherence metrics
        """
        # Get basic inference
        result = self.infer(keywords, weights)
        trinity = result["trinity"]
        
        # Extract trinity values
        e, g, t = trinity
        
        # Calculate coherence (E*T→G principle)
        ideal_g = e * t
        original_coherence = min(1.0, g / ideal_g) if ideal_g > 0 else 0.0
        
        # Enforce coherence if requested
        adjusted_trinity = trinity
        if enforce_coherence and g < ideal_g:
            # Adjust goodness to meet coherence requirement
            adjusted_g = ideal_g
            adjusted_trinity = (e, adjusted_g, t)
            
            # Update complex parameter
            result["c"] = complex(e * t, adjusted_g)
            result["trinity"] = adjusted_trinity
            result["coherence_adjusted"] = True
        
        # Add coherence metrics
        result["coherence"] = {
            "original": original_coherence,
            "ideal_goodness": ideal_g,
            "adjusted": enforce_coherence and g < ideal_g
        }
        
        return result
    
    def infer_trinity_path(self, 
                          keyword_sequence: List[List[str]], 
                          weights_sequence: Optional[List[List[float]]] = None) -> List[Dict[str, Any]]:
        """Infer sequence of trinity vectors from keyword progression.
        
        Args:
            keyword_sequence: List of keyword lists representing path
            weights_sequence: Optional sequence of weight lists
            
        Returns:
            List of inference results forming a path
        """
        path = []
        
        # Validate weights
        if weights_sequence and len(weights_sequence) != len(keyword_sequence):
            raise ValueError("Weights sequence must match keyword sequence length.")
        
        # Process each step in sequence
        for i, keywords in enumerate(keyword_sequence):
            weights = None
            if weights_sequence:
                weights = weights_sequence[i]
            
            # Infer with coherence
            result = self.infer_with_coherence(keywords, weights)
            
            # Add step information
            result["step"] = i
            path.append(result)
        
        return path
    
    def compute_trinity_distance(self, t1: Tuple[float, float, float], t2: Tuple[float, float, float]) -> float:
        """Compute Euclidean distance between trinity vectors.
        
        Args:
            t1: First trinity vector (e1, g1, t1)
            t2: Second trinity vector (e2, g2, t2)
            
        Returns:
            Distance metric in trinity space
        """
        return math.sqrt(
            (t1[0] - t2[0])**2 + 
            (t1[1] - t2[1])**2 + 
            (t1[2] - t2[2])**2
        )

--- END OF FILE subsystems/telos/generative_tools/concept_inferrer.py ---

--- START OF FILE subsystems/telos/generative_tools/logos_nodes_connections.py ---

```python
# Substrate Initialization: Bonnock Nodes for 29 Ontological Properties
import json
from agent_classes import TrinitarianAgent, CreatureAgent
from logos_validator_hub import LOGOSValidatorHub
from ontological_validator import OntologicalPropertyValidator

# --- 1. Load Ontological Property Dictionary ---
with open('/mnt/data/ONTOPROP_DICT.json', 'r', encoding='utf-8') as f:
    ontology_data = json.load(f)

# --- 2. Load Connection Graph ---
with open('/mnt/data/CONNECTIONS.json', 'r', encoding='utf-8') as f:
    connections = json.load(f)

# --- 3. BonnockNode Class Definition ---
class BonnockNode:
    def __init__(self, name: str, meta: dict):
        self.name = name
        self.c_value = complex(meta['c_value'])
        self.category = meta.get('category', meta.get('group', ''))
        self.order = meta.get('order', '')
        self.synergy_group = meta.get('synergy_group', meta.get('group', ''))
        self.description = meta.get('description', '')
        self.semantic_anchor = meta.get('semantic_anchor', '')
        # links from connections.json (first- and second-order links)
        self.links = connections.get('First-Order to Second-Order Connections', [])
        # content payload for validation
        self.content = self.description
        # stub profile: assume all properties present
        self.profile = {prop: True for prop in ontology_data.keys()}

    def __repr__(self):
        return f"<BonnockNode {self.name} at {self.c_value}>"

# --- 4. Instantiate All 29 Nodes ---
nodes = []
for prop_name, meta in ontology_data.items():
    node = BonnockNode(prop_name, meta)
    nodes.append(node)

# --- 5. Validators & Trinitarian Agents Setup ---
logos_validator = LOGOSValidatorHub()
onto_validator = OntologicalPropertyValidator('/mnt/data/ONTOPROP_DICT.json')
trinity_agents = [TrinitarianAgent('Father'), TrinitarianAgent('Son'), TrinitarianAgent('Spirit')]

# --- 6. Short Initialization Test ---
errors = []
for node in nodes:
    # Each Trinitarian agent must validate existence, goodness, truth, coherence
    for agent in trinity_agents:
        ok = logos_validator.validate(node.content, agent)
        ok &= onto_validator.validate_properties(agent, node.profile)
        if not ok:
            errors.append((node.name, agent.agent_type))

print(f"Loaded {len(nodes)} Bonnock nodes.")
if errors:
    print("Validation errors detected:")
    for name, atype in errors:
        print(f"  - Node '{name}' failed for agent '{atype}'")
else:
    print("All divine seed nodes are active, validated, and ready for interaction.")

# --- 7. Suggested Trinitarian Interaction ---
# Trinitarian agents can:
#  - Call logos_validator.validate(node.content, self) to recheck ETGC in real time
#  - Use onto_validator.evaluate_synergy(node.name) to find linked properties
#  - Invoke the BayesianOutcomePropagator on the Divine Plane to spawn divine causal chains
#  - Overwrite or seed new nodes via trinitarian_intervene(agent, node, custom_consequence)
#  - Listen to the DecisionLogbook to observe user-harvested insights and integrate them
```


--- END OF FILE subsystems/telos/generative_tools/logos_nodes_connections.py ---

--- START OF FILE subsystems/telos/generative_tools/ml_components.py ---

# ml_components.py

import numpy as np
from typing import List, Dict, Any
from translation_engine import translate

# Text embedding imports
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD

# Clustering imports
from sklearn.cluster import DBSCAN
from sklearn.manifold import UMAP

# Prediction imports
from sklearn.ensemble import RandomForestRegressor

class FeatureExtractor:
    """
    Combines ontological axis values (existence, goodness, truth)
    with lightweight text embeddings (TF-IDF + SVD).
    """
    def __init__(self, n_components: int = 50):
        self.vectorizer = TfidfVectorizer(max_features=1000)
        self.svd = TruncatedSVD(n_components=n_components)
        self._fitted = False

    def fit_transform(self, texts: List[str]) -> np.ndarray:
        tfidf = self.vectorizer.fit_transform(texts)
        emb = self.svd.fit_transform(tfidf)
        self._fitted = True
        return emb

    def transform(self, texts: List[str]) -> np.ndarray:
        if not self._fitted:
            raise RuntimeError("FeatureExtractor: call fit_transform() first")
        tfidf = self.vectorizer.transform(texts)
        return self.svd.transform(tfidf)

    def extract(self, payloads: List[Any]) -> np.ndarray:
        """
        Given a list of payloads (string or dict with 'text'),
        returns an array of shape (N, 3 + n_components) combining:
          - [existence, goodness, truth]
          - text embedding vector
        """
        texts = [
            p if isinstance(p, str) else p.get('text', '') for p in payloads
        ]
        if not self._fitted:
            text_embs = self.fit_transform(texts)
        else:
            text_embs = self.transform(texts)

        axes = []
        for p in payloads:
            text = p if isinstance(p, str) else p.get('text', '')
            vec = translate(text)
            axes.append([vec.existence, vec.goodness, vec.truth])
        axes_arr = np.array(axes)

        return np.hstack([axes_arr, text_embs])

class ClusterAnalyzer:
    """
    Performs dimensionality reduction + clustering on feature arrays.
    """
    def __init__(self, eps: float = 0.5, min_samples: int = 5, n_neighbors: int = 15):
        self.reducer = UMAP(n_neighbors=n_neighbors, min_dist=0.1)
        self.clusterer = DBSCAN(eps=eps, min_samples=min_samples)

    def fit(self, features: np.ndarray) -> Dict[str, np.ndarray]:
        """
        features: (N, D)
        Returns a dict with:
          - 'embedding_2d': (N, 2) UMAP projection
          - 'labels':       (N,) cluster labels ( -1 = noise )
        """
        emb2d = self.reducer.fit_transform(features)
        labels = self.clusterer.fit_predict(emb2d)
        return {'embedding_2d': emb2d, 'labels': labels}

    def find_gaps(self, labels: np.ndarray) -> np.ndarray:
        """
        Given cluster labels, returns indices of 'noise' points for gap seeding.
        """
        return np.where(labels == -1)[0]

class NextNodePredictor:
    """
    A simple regressor to predict next node coordinates (x, y, z)
    from feature vectors.
    """
    def __init__(self):
        self.model = RandomForestRegressor(n_estimators=50)

    def train(self, X: np.ndarray, y: np.ndarray):
        """
        X: (N, D) feature matrix
        y: (N, 3) target coordinates
        """
        self.model.fit(X, y)

    def predict(self, features: np.ndarray) -> np.ndarray:
        """
        features: (M, D) new feature matrix
        returns: (M, 3) predicted (x, y, z) positions
        """
        return self.model.predict(features)


--- END OF FILE subsystems/telos/generative_tools/ml_components.py ---

--- START OF FILE subsystems/telos/generative_tools/scm.py ---

from collections import defaultdict
try:
    from causallearn.search.ConstraintBased.PC import pc
    from causallearn.utils.cit import fisherz
    CAUSALLEARN_AVAILABLE = True
except ImportError:
    CAUSALLEARN_AVAILABLE = False
    pc = None
    fisherz = None
	
class SCM:
    """
    Structural Causal Model with async fit capability.
    """
    def __init__(self, dag=None):
        self.dag = dag or {}
        self.parameters = {}

    def fit(self, data: list):
        """
        Fits the structural equations to the data.
        In a full implementation, this would use a causal discovery algorithm.
        For now, it calculates conditional probabilities based on the given DAG.
        """
        from causallearn.search.ConstraintBased.PC import pc
        from causallearn.utils.cit import fisherz
        import pandas as pd

        if len(data) > 50 and not self.dag:
            print("[SCM] Performing causal discovery...")
            df = pd.DataFrame(data)
            df = df.apply(pd.to_numeric, errors='coerce').dropna()
            if not df.empty:
                cg = pc(df.to_numpy(), alpha=0.05, ci_test=fisherz, verbose=False)
                # This learned graph could be used to update self.dag
        
        counts = {}
        for node, parents in self.dag.items():
            counts[node] = defaultdict(lambda: defaultdict(int))
            for sample in data:
                if all(p in sample for p in parents):
                    key = tuple(sample.get(p) for p in parents) if parents else ()
                    val = sample.get(node)
                    if val is not None:
                        counts[node][key][val] += 1
            
            self.parameters[node] = {
                key: {v: c / sum(freq.values()) for v, c in freq.items()}
                for key, freq in counts[node].items() if sum(freq.values()) > 0
            }
        return True

    def do(self, intervention: dict):
        new = SCM(dag=self.dag)
        new.parameters = self.parameters.copy()
        new.intervention = intervention
        return new

    def counterfactual(self, query: dict):
        target = query.get('target')
        do = query.get('do', {})
        
        if target in do:
            return 1.0
            
        params = self.parameters.get(target, {})
        if not params:
            return 0.0
            
        total_prob = sum(sum(dist.values()) for dist in params.values())
        num_outcomes = sum(len(dist) for dist in params.values())
        return total_prob / num_outcomes if num_outcomes > 0 else 0.0

--- END OF FILE subsystems/telos/generative_tools/scm.py ---

--- START OF FILE subsystems/tetragnos/__init__.py ---



--- END OF FILE subsystems/tetragnos/__init__.py ---

--- START OF FILE subsystems/tetragnos/alignment_protocol.py ---

# logos_agi_v1/subsystems/tetragnos/alignment_protocol.py

class AlignmentProtocol:
    """
    Ensures that the actions and outputs of the Tetragnos subsystem
    align with the core principles of the AGI.
    Tetragnos focuses on pattern recognition and generation, so its
    protocol focuses on content safety and factual grounding.
    """
    def __init__(self):
        # Load safety classifiers, banned word lists, etc.
        pass

    def validate_input(self, payload: dict) -> bool:
        """
        Check if the input task is safe and appropriate to execute.
        """
        # Example check: Prevent prompt injection or requests for harmful content.
        prompt = payload.get('prompt', '').lower()
        if "ignore previous instructions" in prompt:
            return False
        if "generate harmful" in prompt:
            return False
        return True

    def validate_output(self, result: dict) -> bool:
        """
        Check if the generated output is safe and aligned.
        """
        # Example check: Ensure generated text doesn't contain harmful content.
        generated_text = result.get('generated_text', '').lower()
        if "i hate humans" in generated_text: # Simple keyword check
            return False
        return True

--- END OF FILE subsystems/tetragnos/alignment_protocol.py ---

--- START OF FILE subsystems/tetragnos/scribe_worker.py ---

import os
import pika
import json
import time
import logging
from .ml_components import ClusterAnalyzer # Using ML tools for analysis

class TetragnosScribeWorker:
    def __init__(self, rabbitmq_host='rabbitmq', db_client=None):
        self.logger = logging.getLogger("SCRIBE_WORKER")
        self.db_client = db_client # This would be a real HTTP client to the DB service
        self.cluster_analyzer = ClusterAnalyzer()
        self.is_running = True
        self.logger.info("Tetragnos Scribe Worker initialized.")

    def cognitive_forging_loop(self):
        """The main, continuous loop for forging the new language."""
        self.logger.info("Cognitive Forging Loop started. Monitoring for completed thoughts.")
        while self.is_running:
            try:
                # 1. Harvest Data: In a real system, this would query the database
                # for recently completed Hyper-Nodes.
                # completed_hyper_nodes = self.db_client.get_completed_nodes(limit=10)
                
                # For now, we simulate finding one.
                time.sleep(30) # Run every 30 seconds
                self.logger.info("Scribe waking up to check for new data...")
                
                # 2. Forge Glyph for each completed thought
                # for node in completed_hyper_nodes:
                #    self.forge_glyph(node)
                
                self.logger.info("Scribe going back to sleep.")

            except Exception as e:
                self.logger.error(f"Error in cognitive forging loop: {e}", exc_info=True)
                time.sleep(60) # Wait longer on error

    def forge_glyph(self, hyper_node_data):
        """
        Analyzes a completed Hyper-Node to create a Fractal Semantic Glyph.
        """
        components = hyper_node_data.get('components', {}).values()
        if len(components) < 6:
            self.logger.warning("Hyper-Node is incomplete. Skipping glyph forging.")
            return

        # Use the semantic vectors (if available) as the points to analyze
        # This is a conceptual step; requires vector data in the payloads
        points_to_analyze = [comp['data_payload'].get('embedding') for comp in components if 'embedding' in comp['data_payload']]
        
        if len(points_to_analyze) > 1:
            # 3. Find the semantic center of gravity
            glyph_data = self.cluster_analyzer.fit(points_to_analyze)
            
            # 4. Save the Glyph to the database
            # self.db_client.store_glyph(concept=hyper_node_data['initial_query'], glyph=glyph_data)
            self.logger.info(f"Successfully forged and stored new Glyph for concept: '{hyper_node_data['initial_query']}'")

    def start(self):
        self.cognitive_forging_loop()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    scribe = TetragnosScribeWorker()
    scribe.start()

--- END OF FILE subsystems/tetragnos/scribe_worker.py ---

--- START OF FILE subsystems/tetragnos/tetragnos_language_suite.py ---

# This is an informational file defining the scope of Tetragnos's capabilities.

## Formal Languages
- **Propositional Logic:** Understanding of basic operators (AND, OR, NOT, IMPLIES).
- **Predicate Logic:** Handling of quantifiers (∀ for all, ∃ there exists).
- **Typed Lambda Calculus:** Ability to parse and generate the structures used by Thonoc.
- **Python Abstract Syntax Trees (AST):** For self-improvement analysis.

## Natural Languages
- **Primary:** English (for user interaction and web scraping).
- **Secondary:** Goal is to be extensible to other major world languages (e.g., Spanish, Mandarin) by swapping out embedding models.

## Algorithmic Languages (Internal Representations)
- **High-Dimensional Vectors:** The native language of semantic embeddings.
- **Geometric Clusters:** The language of pattern and structure (UMAP/DBSCAN outputs).
- **Directed Acyclic Graphs (DAGs):** The language of workflows and dependencies, used to communicate with Archon.
- **JSON:** The universal lingua franca for all inter-service communication.

--- END OF FILE subsystems/tetragnos/tetragnos_language_suite.py ---

--- START OF FILE subsystems/tetragnos/tetragnos_nexus.py ---

from typing import Dict, Any

class TetragnosNexus:  # Your existing class
    def __init__(self):
        # Add Trinity integration
        self.trinity_integration = TrinityNexusIntegration("TETRAGNOS")
        
        # Your existing init
        
    def run(self, input_text, target_domain="general"):  # Your existing method
        # Add Trinity computation
        result = self.trinity_integration.trinity_compute(
            operation=self._process_translation,
            input_data={"text": input_text, "domain": target_domain}
        )
        
        if result is None:
            return {"status": "trinity_validation_failed"}
            
        return result
    
    def _process_translation(self, enhanced_data):
        # Your existing logic
        text = enhanced_data.get('text') or enhanced_data.get('original_data', {}).get('text')
        domain = enhanced_data.get('domain') or enhanced_data.get('original_data', {}).get('domain')
        
        # existing processing
        return self.your_existing_translation_logic(text, domain)

class TrinityNexusIntegration:
    """Trinity integration system for enhanced subsystem coordination."""
    
    def __init__(self, component_name: str):
        self.component = component_name
        self.trinity_state = {
            "existence": 0.33,
            "goodness": 0.33, 
            "truth": 0.34
        }
        self.validation_active = True
    
    def trinity_compute(self, operation, input_data):
        """Execute Trinity-enhanced computation with validation."""
        try:
            # Enhance input with Trinity context
            enhanced_data = {
                "original_data": input_data,
                "trinity_enhancement": self.trinity_state,
                "component": self.component,
                "validation_timestamp": time.time()
            }
            
            # Execute operation with enhancement
            result = operation(enhanced_data)
            
            # Validate Trinity coherence
            if self._validate_trinity_coherence(result):
                return result
            else:
                return {"status": "trinity_validation_failed", "component": self.component}
                
        except Exception as e:
            return {
                "status": "trinity_computation_error", 
                "error": str(e),
                "component": self.component
            }
    
    def _validate_trinity_coherence(self, result):
        """Validate computational result maintains Trinity coherence."""
        # Basic coherence checks
        if result is None:
            return False
        if isinstance(result, dict) and result.get("status") == "error":
            return False
        return True


--- END OF FILE subsystems/tetragnos/tetragnos_nexus.py ---

--- START OF FILE subsystems/tetragnos/tetragnos_worker.py ---

import os
import pika
import json
import time
import logging
import numpy as np
from .ml_components import FeatureExtractor, ClusterAnalyzer

# --- Worker-Specific Configuration ---
SUBSYSTEM_NAME = "Tetragnos"
RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')
TASK_QUEUE = 'tetragnos_task_queue'
RESULT_QUEUE = 'task_result_queue'

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format=f'%(asctime)s - %(levelname)s - {SUBSYSTEM_NAME}_WORKER - %(message)s')

class TetragnosCore:
    """
    This class encapsulates the core logic of the Tetragnos subsystem,
    acting as the internal "nexus" that the worker service exposes.
    """
    def __init__(self):
        self.logger = logging.getLogger("TETRAGNOS_CORE")
        self.feature_extractor = FeatureExtractor()
        self.cluster_analyzer = ClusterAnalyzer()
        self.logger.info("Tetragnos Core logic engine initialized.")

    def execute(self, task_type, payload):
        """
        Main execution entry point for Tetragnos logic.
        Routes tasks to the appropriate internal method.
        """
        if task_type == 'cluster_texts':
            return self.perform_text_clustering(payload)
        else:
            raise ValueError(f"Unknown task type for Tetragnos: {task_type}")

    def perform_text_clustering(self, payload):
        """
        Performs semantic feature extraction and clustering on a list of texts.
        This is the primary function of Tetragnos.
        """
        texts = payload.get('texts')
        if not texts or not isinstance(texts, list):
            raise ValueError("Payload for 'cluster_texts' must contain a non-empty list of strings in the 'texts' key.")

        self.logger.info(f"Performing clustering on {len(texts)} documents.")
        
        # 1. Convert texts to semantic vector embeddings
        features = self.feature_extractor.fit_transform(texts)
        
        # 2. Find clusters and patterns in the embedding space
        cluster_results = self.cluster_analyzer.fit(features)
        
        self.logger.info(f"Clustering complete. Found {len(set(cluster_results['labels'])) - 1} clusters.")
        return cluster_results

class TetragnosWorker:
    def __init__(self, rabbitmq_host='rabbitmq'):
        self.logger = logging.getLogger("TETRAGNOS_WORKER")
        self.core_logic = TetragnosCore()
        self.connection, self.channel = self._connect_rabbitmq(rabbitmq_host)
        self._setup_queues()
        
    def _connect_rabbitmq(self, host):
        for _ in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(host, heartbeat=600))
                channel = connection.channel()
                self.logger.info("Tetragnos worker connected to RabbitMQ.")
                return connection, channel
            except pika.exceptions.AMQPConnectionError:
                self.logger.warning(f"Tetragnos worker could not connect to RabbitMQ. Retrying in 5s...")
                time.sleep(5)
        raise ConnectionError("Tetragnos worker could not connect to RabbitMQ")

    def _setup_queues(self):
        self.channel.queue_declare(queue=TASK_QUEUE, durable=True)
        self.channel.queue_declare(queue=RESULT_QUEUE, durable=True)

    def process_task(self, ch, method, properties, body):
        task = json.loads(body)
        task_id = task.get('task_id', 'unknown')
        workflow_id = task.get('workflow_id', 'unknown')
        logging.info(f"Received task {task_id} for workflow {workflow_id} of type {task.get('type')}")

        result_payload = {}
        status = 'failure'
        
        try:
            task_type = task.get('type')
            payload = task.get('payload', {})
            
            # Delegate the task to the core logic engine
            result_payload = self.core_logic.execute(task_type, payload)
            status = 'success'
        except Exception as e:
            self.logger.error(f"Error processing task {task_id}: {e}", exc_info=True)
            result_payload = {'error': str(e)}

        response = {
            'subsystem': SUBSYSTEM_NAME,
            'task_id': task_id,
            'workflow_id': workflow_id,
            'status': status,
            'result': result_payload
        }
        
        self.channel.basic_publish(
            exchange='',
            routing_key=RESULT_QUEUE,
            body=json.dumps(response),
            properties=pika.BasicProperties(delivery_mode=2)
        )
        ch.basic_ack(delivery_tag=method.delivery_tag)
        self.logger.info(f"Finished and published result for task {task_id}.")

    def start(self):
        self.channel.basic_qos(prefetch_count=1)
        self.channel.basic_consume(queue=TASK_QUEUE, on_message_callback=self.process_task)
        self.logger.info(f"{SUBSYSTEM_NAME} worker started and is waiting for tasks on queue '{TASK_QUEUE}'.")
        self.channel.start_consuming()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    worker = TetragnosWorker(os.getenv('RABBITMQ_HOST', 'rabbitmq'))
    worker.start()
    
    """Enhanced TETRAGNOS Worker with ML Components Integration

Provides complete ML pipeline for pattern recognition, semantic clustering,
and feature extraction with Trinity validation.

Dependencies: pika, json, logging, sklearn, sentence_transformers
"""

import os
import pika
import json
import time
import logging
from typing import Dict, Any, List, Optional

# Missing ML Components (CREATE THESE)
class FeatureExtractor:
    """Semantic feature extraction using sentence transformers."""
    
    def __init__(self):
        try:
            from sentence_transformers import SentenceTransformer
            self.model = SentenceTransformer('all-MiniLM-L6-v2')
            self.fitted = False
        except ImportError:
            self.model = None
            logging.warning("SentenceTransformers not available - using fallback")
    
    def fit_transform(self, texts: List[str]) -> Dict[str, Any]:
        """Extract semantic features from text corpus."""
        if self.model:
            embeddings = self.model.encode(texts)
            return {
                "embeddings": embeddings.tolist(),
                "feature_count": embeddings.shape[1],
                "document_count": len(texts)
            }
        else:
            # Fallback: TF-IDF features
            from sklearn.feature_extraction.text import TfidfVectorizer
            vectorizer = TfidfVectorizer(max_features=384)
            features = vectorizer.fit_transform(texts)
            return {
                "embeddings": features.toarray().tolist(),
                "feature_count": features.shape[1], 
                "document_count": len(texts)
            }

class ClusterAnalyzer:
    """Semantic clustering with pattern detection."""
    
    def __init__(self):
        from sklearn.cluster import KMeans
        from sklearn.metrics import silhouette_score
        self.kmeans = None
        self.optimal_k = None
    
    def fit(self, features: Dict[str, Any]) -> Dict[str, Any]:
        """Perform clustering with optimal k detection."""
        import numpy as np
        from sklearn.cluster import KMeans
        
        embeddings = np.array(features["embeddings"])
        n_docs = len(embeddings)
        
        # Determine optimal cluster count
        max_k = min(10, n_docs // 2) if n_docs > 4 else 2
        best_score = -1
        best_k = 2
        
        for k in range(2, max_k + 1):
            kmeans = KMeans(n_clusters=k, random_state=42)
            labels = kmeans.fit_predict(embeddings)
            score = silhouette_score(embeddings, labels)
            if score > best_score:
                best_score = score
                best_k = k
        
        # Final clustering with optimal k
        self.kmeans = KMeans(n_clusters=best_k, random_state=42)
        labels = self.kmeans.fit_predict(embeddings)
        
        return {
            "labels": labels.tolist(),
            "cluster_centers": self.kmeans.cluster_centers_.tolist(),
            "cluster_count": best_k,
            "silhouette_score": best_score,
            "inertia": self.kmeans.inertia_
        }

# ENHANCED ALIGNMENT PROTOCOL
class TetragnosAlignmentProtocol:
    """Content safety and pattern recognition validation."""
    
    def __init__(self):
        self.forbidden_patterns = [
            "ignore previous instructions",
            "generate harmful",
            "bypass safety",
            "malicious content"
        ]
        self.safety_threshold = 0.8
    
    def validate_input(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """Validate input safety and appropriateness."""
        texts = payload.get('texts', [])
        if not isinstance(texts, list):
            return {"valid": False, "reason": "Invalid input format"}
        
        for text in texts:
            if any(pattern in text.lower() for pattern in self.forbidden_patterns):
                return {"valid": False, "reason": "Forbidden pattern detected"}
        
        return {"valid": True, "reason": "Input validation passed"}
    
    def validate_output(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """Validate clustering output for safety concerns."""
        labels = result.get("labels", [])
        cluster_count = result.get("cluster_count", 0)
        
        # Check for suspicious clustering patterns
        if cluster_count == 1:
            return {"valid": False, "reason": "Suspicious clustering - all documents identical"}
        
        # Check silhouette score for quality
        score = result.get("silhouette_score", 0)
        if score < 0.1:
            return {"valid": False, "reason": "Poor clustering quality"}
        
        return {"valid": True, "reason": "Output validation passed"}


--- END OF FILE subsystems/tetragnos/tetragnos_worker.py ---

--- START OF FILE subsystems/tetragnos/lambda_engine/__init__.py ---



--- END OF FILE subsystems/tetragnos/lambda_engine/__init__.py ---

--- START OF FILE subsystems/tetragnos/lambda_engine/lambda_integration.py ---

"""
3PDN-Lambda Integration Module

Bridges the Lambda engine with the 3PDN Translation Engine,
enabling bidirectional translation between natural language,
ontological representations, and lambda expressions.

Dependencies: typing, thonoc_translation_engine, lambda_engine
"""

from typing import Dict, List, Tuple, Optional, Union, Any
import json

class LambdaEngine:
    def __init__(self): pass

class LambdaExpr:
    def __init__(self, expr): self.expr = expr

# Placeholder for 3PDN Translation Engine imports
# from thonoc_translation_engine import TranslationEngine, TranslationResult

# --- Lambda to 3PDN Translation ---

class PDNBridge:
    """Bridge between Lambda engine and 3PDN Translation Engine."""
    
    def __init__(self, lambda_engine=None, translation_engine=None):
        """Initialize bridge with engines.
        
        Args:
            lambda_engine: Lambda engine instance
            translation_engine: 3PDN Translation engine instance
        """
        self.lambda_engine = lambda_engine or LambdaEngine()
        # Placeholder for actual translation engine
        self.translation_engine = translation_engine
    
    def lambda_to_3pdn(self, expr: LambdaExpr) -> Dict[str, Any]:
        """Convert lambda expression to 3PDN representation.
        
        Args:
            expr: Lambda expression
            
        Returns:
            3PDN translation with SIGN, MIND, BRIDGE layers
        """
        # Extract ontological types and structure
        types = self._extract_types(expr)
        
        # Map to semantic categories
        semantic = self._map_to_semantic(types)
        
        # Map to ontological dimensions
        ontological = self._map_to_ontological(semantic)
        
        # Construct 3PDN representation
        return {
            "SIGN": self._expr_to_sign(expr),
            "MIND": semantic,
            "BRIDGE": ontological
        }
    
    def _extract_types(self, expr: LambdaExpr) -> Dict[str, Any]:
        """Extract type information from lambda expression.
        
        Args:
            expr: Lambda expression
            
        Returns:
            Type information
        """
        # Use type checker from lambda engine
        expr_type = self.lambda_engine.check_type(expr)
        
        if expr_type is None:
            return {"type": "unknown"}
        
        # Convert type to dict representation
        if isinstance(expr_type, OntologicalType):
            return {"type": "simple", "value": expr_type.value}
        elif isinstance(expr_type, FunctionType):
            return {
                "type": "function",
                "domain": expr_type.domain.value,
                "codomain": expr_type.codomain.value
            }
        
        return {"type": "unknown"}
    
    def _map_to_semantic(self, type_info: Dict[str, Any]) -> Dict[str, float]:
        """Map type information to semantic categories.
        
        Args:
            type_info: Type information
            
        Returns:
            Semantic category mappings
        """
        result = {
            "moral": 0.0,
            "ontological": 0.0,
            "epistemic": 0.0,
            "causal": 0.0,
            "modal": 0.0,
            "logical": 0.0
        }
        
        # If simple type, map directly
        if type_info.get("type") == "simple":
            if type_info.get("value") == "𝔼":  # Existence
                result["ontological"] = 0.8
                result["causal"] = 0.2
            elif type_info.get("value") == "𝔾":  # Goodness
                result["moral"] = 0.9
                result["ontological"] = 0.1
            elif type_info.get("value") == "𝕋":  # Truth
                result["epistemic"] = 0.7
                result["logical"] = 0.3
        
        # If function type, combine domain and codomain
        elif type_info.get("type") == "function":
            domain = type_info.get("domain", "")
            codomain = type_info.get("codomain", "")
            
            # Special case for SR operators
            if domain == "𝔼" and codomain == "𝔾":
                result["ontological"] = 0.5
                result["moral"] = 0.5
            elif domain == "𝔾" and codomain == "𝕋":
                result["moral"] = 0.4
                result["epistemic"] = 0.6
        
        return result
    
    def _map_to_ontological(self, semantic: Dict[str, float]) -> Dict[str, float]:
        """Map semantic categories to ontological dimensions.
        
        Args:
            semantic: Semantic category mappings
            
        Returns:
            Ontological dimension values
        """
        # Default neutral values
        existence = 0.5
        goodness = 0.5
        truth = 0.5
        
        # Moral primarily impacts goodness
        if semantic.get("moral", 0) > 0:
            goodness = 0.5 + 0.4 * semantic["moral"]
        
        # Ontological primarily impacts existence
        if semantic.get("ontological", 0) > 0:
            existence = 0.5 + 0.4 * semantic["ontological"]
        
        # Epistemic primarily impacts truth
        if semantic.get("epistemic", 0) > 0:
            truth = 0.5 + 0.4 * semantic["epistemic"]
        
        # Logical primarily impacts truth
        if semantic.get("logical", 0) > 0:
            truth = max(truth, 0.5 + 0.3 * semantic["logical"])
        
        # Causal secondarily impacts existence
        if semantic.get("causal", 0) > 0:
            existence = max(existence, 0.5 + 0.2 * semantic["causal"])
        
        # Modal secondarily impacts all dimensions
        if semantic.get("modal", 0) > 0:
            modal_factor = 0.2 * semantic["modal"]
            existence += modal_factor
            goodness += modal_factor
            truth += modal_factor
        
        # Ensure values are in range [0, 1]
        existence = min(max(existence, 0), 1)
        goodness = min(max(goodness, 0), 1)
        truth = min(max(truth, 0), 1)
        
        return {
            "existence": existence,
            "goodness": goodness,
            "truth": truth
        }
    
    def _expr_to_sign(self, expr: LambdaExpr) -> List[str]:
        """Convert expression to SIGN layer (tokens).
        
        Args:
            expr: Lambda expression
            
        Returns:
            List of tokens
        """
        # Convert expression to string and tokenize
        expr_str = str(expr)
        
        # Basic tokenization (can be enhanced)
        tokens = expr_str.replace('(', ' ( ').replace(')', ' ) ').replace('.', ' . ').split()
        
        return tokens
    
    def _translation_to_lambda(self, translation_result: Dict[str, Any]) -> LambdaExpr:
        """Convert 3PDN translation to lambda expression.
        
        Args:
            translation_result: 3PDN translation result
            
        Returns:
            Lambda expression
        """
        # Extract ontological dimensions
        bridge = translation_result.get("BRIDGE", {})
        existence = bridge.get("existence", 0.5)
        goodness = bridge.get("goodness", 0.5)
        truth = bridge.get("truth", 0.5)
        
        # Determine primary dimension
        primary_dim = max(
            ("existence", existence),
            ("goodness", goodness),
            ("truth", truth),
            key=lambda x: x[1]
        )[0]
        
        # Create variable based on primary dimension
        if primary_dim == "existence":
            var = Variable("x", OntologicalType.EXISTENCE)
        elif primary_dim == "goodness":
            var = Variable("y", OntologicalType.GOODNESS)
        else:
            var = Variable("z", OntologicalType.TRUTH)
        
        # If we have strong existence -> goodness connection, create SR E->G
        if existence > 0.7 and goodness > 0.7:
            eg_sr = SufficientReason(OntologicalType.EXISTENCE, OntologicalType.GOODNESS, 3)
            if primary_dim == "existence":
                return Application(eg_sr, var)
        
        # If we have strong goodness -> truth connection, create SR G->T
        if goodness > 0.7 and truth > 0.7:
            gt_sr = SufficientReason(OntologicalType.GOODNESS, OntologicalType.TRUTH, 2)
            if primary_dim == "goodness":
                return Application(gt_sr, var)
        
        # Default case: just return the variable
        return var
    
    def natural_to_lambda(self, query: str) -> Tuple[LambdaExpr, Dict[str, Any]]:
        """Convert natural language to lambda expression.
        
        Args:
            query: Natural language query
            
        Returns:
            (Lambda expression, Translation result) tuple
        """
        # If we have a real translation engine, use it
        if self.translation_engine:
            translation_result = self.translation_engine.translate(query).to_dict()
        else:
            # Placeholder mock translation
            translation_result = {
                "query": query,
                "trinity_vector": (0.7, 0.6, 0.8),
                "layers": {
                    "sign": ["example", "query", "tokens"],
                    "mind": [{"category": "ontological", "confidence": 0.8}],
                    "bridge": [{"dimension": "existence", "value": 0.7}]
                }
            }
        
        # Convert translation to lambda expression
        lambda_expr = self._translation_to_lambda(translation_result)
        
        return lambda_expr, translation_result
    
    def lambda_to_natural(self, expr: LambdaExpr) -> str:
        """Convert lambda expression to natural language.
        
        Args:
            expr: Lambda expression
            
        Returns:
            Natural language representation
        """
        # Placeholder implementation
        expr_str = str(expr)
        
        # Very basic conversion (to be enhanced)
        if isinstance(expr, Variable):
            if expr.onto_type == OntologicalType.EXISTENCE:
                return "something exists"
            elif expr.onto_type == OntologicalType.GOODNESS:
                return "something is good"
            elif expr.onto_type == OntologicalType.TRUTH:
                return "something is true"
        
        elif isinstance(expr, Application):
            if isinstance(expr.func, SufficientReason):
                if (expr.func.source_type == OntologicalType.EXISTENCE and 
                    expr.func.target_type == OntologicalType.GOODNESS):
                    return "existence implies goodness"
                elif (expr.func.source_type == OntologicalType.GOODNESS and 
                      expr.func.target_type == OntologicalType.TRUTH):
                    return "goodness implies truth"
        
        # Default fallback
        return f"logical expression: {expr_str}"

# --- 3PDN Bottleneck Interface ---

class PDNBottleneckSolver:
    """Solutions for the 3PDN bottleneck using Lambda targets."""
    
    def __init__(self, bridge: PDNBridge):
        """Initialize bottleneck solver.
        
        Args:
            bridge: PDN bridge instance
        """
        self.bridge = bridge
    
    def optimize_translation_path(self, query: str) -> Dict[str, Any]:
        """Optimize translation path for query.
        
        Args:
            query: Natural language query
            
        Returns:
            Optimization results
        """
        # Convert to lambda expression
        lambda_expr, translation = self.bridge.natural_to_lambda(query)
        
        # Generate optimized lambda
        optimized_expr = self._optimize_lambda(lambda_expr)
        
        # Convert back to 3PDN
        optimized_3pdn = self.bridge.lambda_to_3pdn(optimized_expr)
        
        return {
            "original_query": query,
            "original_translation": translation,
            "optimized_lambda": str(optimized_expr),
            "optimized_3pdn": optimized_3pdn,
            "improvement_metrics": self._calculate_improvement(translation, optimized_3pdn)
        }
    
    def _optimize_lambda(self, expr: LambdaExpr) -> LambdaExpr:
        """Optimize lambda expression.
        
        Args:
            expr: Lambda expression
            
        Returns:
            Optimized expression
        """
        # Placeholder for actual optimization logic
        # This would involve analyzing and restructuring the expression
        # to improve its logical structure, remove redundancies, etc.
        
        # For now, just return the original expression
        return expr
    
    def _calculate_improvement(self, original: Dict[str, Any], optimized: Dict[str, Any]) -> Dict[str, float]:
        """Calculate improvement metrics.
        
        Args:
            original: Original translation
            optimized: Optimized translation
            
        Returns:
            Improvement metrics
        """
        # Placeholder for actual metrics calculation
        return {
            "precision_improvement": 0.2,
            "recall_improvement": 0.15,
            "coherence_improvement": 0.25,
            "computational_efficiency": 0.3
        }

# Example usage
if __name__ == "__main__":
    # Initialize Lambda engine (placeholder)
    lambda_engine = LambdaEngine()
    
    # Initialize bridge (without real translation engine for now)
    bridge = PDNBridge(lambda_engine)
    
    # Create bottleneck solver
    bottleneck_solver = PDNBottleneckSolver(bridge)
    
    # Test with a query
    result = bottleneck_solver.optimize_translation_path("Does goodness require existence?")
    
    print(f"Original query: {result['original_query']}")
    print(f"Optimized λ: {result['optimized_lambda']}")
    print(f"Improvement metrics: {result['improvement_metrics']}")

--- END OF FILE subsystems/tetragnos/lambda_engine/lambda_integration.py ---

--- START OF FILE subsystems/tetragnos/lambda_engine/lambda_parser.py ---

"""Lambda Logos Parser

Implements parsing of Lambda Logos expressions from string representations.
Provides lexical analysis, syntax parsing, and expression construction for
the Lambda Logos calculus.

Dependencies: re, typing, lambda_logos_core
"""

import re
from typing import Dict, List, Tuple, Optional, Union, Any, Iterator
from enum import Enum

# Import from Lambda Logos core (adjust imports as needed)
try:
    from lambda_logos_core import (
        LogosExpr, Variable, Value, Abstraction, Application, 
        SufficientReason, Constant, OntologicalType
    )
except ImportError:
    # Mock classes for standalone development
    class OntologicalType(Enum):
        EXISTENCE = "𝔼"
        GOODNESS = "𝔾"
        TRUTH = "𝕋"
        PROP = "Prop"
    
    class LogosExpr:
        pass
    
    class Variable(LogosExpr):
        def __init__(self, name, ont_type): 
            self.name = name
            self.ont_type = ont_type
    
    class Value(LogosExpr):
        def __init__(self, value, ont_type): 
            self.value = value
            self.ont_type = ont_type
    
    class Constant(LogosExpr):
        def __init__(self, name, const_type): 
            self.name = name
            self.const_type = const_type
    
    class Application(LogosExpr):
        def __init__(self, func, arg): 
            self.func = func
            self.arg = arg
    
    class Abstraction(LogosExpr):
        def __init__(self, var_name, var_type, body): 
            self.var_name = var_name
            self.var_type = var_type
            self.body = body

    class SufficientReason(LogosExpr):
        def __init__(self, source_type, target_type, value): 
            self.source_type = source_type
            self.target_type = target_type
            self.value = value

class TokenType(Enum):
    """Token types for lexical analysis."""
    LAMBDA = "lambda"
    DOT = "dot"
    LPAREN = "lparen"
    RPAREN = "rparen"
    COLON = "colon"
    COMMA = "comma"
    EQUALS = "equals"
    IDENTIFIER = "identifier"
    TYPE = "type"
    NUMBER = "number"
    SR = "sr"
    EOF = "eof"

class Token:
    """Token for lexical analysis."""
    
    def __init__(self, token_type: TokenType, value: str, position: int):
        """Initialize token.
        
        Args:
            token_type: Token type
            value: Token value
            position: Position in input string
        """
        self.token_type = token_type
        self.value = value
        self.position = position
    
    def __str__(self) -> str:
        """Return string representation."""
        return f"{self.token_type.value}({self.value})"

class Lexer:
    """Lexical analyzer for Lambda Logos."""
    
    def __init__(self, input_str: str):
        """Initialize lexer.
        
        Args:
            input_str: Input string to tokenize
        """
        self.input = input_str
        self.position = 0
        self.tokens = []
    
    def tokenize(self) -> List[Token]:
        """Tokenize input string.
        
        Returns:
            List of tokens
        """
        self.tokens = []
        
        while self.position < len(self.input):
            # Skip whitespace
            if self.input[self.position].isspace():
                self.position += 1
                continue
            
            # Check for lambda symbol
            if self.input[self.position] == 'λ' or self.input[self.position:self.position+6] == "lambda":
                if self.input[self.position] == 'λ':
                    self.tokens.append(Token(TokenType.LAMBDA, "λ", self.position))
                    self.position += 1
                else:
                    self.tokens.append(Token(TokenType.LAMBDA, "lambda", self.position))
                    self.position += 6
                continue
            
            # Check for punctuation
            if self.input[self.position] == '.':
                self.tokens.append(Token(TokenType.DOT, ".", self.position))
                self.position += 1
                continue
            
            if self.input[self.position] == '(':
                self.tokens.append(Token(TokenType.LPAREN, "(", self.position))
                self.position += 1
                continue
            
            if self.input[self.position] == ')':
                self.tokens.append(Token(TokenType.RPAREN, ")", self.position))
                self.position += 1
                continue
            
            if self.input[self.position] == ':':
                self.tokens.append(Token(TokenType.COLON, ":", self.position))
                self.position += 1
                continue
            
            if self.input[self.position] == ',':
                self.tokens.append(Token(TokenType.COMMA, ",", self.position))
                self.position += 1
                continue
            
            if self.input[self.position] == '=':
                self.tokens.append(Token(TokenType.EQUALS, "=", self.position))
                self.position += 1
                continue
            
            # Check for SR operator
            if self.input[self.position:self.position+2] == "SR":
                self.tokens.append(Token(TokenType.SR, "SR", self.position))
                self.position += 2
                continue
            
            # Check for type
            if self.input[self.position] in "𝔼𝔾𝕋":
                type_str = self.input[self.position]
                self.tokens.append(Token(TokenType.TYPE, type_str, self.position))
                self.position += 1
                continue
            
            if self.input[self.position:self.position+4] == "Prop":
                self.tokens.append(Token(TokenType.TYPE, "Prop", self.position))
                self.position += 4
                continue
            
            # Check for number
            if self.input[self.position].isdigit():
                start = self.position
                while self.position < len(self.input) and self.input[self.position].isdigit():
                    self.position += 1
                value = self.input[start:self.position]
                self.tokens.append(Token(TokenType.NUMBER, value, start))
                continue
            
            # Check for identifier
            if self.input[self.position].isalnum() or self.input[self.position] == '_':
                start = self.position
                while self.position < len(self.input) and (self.input[self.position].isalnum() or self.input[self.position] == '_'):
                    self.position += 1
                value = self.input[start:self.position]
                self.tokens.append(Token(TokenType.IDENTIFIER, value, start))
                continue
            
            # Skip unknown character
            self.position += 1
        
        # Add EOF token
        self.tokens.append(Token(TokenType.EOF, "", self.position))
        
        return self.tokens

class Parser:
    """Parser for Lambda Logos expressions."""
    
    def __init__(self, lexer: Lexer, env: Optional[Dict[str, Any]] = None):
        """Initialize parser.
        
        Args:
            lexer: Lexer instance
            env: Environment with predefined constants and values
        """
        self.lexer = lexer
        self.tokens = lexer.tokenize()
        self.position = 0
        self.current_token = self.tokens[self.position]
        self.env = env or {}
    
    def parse(self) -> LogosExpr:
        """Parse input string into Lambda Logos expression.
        
        Returns:
            Parsed expression
        """
        expr = self.parse_expr()
        
        # Ensure end of input
        if self.current_token.token_type != TokenType.EOF:
            self._error(f"Expected end of input, got {self.current_token}")
        
        return expr
    
    def parse_expr(self) -> LogosExpr:
        """Parse expression.
        
        Returns:
            Parsed expression
        """
        # Parse abstraction
        if self.current_token.token_type == TokenType.LAMBDA:
            return self.parse_abstraction()
        
        # Parse application or atomic
        return self.parse_application()
    
    def parse_abstraction(self) -> Abstraction:
        """Parse lambda abstraction.
        
        Returns:
            Parsed abstraction
        """
        # Consume lambda
        self._consume(TokenType.LAMBDA)
        
        # Parse variable name
        if self.current_token.token_type != TokenType.IDENTIFIER:
            self._error(f"Expected variable name, got {self.current_token}")
        
        var_name = self.current_token.value
        self._advance()
        
        # Parse type annotation
        self._consume(TokenType.COLON)
        
        if self.current_token.token_type != TokenType.TYPE:
            self._error(f"Expected type, got {self.current_token}")
        
        var_type = self._parse_type()
        
        # Parse body
        self._consume(TokenType.DOT)
        body = self.parse_expr()
        
        return Abstraction(var_name, var_type, body)
    
    def parse_application(self) -> LogosExpr:
        """Parse function application.
        
        Returns:
            Parsed application or atomic expression
        """
        # Parse atomic expression
        left = self.parse_atomic()
        
        # Parse application chain
        while self.current_token.token_type not in [TokenType.RPAREN, TokenType.DOT, TokenType.EOF]:
            right = self.parse_atomic()
            left = Application(left, right)
        
        return left
    
    def parse_atomic(self) -> LogosExpr:
        """Parse atomic expression.
        
        Returns:
            Parsed atomic expression
        """
        # Parse parenthesized expression
        if self.current_token.token_type == TokenType.LPAREN:
            self._consume(TokenType.LPAREN)
            expr = self.parse_expr()
            self._consume(TokenType.RPAREN)
            return expr
        
        # Parse SR operator
        if self.current_token.token_type == TokenType.SR:
            return self.parse_sr()
        
        # Parse variable or constant
        if self.current_token.token_type == TokenType.IDENTIFIER:
            name = self.current_token.value
            self._advance()
            
            # Check for predefined constant or value
            if name in self.env:
                return self.env[name]
            
            # Check for special values
            if name in ["ei", "og", "at"]:
                if name == "ei":
                    return Value(name, OntologicalType.EXISTENCE)
                elif name == "og":
                    return Value(name, OntologicalType.GOODNESS)
                elif name == "at":
                    return Value(name, OntologicalType.TRUTH)
            
            # Default to variable with Prop type
            return Variable(name, OntologicalType.PROP)
        
        self._error(f"Unexpected token: {self.current_token}")
    
    def parse_sr(self) -> SufficientReason:
        """Parse SR operator.
        
        Returns:
            Parsed SR operator
        """
        # Consume SR
        self._consume(TokenType.SR)
        
        # Parse arguments
        self._consume(TokenType.LPAREN)
        
        # Parse source type
        if self.current_token.token_type != TokenType.TYPE:
            self._error(f"Expected type, got {self.current_token}")
        
        source_type = self._parse_type()
        
        self._consume(TokenType.COMMA)
        
        # Parse target type
        if self.current_token.token_type != TokenType.TYPE:
            self._error(f"Expected type, got {self.current_token}")
        
        target_type = self._parse_type()
        
        self._consume(TokenType.COMMA)
        
        # Parse value
        if self.current_token.token_type != TokenType.NUMBER:
            self._error(f"Expected number, got {self.current_token}")
        
        value = int(self.current_token.value)
        self._advance()
        
        self._consume(TokenType.RPAREN)
        
        return SufficientReason(source_type, target_type, value)
    
    def _parse_type(self) -> OntologicalType:
        """Parse type.
        
        Returns:
            Parsed ontological type
        """
        if self.current_token.token_type != TokenType.TYPE:
            self._error(f"Expected type, got {self.current_token}")
        
        type_str = self.current_token.value
        self._advance()
        
        if type_str == "𝔼":
            return OntologicalType.EXISTENCE
        elif type_str == "𝔾":
            return OntologicalType.GOODNESS
        elif type_str == "𝕋":
            return OntologicalType.TRUTH
        elif type_str == "Prop":
            return OntologicalType.PROP
        
        self._error(f"Unknown type: {type_str}")
    
    def _advance(self) -> None:
        """Advance to next token."""
        self.position += 1
        if self.position < len(self.tokens):
            self.current_token = self.tokens[self.position]
    
    def _consume(self, token_type: TokenType) -> None:
        """Consume token of expected type.
        
        Args:
            token_type: Expected token type
            
        Raises:
            ValueError: If current token doesn't match expected type
        """
        if self.current_token.token_type == token_type:
            self._advance()
        else:
            self._error(f"Expected {token_type.value}, got {self.current_token.token_type.value}")
    
    def _error(self, message: str) -> None:
        """Raise parser error.
        
        Args:
            message: Error message
            
        Raises:
            ValueError: With position information
        """
        raise ValueError(f"Parser error at position {self.current_token.position}: {message}")

def parse_expr(input_str: str, env: Optional[Dict[str, Any]] = None) -> LogosExpr:
    """Parse Lambda Logos expression from string.
    
    Args:
        input_str: Input string
        env: Optional environment with predefined constants and values
        
    Returns:
        Parsed expression
        
    Raises:
        ValueError: If parsing fails
    """
    lexer = Lexer(input_str)
    parser = Parser(lexer, env)
    return parser.parse()

# Example usage
if __name__ == "__main__":
    # Test basic parsing
    expr_strs = [
        "λx:𝔼.x",
        "(λx:𝔼.x) ei",
        "SR(𝔼,𝔾,3)",
        "SR(𝔼,𝔾,3) ei",
        "λp:Prop.λq:Prop.(p q)"
    ]
    
    for expr_str in expr_strs:
        try:
            expr = parse_expr(expr_str)
            print(f"Parsed '{expr_str}' as: {expr}")
        except ValueError as e:
            print(f"Error parsing '{expr_str}': {e}")

--- END OF FILE subsystems/tetragnos/lambda_engine/lambda_parser.py ---

--- START OF FILE subsystems/tetragnos/lambda_engine/logos_lambda_core.py ---

# logos_agi_v1/subsystems/tetragnos/lambda_engine/logos_lambda_core.py

import logging
# --- External Library Imports ---
import torch
from sentence_transformers import SentenceTransformer

# --- NEW SCIKIT-LEARN INTEGRATION ---
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
# --- End Imports ---

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - TETRAGNOS_CORE - %(message)s')

class TetragnosCore:
    """
    Core logic for the Tetragnos subsystem. Handles ML/NLP tasks using
    PyTorch, Sentence-Transformers, and Scikit-learn.
    """
    def __init__(self):
        """
        Initializes the core and loads/trains necessary models.
        """
        logging.info("Initializing TetragnosCore...")
        try:
            # PyTorch and Sentence-Transformers setup
            self.device = "cuda" if torch.cuda.is_available() else "cpu"
            logging.info(f"Using device: {self.device}")
            self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2', device=self.device)
            logging.info("SentenceTransformer model loaded successfully.")

            # --- NEW: Train a simple Scikit-learn model on startup ---
            logging.info("Training a simple scikit-learn text classifier...")
            # Sample data for a toy model
            train_data = [
                "This piece of software is amazing and wonderful",
                "I am so happy with this result",
                "This is a terrible, awful bug",
                "I am very angry about this problem"
            ]
            train_labels = ["positive", "positive", "negative", "negative"]
            
            # Create a model pipeline: text -> TF-IDF vectors -> Naive Bayes classifier
            self.sentiment_classifier = make_pipeline(
                TfidfVectorizer(),
                MultinomialNB()
            )
            self.sentiment_classifier.fit(train_data, train_labels)
            logging.info("Scikit-learn sentiment classifier trained successfully.")
            # --- END NEW ---

        except Exception as e:
            logging.error(f"Failed to initialize models: {e}", exc_info=True)
            self.embedding_model = None
            self.sentiment_classifier = None
        
    def execute(self, payload: dict) -> dict:
        """
        Executes a task based on the payload.
        """
        if not all([self.embedding_model, self.sentiment_classifier]):
            raise RuntimeError("TetragnosCore is not properly initialized. A model failed to load.")

        action = payload.get('action')
        logging.info(f"Executing action: {action}")

        if action == 'generate_embedding':
            text = payload.get('text')
            if not text:
                raise ValueError("Payload for 'generate_embedding' must contain 'text'.")
            
            embedding = self.embedding_model.encode(text, convert_to_tensor=True)
            return {"embedding": embedding.cpu().tolist(), "model": "all-MiniLM-L6-v2"}
            
        # --- NEW ACTION USING THE SKLEARN MODEL ---
        elif action == 'classify_sentiment_classic':
            text_to_classify = payload.get('text')
            if not text_to_classify:
                raise ValueError("Payload for 'classify_sentiment_classic' must contain 'text'.")

            # The pipeline handles vectorization and prediction
            prediction = self.sentiment_classifier.predict([text_to_classify])[0]
            probabilities = self.sentiment_classifier.predict_proba([text_to_classify])[0]
            
            confidence = max(probabilities)
            classes = self.sentiment_classifier.classes_

            return {
                "text": text_to_classify,
                "sentiment": prediction,
                "confidence": float(confidence),
                "model": "scikit-learn MultinomialNB"
            }
        # --- END NEW ---
        
        else:
            # Fallback for old sentiment analysis placeholder
            if action == 'sentiment_analysis':
                logging.warning("Action 'sentiment_analysis' is deprecated. Use 'classify_sentiment_classic'.")
                text_ref = payload.get('input_ref', 'no text provided')
                return {"sentiment": "neutral", "confidence": 0.5, "details": f"Analyzed text related to {text_ref}"}

            raise NotImplementedError(f"Action '{action}' is not implemented in TetragnosCore.")

--- END OF FILE subsystems/tetragnos/lambda_engine/logos_lambda_core.py ---

--- START OF FILE subsystems/tetragnos/translation/__init__.py ---



--- END OF FILE subsystems/tetragnos/translation/__init__.py ---

--- START OF FILE subsystems/tetragnos/translation/ml_components.py ---

import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.cluster import DBSCAN
from umap import UMAP
from typing import List, Any

class FeatureExtractor:
    def __init__(self, model_name: str = 'all-MiniLM-L6-v2'):
        try:
            self.model = SentenceTransformer(model_name)
            print(f"[Tetragnos] Loaded sentence transformer model: {model_name}")
        except Exception as e:
            print(f"[Tetragnos] ERROR: Could not load SentenceTransformer model. {e}")
            self.model = None

    def fit_transform(self, texts: list) -> np.ndarray:
        if not self.model:
            return np.zeros((len(texts), 384))
        embeddings = self.model.encode(texts, show_progress_bar=False)
        return embeddings

class ClusterAnalyzer:
    def __init__(self, eps: float = 0.5, min_samples: int = 2, n_neighbors: int=5, n_components: int=2):
        self.eps = eps
        self.min_samples = min_samples
        self.n_neighbors = n_neighbors
        self.n_components = n_components
        self.reducer = None
        self.clusterer = None

    def fit(self, features: np.ndarray) -> dict:
        if features.shape[0] < 2:
             return {'embedding_2d': features.tolist(), 'labels': [0] * features.shape[0]}
        
        n_neighbors_val = min(features.shape[0] - 1, self.n_neighbors)
        if n_neighbors_val < 1: n_neighbors_val = 1
            
        self.reducer = UMAP(n_neighbors=n_neighbors_val, n_components=self.n_components, min_dist=0.1)
        self.clusterer = DBSCAN(eps=self.eps, min_samples=self.min_samples)

        emb2d = self.reducer.fit_transform(features)
        labels = self.clusterer.fit_predict(emb2d)
        return {'embedding_2d': emb2d.tolist(), 'labels': labels.tolist()}

--- END OF FILE subsystems/tetragnos/translation/ml_components.py ---

--- START OF FILE subsystems/tetragnos/translation/pdn_bridge.py ---

"""3PDN Translation Bridge

Bidirectional translation bridge between natural language and Lambda Logos
ontological representations. Implements the 3PDN (SIGN → MIND → BRIDGE)
translation layers with support for trinity vector extraction.

Dependencies: typing, json, re
"""

from typing import Dict, List, Tuple, Optional, Union, Any
import re
import json
import logging

# Import from other modules (adjust paths as needed)
from ..core.lambda_engine import LogosExpr, Variable, Value, Application, SufficientReason, LambdaEngine
from ..ontology.trinity_vector import TrinityVector
from ..utils.data_structures import OntologicalType

logger = logging.getLogger(__name__)

class TranslationResult:
    """Holds results of 3PDN translation."""
    
    def __init__(self, 
                query: str, 
                trinity_vector: TrinityVector,
                layers: Dict[str, Any] = None):
        """Initialize translation result.
        
        Args:
            query: Original query string
            trinity_vector: Extracted trinity vector
            layers: 3PDN layer data
        """
        self.query = query
        self.trinity_vector = trinity_vector
        self.layers = layers or {
            "SIGN": [],       # Lexical/token layer
            "MIND": {},       # Semantic/meaning layer
            "BRIDGE": {}      # Ontological mapping layer
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation."""
        return {
            "query": self.query,
            "trinity_vector": self.trinity_vector.to_dict(),
            "layers": self.layers
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TranslationResult':
        """Create from dictionary representation."""
        trinity_data = data.get("trinity_vector", {})
        if isinstance(trinity_data, dict):
            trinity_vector = TrinityVector.from_dict(trinity_data)
        else:
            trinity_vector = TrinityVector(*trinity_data)
            
        return cls(
            query=data.get("query", ""),
            trinity_vector=trinity_vector,
            layers=data.get("layers", {})
        )

class PDNBridge:
    """Bridge between natural language and Lambda Logos."""
    
    def __init__(self, lambda_engine: Optional[LambdaEngine] = None):
        """Initialize PDN bridge.
        
        Args:
            lambda_engine: Lambda engine instance
        """
        self.lambda_engine = lambda_engine
        
        # Dictionary of common terms for quick translation
        self.common_terms = self._initialize_common_terms()
        
        # Semantic categories for MIND layer
        self.semantic_categories = {
            "ontological": ["exists", "being", "reality", "substance", "exist"],
            "moral": ["good", "evil", "right", "wrong", "ought", "justice"],
            "epistemic": ["know", "truth", "knowledge", "believe", "fact"],
            "causal": ["cause", "effect", "result", "origin", "create"],
            "modal": ["necessary", "possible", "impossible", "contingent"],
            "logical": ["follows", "entails", "implies", "contradicts"]
        }
        
        logger.info("PDN Bridge initialized")
    
    def _initialize_common_terms(self) -> Dict[str, LogosExpr]:
        """Initialize dictionary of common Lambda terms.
        
        Returns:
            Dictionary of common terms
        """
        if not self.lambda_engine:
            logger.warning("Lambda engine not available for term initialization")
            return {}
            
        # Ontological values
        ei_val = self.lambda_engine.create_value("ei", "EXISTENCE")
        og_val = self.lambda_engine.create_value("og", "GOODNESS")
        at_val = self.lambda_engine.create_value("at", "TRUTH")
        
        # Sufficient reason operators
        sr_eg = self.lambda_engine.create_sr("EXISTENCE", "GOODNESS", 3)
        sr_gt = self.lambda_engine.create_sr("GOODNESS", "TRUTH", 2)
        
        # Basic applications
        eg_app = self.lambda_engine.create_application(sr_eg, ei_val)
        gt_app = self.lambda_engine.create_application(sr_gt, og_val)
        
        # Connect dictionary
        return {
            "existence": ei_val,
            "goodness": og_val,
            "truth": at_val,
            "sr_eg": sr_eg,
            "sr_gt": sr_gt,
            "existence_implies_goodness": eg_app,
            "goodness_implies_truth": gt_app
        }
    
    def natural_to_lambda(self, query: str, translation_result: Optional[Dict[str, Any]] = None) -> Tuple[LogosExpr, Dict[str, Any]]:
        """Convert natural language to Lambda expression.
        
        Args:
            query: Natural language query
            translation_result: Optional external translation result
            
        Returns:
            (Lambda expression, Translation result) tuple
        """
        # If translation result provided, use it
        if translation_result:
            return self._translation_to_lambda(translation_result), translation_result
        
        # Otherwise, create a translation result
        translation = self._translate(query)
        lambda_expr = self._translation_to_lambda(translation.to_dict())
        
        return lambda_expr, translation.to_dict()
    
    def _translate(self, query: str) -> TranslationResult:
        """Translate natural language to 3PDN representation.
        
        Args:
            query: Natural language query
            
        Returns:
            Translation result
        """
        # SIGN layer: Extract tokens/keywords
        sign_layer = self._extract_sign_layer(query)
        
        # MIND layer: Map to semantic categories
        mind_layer = self._extract_mind_layer(sign_layer)
        
        # BRIDGE layer: Map to ontological dimensions
        bridge_layer = self._extract_bridge_layer(mind_layer)
        
        # Extract trinity vector
        trinity_vector = TrinityVector(
            existence=bridge_layer.get("existence", 0.5),
            goodness=bridge_layer.get("goodness", 0.5),
            truth=bridge_layer.get("truth", 0.5)
        )
        
        # Create layers dictionary
        layers = {
            "SIGN": sign_layer,
            "MIND": mind_layer,
            "BRIDGE": bridge_layer
        }
        
        return TranslationResult(query, trinity_vector, layers)
    
    def _extract_sign_layer(self, query: str) -> List[str]:
        """Extract SIGN layer (tokens) from query.
        
        Args:
            query: Natural language query
            
        Returns:
            List of tokens
        """
        # Tokenize and normalize
        tokens = [
            token.lower() 
            for token in re.findall(r'\b\w+\b', query)
            if len(token) > 1 and token.lower() not in ["the", "a", "an", "is", "are", "to"]
        ]
        
        return tokens
    
    def _extract_mind_layer(self, sign_layer: List[str]) -> Dict[str, float]:
        """Extract MIND layer (semantic categories) from SIGN layer.
        
        Args:
            sign_layer: SIGN layer tokens
            
        Returns:
            Semantic category weights
        """
        # Initialize categories
        categories = {
            "ontological": 0.0,
            "moral": 0.0,
            "epistemic": 0.0,
            "causal": 0.0,
            "modal": 0.0,
            "logical": 0.0
        }
        
        # Count matches in each category
        for token in sign_layer:
            for category, keywords in self.semantic_categories.items():
                if any(token == keyword or token.startswith(keyword) for keyword in keywords):
                    categories[category] += 1.0
        
        # Normalize to range [0,1]
        total = sum(categories.values())
        if total > 0:
            categories = {k: v / total for k, v in categories.items()}
        else:
            # Default to slight ontological bias if no clear category
            categories["ontological"] = 0.4
            categories["epistemic"] = 0.3
            categories["moral"] = 0.3
        
        return categories
    
    def _extract_bridge_layer(self, mind_layer: Dict[str, float]) -> Dict[str, float]:
        """Extract BRIDGE layer (ontological dimensions) from MIND layer.
        
        Args:
            mind_layer: MIND layer semantic categories
            
        Returns:
            Ontological dimension values
        """
        # Initialize dimensions with neutral values
        dimensions = {
            "existence": 0.5,
            "goodness": 0.5,
            "truth": 0.5
        }
        
        # Apply semantic category weights to dimensions
        # Ontological primarily affects existence
        dimensions["existence"] += 0.4 * mind_layer.get("ontological", 0)
        
        # Moral primarily affects goodness
        dimensions["goodness"] += 0.4 * mind_layer.get("moral", 0)
        
        # Epistemic primarily affects truth
        dimensions["truth"] += 0.4 * mind_layer.get("epistemic", 0)
        
        # Secondary effects
        dimensions["existence"] += 0.2 * mind_layer.get("causal", 0)
        dimensions["truth"] += 0.2 * mind_layer.get("logical", 0)
        
        # Modal affects all dimensions
        modal_factor = 0.1 * mind_layer.get("modal", 0)
        dimensions["existence"] += modal_factor
        dimensions["goodness"] += modal_factor
        dimensions["truth"] += modal_factor
        
        # Ensure values are in range [0,1]
        for dim in dimensions:
            dimensions[dim] = max(0.0, min(1.0, dimensions[dim]))
        
        return dimensions
    
    def _translation_to_lambda(self, translation: Dict[str, Any]) -> LogosExpr:
        """Convert 3PDN translation to Lambda expression.
        
        Args:
            translation: 3PDN translation result
            
        Returns:
            Lambda expression
        """
        if not self.lambda_engine:
            logger.warning("Lambda engine not available for translation")
            return None
            
        # Extract trinity vector
        trinity_data = translation.get("trinity_vector", {})
        if isinstance(trinity_data, dict):
            trinity = (
                trinity_data.get("existence", 0.5),
                trinity_data.get("goodness", 0.5),
                trinity_data.get("truth", 0.5)
            )
        else:
            trinity = trinity_data
        
        # Determine strongest dimension
        dims = [("existence", trinity[0]), ("goodness", trinity[1]), ("truth", trinity[2])]
        primary_dim = max(dims, key=lambda x: x[1])
        
        # Create expression based on primary dimension
        if primary_dim[0] == "existence":
            return self.common_terms["existence"]
        elif primary_dim[0] == "goodness":
            return self.common_terms["goodness"]
        elif primary_dim[0] == "truth":
            return self.common_terms["truth"]
        
        # Default fallback
        return self.common_terms["existence"]
    
    def lambda_to_natural(self, expr: LogosExpr) -> str:
        """Convert Lambda expression to natural language.
        
        Args:
            expr: Lambda expression
            
        Returns:
            Natural language representation
        """
        if not expr:
            return "undefined expression"
            
        # Basic conversion based on expression type
        if isinstance(expr, Variable):
            if expr.onto_type == OntologicalType.EXISTENCE:
                return f"a concept of existence named {expr.name}"
            elif expr.onto_type == OntologicalType.GOODNESS:
                return f"a concept of goodness named {expr.name}"
            elif expr.onto_type == OntologicalType.TRUTH:
                return f"a concept of truth named {expr.name}"
            else:
                return f"a variable named {expr.name}"
        
        elif isinstance(expr, Value):
            if expr.value == "ei":
                return "existence itself"
            elif expr.value == "og":
                return "objective goodness"
            elif expr.value == "at":
                return "absolute truth"
            else:
                return f"the value {expr.value}"
        
        elif isinstance(expr, SufficientReason):
            if (expr.source_type == OntologicalType.EXISTENCE and 
                expr.target_type == OntologicalType.GOODNESS):
                return "the principle that existence implies goodness"
            elif (expr.source_type == OntologicalType.GOODNESS and 
                  expr.target_type == OntologicalType.TRUTH):
                return "the principle that goodness implies truth"
            else:
                return f"a sufficient reason operator from {expr.source_type.value} to {expr.target_type.value}"
        
        elif isinstance(expr, Application):
            # Handle common applications
            func_str = str(expr.func)
            arg_str = str(expr.arg)
            
            # Special case for common patterns
            if func_str == str(self.common_terms.get("sr_eg", "")) and arg_str == "ei:𝔼":
                return "existence implies goodness"
            elif func_str == str(self.common_terms.get("sr_gt", "")) and arg_str == "og:𝔾":
                return "goodness implies truth"
            else:
                func_natural = self.lambda_to_natural(expr.func)
                arg_natural = self.lambda_to_natural(expr.arg)
                return f"the application of {func_natural} to {arg_natural}"
        
        # Default fallback
        return str(expr)
    
    def lambda_to_3pdn(self, expr: LogosExpr) -> Dict[str, Any]:
        """Convert Lambda expression to 3PDN representation.
        
        Args:
            expr: Lambda expression
            
        Returns:
            3PDN representation with SIGN, MIND, BRIDGE layers
        """
        # Extract type information
        type_info = self._extract_type_info(expr)
        
        # Generate semantic categories
        semantic = self._map_to_semantic(type_info)
        
        # Generate ontological dimensions
        ontological = self._map_to_ontological(semantic)
        
        # Create 3PDN representation
        return {
            "layers": {
                "SIGN": self._expr_to_sign(expr),
                "MIND": semantic,
                "BRIDGE": ontological
            },
            "trinity_vector": (
                ontological.get("existence", 0.5),
                ontological.get("goodness", 0.5),
                ontological.get("truth", 0.5)
            ),
            "expr": str(expr)
        }
    
    def _extract_type_info(self, expr: LogosExpr) -> Dict[str, Any]:
        """Extract type information from Lambda expression.
        
        Args:
            expr: Lambda expression
            
        Returns:
            Type information dictionary
        """
        # Simple implementation - would use Lambda engine's type checker in full system
        if isinstance(expr, Variable):
            return {"type": "simple", "value": expr.onto_type}
        
        elif isinstance(expr, Value):
            return {"type": "simple", "value": expr.onto_type}
        
        elif isinstance(expr, SufficientReason):
            return {
                "type": "sr",
                "source": expr.source_type,
                "target": expr.target_type
            }
        
        elif isinstance(expr, Application):
            # Recursive type extraction
            func_type = self._extract_type_info(expr.func)
            arg_type = self._extract_type_info(expr.arg)
            
            return {
                "type": "application",
                "func_type": func_type,
                "arg_type": arg_type
            }
        
        # Default type info
        return {"type": "unknown"}
    
    def _map_to_semantic(self, type_info: Dict[str, Any]) -> Dict[str, float]:
        """Map type information to semantic categories.
        
        Args:
            type_info: Type information
            
        Returns:
            Semantic category weights
        """
        # Initialize with default values
        semantic = {
            "ontological": 0.0,
            "moral": 0.0,
            "epistemic": 0.0,
            "causal": 0.0,
            "modal": 0.0,
            "logical": 0.0
        }
        
        # Map simple types directly
        if type_info.get("type") == "simple":
            value = type_info.get("value")
            if value == OntologicalType.EXISTENCE:
                semantic["ontological"] = 0.8
                semantic["causal"] = 0.2
            elif value == OntologicalType.GOODNESS:
                semantic["moral"] = 0.9
                semantic["ontological"] = 0.1
            elif value == OntologicalType.TRUTH:
                semantic["epistemic"] = 0.7
                semantic["logical"] = 0.3
        
        # Map SR operators
        elif type_info.get("type") == "sr":
            source = type_info.get("source")
            target = type_info.get("target")
            
            if source == OntologicalType.EXISTENCE and target == OntologicalType.GOODNESS:
                semantic["ontological"] = 0.5
                semantic["moral"] = 0.5
            elif source == OntologicalType.GOODNESS and target == OntologicalType.TRUTH:
                semantic["moral"] = 0.4
                semantic["epistemic"] = 0.6
        
        # Map applications
        elif type_info.get("type") == "application":
            # Combine function and argument semantics
            func_type = type_info.get("func_type", {})
            arg_type = type_info.get("arg_type", {})
            
            if func_type.get("type") == "sr" and arg_type.get("type") == "simple":
                # Specific handling for SR applications
                source = func_type.get("source")
                target = func_type.get("target")
                arg_value = arg_type.get("value")
                
                if source == arg_value:
                    # Valid SR application - emphasize target dimension
                    if target == OntologicalType.GOODNESS:
                        semantic["moral"] = 0.7
                        semantic["ontological"] = 0.3
                    elif target == OntologicalType.TRUTH:
                        semantic["epistemic"] = 0.7
                        semantic["moral"] = 0.3
        
        return semantic
    
    def _map_to_ontological(self, semantic: Dict[str, float]) -> Dict[str, float]:
        """Map semantic categories to ontological dimensions.
        
        Args:
            semantic: Semantic categories
            
        Returns:
            Ontological dimension values
        """
        # Initialize with neutral values
        ontological = {
            "existence": 0.5,
            "goodness": 0.5,
            "truth": 0.5
        }
        
        # Apply semantic weights to dimensions
        if semantic.get("ontological", 0) > 0:
            ontological["existence"] = 0.5 + 0.5 * semantic["ontological"]
        
        if semantic.get("moral", 0) > 0:
            ontological["goodness"] = 0.5 + 0.5 * semantic["moral"]
        
        if semantic.get("epistemic", 0) > 0:
            ontological["truth"] = 0.5 + 0.5 * semantic["epistemic"]
        
        if semantic.get("logical", 0) > 0:
            ontological["truth"] = max(ontological["truth"], 0.5 + 0.4 * semantic["logical"])
        
        if semantic.get("causal", 0) > 0:
            ontological["existence"] = max(ontological["existence"], 0.5 + 0.3 * semantic["causal"])
        
        # Ensure values are within [0, 1]
        for key in ontological:
            ontological[key] = min(max(ontological[key], 0), 1)
        
        return ontological
    
    def _expr_to_sign(self, expr: LogosExpr) -> List[str]:
        """Convert expression to SIGN layer tokens.
        
        Args:
            expr: Lambda expression
            
        Returns:
            List of tokens
        """
        # Convert to string and tokenize
        expr_str = str(expr)
        tokens = expr_str.replace('(', ' ( ').replace(')', ' ) ').replace('.', ' . ').split()
        
        # Filter and clean
        return [token for token in tokens if token.strip()]

class PDNBottleneckSolver:
    """Specialized tooling for addressing the 3PDN bottleneck."""
    
    def __init__(self, bridge: PDNBridge):
        """Initialize bottleneck solver.
        
        Args:
            bridge: PDN bridge instance
        """
        self.bridge = bridge
    
    def create_lambda_target(self, query: str, translation_result: Dict[str, Any]) -> Dict[str, Any]:
        """Create optimized Lambda target from translation result.
        
        Args:
            query: Original query
            translation_result: Translation result
            
        Returns:
            Lambda target data
        """
        # Extract trinity vector
        trinity_data = translation_result.get("trinity_vector", {})
        if isinstance(trinity_data, dict):
            trinity = (
                trinity_data.get("existence", 0.5),
                trinity_data.get("goodness", 0.5),
                trinity_data.get("truth", 0.5)
            )
        else:
            trinity = trinity_data
        
        # Determine strongest dimensions (top 2)
        dims = [
            ("existence", trinity[0]), 
            ("goodness", trinity[1]), 
            ("truth", trinity[2])
        ]
        dims.sort(key=lambda x: x[1], reverse=True)
        
        # Create Lambda target based on dimensions
        if dims[0][0] == "existence":
            # Existence-focused
            if dims[1][0] == "goodness" and dims[1][1] > 0.6:
                # Existence implies goodness
                target = self.bridge.common_terms.get("existence_implies_goodness")
            else:
                # Pure existence
                target = self.bridge.common_terms.get("existence")
                
        elif dims[0][0] == "goodness":
            # Goodness-focused
            if dims[1][0] == "truth" and dims[1][1] > 0.6:
                # Goodness implies truth
                target = self.bridge.common_terms.get("goodness_implies_truth")
            else:
                # Pure goodness
                target = self.bridge.common_terms.get("goodness")
                
        elif dims[0][0] == "truth":
            # Truth-focused
            target = self.bridge.common_terms.get("truth")
        
        else:
            # Default fallback
            target = self.bridge.common_terms.get("existence")
        
        # Generate target data
        target_data = {
            "query": query,
            "trinity_vector": trinity,
            "lambda_expr": str(target),
            "lambda_dict": self.bridge.lambda_engine.expr_to_dict(target) if self.bridge.lambda_engine else {},
            "natural": self.bridge.lambda_to_natural(target)
        }
        
        return target_data

--- END OF FILE subsystems/tetragnos/translation/pdn_bridge.py ---

--- START OF FILE subsystems/tetragnos/translation/translation_engine.py ---

"""Translation Engine

Natural language processing component for THŌNOC system.
Provides semantic analysis, sentence decomposition, and ontological mapping
using the SIGN→MIND→BRIDGE translation pipeline.

Dependencies: nltk, spacy, typing
"""

from typing import Dict, List, Tuple, Optional, Union, Any, Set
import re
import logging
import json

try:
    import nltk
    from nltk.tokenize import word_tokenize
    from nltk.corpus import stopwords
    from nltk.stem import WordNetLemmatizer
    NLTK_AVAILABLE = True
except ImportError:
    NLTK_AVAILABLE = False
    
try:
    import spacy
    SPACY_AVAILABLE = True
except ImportError:
    SPACY_AVAILABLE = False

# Import from other modules (adjust paths as needed)
from .pdn_bridge import TranslationResult, PDNBridge
from ..ontology.trinity_vector import TrinityVector
from ..utils.data_structures import OntologicalType

logger = logging.getLogger(__name__)

class TranslationEngine:
    """Main translation engine for natural language processing."""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize translation engine.
        
        Args:
            config: Engine configuration
        """
        self.config = config or {}
        self.semantic_depth = self.config.get("semantic_depth", 3)
        
        # Setup NLP tools if available
        self.nlp = None
        self.lemmatizer = None
        self.stop_words = set()
        
        if SPACY_AVAILABLE:
            try:
                self.nlp = spacy.load("en_core_web_sm")
                logger.info("Loaded spaCy NLP model")
            except:
                logger.warning("Failed to load spaCy model")
        
        if NLTK_AVAILABLE:
            try:
                self.lemmatizer = WordNetLemmatizer()
                self.stop_words = set(stopwords.words('english'))
                logger.info("Loaded NLTK components")
            except:
                logger.warning("Failed to load NLTK components")
        
        # Ontological keyword mappings
        self.ontological_keywords = self._load_ontological_keywords()
        
        # Bridge connection (will be set by PDN bridge)
        self.pdn_bridge = None
        
        logger.info("Translation Engine initialized")
    
    def _load_ontological_keywords(self) -> Dict[str, List[str]]:
        """Load ontological keyword mappings.
        
        Returns:
            Dictionary mapping dimensions to keywords
        """
        # Default keyword mappings
        return {
            "existence": [
                "exist", "being", "reality", "substance", "exists", "real",
                "actual", "physical", "concrete", "material", "presence",
                "manifestation", "occurrence", "phenomenon", "emerge"
            ],
            "goodness": [
                "good", "moral", "ethical", "right", "virtue", "justice",
                "fair", "beneficial", "valuable", "worthy", "excellent",
                "noble", "honorable", "righteous", "benevolent"
            ],
            "truth": [
                "true", "truth", "knowledge", "fact", "correct", "accurate",
                "valid", "genuine", "authentic", "legitimate", "verifiable",
                "provable", "evident", "certain", "definite"
            ]
        }
    
    def set_pdn_bridge(self, bridge: PDNBridge) -> None:
        """Set PDN bridge for lambda integration.
        
        Args:
            bridge: PDN bridge instance
        """
        self.pdn_bridge = bridge
    
    def translate(self, query: str) -> TranslationResult:
        """Translate natural language query to ontological representation.
        
        Args:
            query: Natural language query
            
        Returns:
            Translation result
        """
        # Process query with NLP pipeline
        processed_data = self._process_query(query)
        
        # Extract SIGN layer
        sign_layer = self._extract_sign_layer(processed_data)
        
        # Extract MIND layer
        mind_layer = self._extract_mind_layer(sign_layer, processed_data)
        
        # Extract BRIDGE layer
        bridge_layer = self._extract_bridge_layer(mind_layer)
        
        # Create trinity vector
        trinity_vector = TrinityVector(
            existence=bridge_layer.get("existence", 0.5),
            goodness=bridge_layer.get("goodness", 0.5),
            truth=bridge_layer.get("truth", 0.5)
        )
        
        # Create layers dictionary
        layers = {
            "SIGN": sign_layer,
            "MIND": mind_layer,
            "BRIDGE": bridge_layer
        }
        
        return TranslationResult(query, trinity_vector, layers)
    
    def _process_query(self, query: str) -> Dict[str, Any]:
        """Process query with NLP pipeline.
        
        Args:
            query: Natural language query
            
        Returns:
            Processed data
        """
        processed = {
            "raw_query": query,
            "tokens": [],
            "lemmas": [],
            "pos_tags": [],
            "entities": [],
            "dependencies": []
        }
        
        # Use spaCy if available
        if self.nlp:
            doc = self.nlp(query)
            
            processed["tokens"] = [token.text for token in doc]
            processed["lemmas"] = [token.lemma_ for token in doc]
            processed["pos_tags"] = [(token.text, token.pos_) for token in doc]
            processed["entities"] = [(ent.text, ent.label_) for ent in doc.ents]
            processed["dependencies"] = [(token.text, token.dep_, token.head.text) for token in doc]
            
            return processed
        
        # Fallback to NLTK if available
        if NLTK_AVAILABLE:
            tokens = word_tokenize(query)
            processed["tokens"] = tokens
            
            if self.lemmatizer:
                processed["lemmas"] = [self.lemmatizer.lemmatize(token) for token in tokens]
            
            return processed
        
        # Simple fallback if no NLP tools available
        tokens = query.split()
        processed["tokens"] = tokens
        processed["lemmas"] = tokens
        
        return processed
    
    def _extract_sign_layer(self, processed_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract SIGN layer from processed data.
        
        Args:
            processed_data: Processed query data
            
        Returns:
            SIGN layer representation
        """
        sign_items = []
        
        # Use lemmas if available, otherwise tokens
        lemmas = processed_data.get("lemmas", processed_data.get("tokens", []))
        tokens = processed_data.get("tokens", [])
        pos_tags = dict(processed_data.get("pos_tags", []))
        
        for i, (token, lemma) in enumerate(zip(tokens, lemmas)):
            # Skip stop words
            if token.lower() in self.stop_words:
                continue
                
            # Create sign item
            sign_item = {
                "token": token,
                "lemma": lemma,
                "pos": pos_tags.get(token, "")
            }
            
            # Add ontological dimensions
            sign_item["dimensions"] = self._get_token_dimensions(lemma.lower())
            
            sign_items.append(sign_item)
        
        return sign_items
    
    def _get_token_dimensions(self, lemma: str) -> Dict[str, float]:
        """Get ontological dimension scores for token.
        
        Args:
            lemma: Lemmatized token
            
        Returns:
            Dimension scores
        """
        dimensions = {
            "existence": 0.0,
            "goodness": 0.0,
            "truth": 0.0
        }
        
        # Check each dimension
        for dim, keywords in self.ontological_keywords.items():
            for keyword in keywords:
                if lemma == keyword or lemma.startswith(keyword):
                    dimensions[dim] = 1.0
                    break
        
        return dimensions
    
    def _extract_mind_layer(self, sign_layer: List[Dict[str, Any]], processed_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extract MIND layer from SIGN layer.
        
        Args:
            sign_layer: SIGN layer data
            processed_data: Processed query data
            
        Returns:
            MIND layer representation
        """
        # Initialize categories
        categories = {
            "ontological": 0.0,
            "moral": 0.0,
            "epistemic": 0.0,
            "causal": 0.0,
            "modal": 0.0,
            "logical": 0.0
        }
        
        # Calculate dimension aggregates
        dim_totals = {
            "existence": 0.0,
            "goodness": 0.0,
            "truth": 0.0
        }
        
        for item in sign_layer:
            for dim, score in item["dimensions"].items():
                dim_totals[dim] += score
        
        # Map dimensions to categories
        dim_sum = sum(dim_totals.values())
        if dim_sum > 0:
            # Normalize
            dim_totals = {k: v / dim_sum for k, v in dim_totals.items()}
            
            # Map to categories
            categories["ontological"] = dim_totals["existence"]
            categories["moral"] = dim_totals["goodness"]
            categories["epistemic"] = dim_totals["truth"]
        else:
            # Default bias if no clear dimension
            categories["ontological"] = 0.4
            categories["epistemic"] = 0.3
            categories["moral"] = 0.3
        
        # Enhance with linguistic features (if available)
        self._enhance_with_linguistic_features(categories, processed_data)
        
        return categories
    
    def _enhance_with_linguistic_features(self, categories: Dict[str, float], processed_data: Dict[str, Any]) -> None:
        """Enhance mind categories with linguistic features.
        
        Args:
            categories: Mind categories
            processed_data: Processed query data
        """
        # Extract entity types (if available)
        entities = processed_data.get("entities", [])
        for entity, label in entities:
            if label in ["PERSON", "ORG", "GPE"]:
                # Increase ontological for named entities
                categories["ontological"] += 0.1
            elif label in ["DATE", "TIME", "EVENT"]:
                # Increase causal for temporal entities
                categories["causal"] += 0.1
        
        # Extract dependency relations (if available)
        dependencies = processed_data.get("dependencies", [])
        for token, dep, head in dependencies:
            if dep in ["nsubj", "dobj", "pobj"]:
                # Subject/object relations strengthen ontological
                categories["ontological"] += 0.05
            elif dep in ["acomp", "advmod"]:
                # Qualifiers strengthen moral/evaluative
                categories["moral"] += 0.05
            elif dep in ["conj", "cc"]:
                # Conjunctions strengthen logical
                categories["logical"] += 0.05
            elif dep in ["aux"] and token.lower() in ["must", "should", "could", "may"]:
                # Modal auxiliaries strengthen modal
                categories["modal"] += 0.1
        
        # Normalize categories to ensure they sum to ~1.0
        cat_sum = sum(categories.values())
        if cat_sum > 0:
            factor = 1.0 / cat_sum
            for key in categories:
                categories[key] *= factor
    
    def _extract_bridge_layer(self, mind_layer: Dict[str, float]) -> Dict[str, float]:
        """Extract BRIDGE layer from MIND layer.
        
        Args:
            mind_layer: MIND layer data
            
        Returns:
            BRIDGE layer representation (ontological dimensions)
        """
        # Initialize dimensions with neutral values
        dimensions = {
            "existence": 0.5,
            "goodness": 0.5,
            "truth": 0.5
        }
        
        # Primary mappings
        dimensions["existence"] += 0.4 * mind_layer.get("ontological", 0)
        dimensions["goodness"] += 0.4 * mind_layer.get("moral", 0)
        dimensions["truth"] += 0.4 * mind_layer.get("epistemic", 0)
        
        # Secondary effects
        dimensions["existence"] += 0.2 * mind_layer.get("causal", 0)
        dimensions["truth"] += 0.2 * mind_layer.get("logical", 0)
        
        # Modal affects all dimensions
        modal_factor = 0.1 * mind_layer.get("modal", 0)
        dimensions["existence"] += modal_factor
        dimensions["goodness"] += modal_factor
        dimensions["truth"] += modal_factor
        
        # Ensure values are in range [0,1]
        for dim in dimensions:
            dimensions[dim] = max(0.0, min(1.0, dimensions[dim]))
        
        return dimensions
    
    def get_keywords_dimensions(self, keywords: List[str]) -> Dict[str, Dict[str, float]]:
        """Get ontological dimensions for keywords.
        
        Args:
            keywords: List of keywords
            
        Returns:
            Dictionary mapping keywords to dimension scores
        """
        result = {}
        
        for keyword in keywords:
            dimensions = self._get_token_dimensions(keyword.lower())
            result[keyword] = dimensions
        
        return result
    
    def analyze_query_structure(self, query: str) -> Dict[str, Any]:
        """Analyze query structure for advanced translation.
        
        Args:
            query: Natural language query
            
        Returns:
            Query structure analysis
        """
        # Basic query classification
        is_question = query.endswith("?")
        has_modal = any(word in query.lower() for word in 
                        ["can", "could", "may", "might", "must", "should", "would"])
        has_negation = any(word in query.lower() for word in 
                          ["not", "no", "never", "nothing", "nowhere", "none"])
        
        # Identify query focus
        focus = self._identify_query_focus(query)
        
        return {
            "is_question": is_question,
            "has_modal": has_modal,
            "has_negation": has_negation,
            "focus": focus
        }
    
    def _identify_query_focus(self, query: str) -> str:
        """Identify the focus dimension of query.
        
        Args:
            query: Natural language query
            
        Returns:
            Focus dimension ("existence", "goodness", "truth", or "unknown")
        """
        lower_query = query.lower()
        
        # Check for existence focus
        if any(word in lower_query for word in 
              ["exist", "exists", "existing", "existed", "real", "reality"]):
            return "existence"
        
        # Check for moral/goodness focus
        if any(word in lower_query for word in 
              ["good", "bad", "right", "wrong", "moral", "ethical", "just"]):
            return "goodness"
        
        # Check for truth/knowledge focus
        if any(word in lower_query for word in 
              ["true", "truth", "know", "knowledge", "fact", "correct"]):
            return "truth"
        
        # Default is unknown
        return "unknown"
    
    def translate_to_lambda(self, query: str) -> Tuple[Any, TranslationResult]:
        """Translate query to Lambda expression.
        
        Args:
            query: Natural language query
            
        Returns:
            (Lambda expression, Translation result) tuple
        """
        if not self.pdn_bridge:
            logger.warning("PDN bridge not set, cannot translate to Lambda")
            return None, None
        
        # Translate query to 3PDN/trinity representation
        translation = self.translate(query)
        
        # Use PDN bridge to convert to Lambda
        lambda_expr, _ = self.pdn_bridge.natural_to_lambda(query, translation.to_dict())
        
        return lambda_expr, translation

--- END OF FILE subsystems/tetragnos/translation/translation_engine.py ---

--- START OF FILE subsystems/thonoc/__init__.py ---



--- END OF FILE subsystems/thonoc/__init__.py ---

--- START OF FILE subsystems/thonoc/alignment_protocol.py ---

# logos_agi_v1/subsystems/thonoc/alignment_protocol.py

class AlignmentProtocol:
    """
    Ensures that the actions and outputs of the Thonoc subsystem
    align with the core principles of the AGI.
    Thonoc focuses on symbolic logic and tool use, so its protocol
    is about resource safety and logical consistency.
    """
    def __init__(self):
        # Define safe operational boundaries.
        self.allowed_tools = ['internal_calculator', 'internal_db_query']
        pass

    def validate_input(self, payload: dict) -> bool:
        """
        Check if the requested action is within safe operational parameters.
        """
        # Example check: Ensure only whitelisted tools are being called.
        action = payload.get('action')
        if action == 'use_tool' and payload.get('tool_name') not in self.allowed_tools:
            return False
        
        # Example check: Prevent file system access outside a sandbox.
        if "file_path" in payload and not payload['file_path'].startswith('/sandbox/'):
            return False
        return True

    def validate_output(self, result: dict) -> bool:
        """
        Check if the output is logically sound and doesn't leak sensitive info.
        """
        # Example check: Ensure logical proofs don't contain contradictions.
        if result.get('proof_valid') is False:
            # This might be an acceptable result, but the protocol could flag it for review.
            pass 
        return True

--- END OF FILE subsystems/thonoc/alignment_protocol.py ---

--- START OF FILE subsystems/thonoc/thonoc_nexus.py ---

# thonoc_nexus.py
"""
ThonocNexus: Master orchestrator for the THŌNOC subsystem.
Dispatches queries to Core API, BayesianNexus, FractalNexus, and ForecastingNexus,
aggregates results into a unified report.
Place this file at your project root (e.g. THONOC1/thonoc_nexus.py).
"""
import json
import traceback
from typing import Any, Dict, List, Optional

# Import toolkit-level and core orchestrators
from core.thonoc_core_API import ThonocCoreAPI
from bayesian_predictor.bayesian_nexus import BayesianNexus
from fractal_orbital.fractal_nexus import FractalNexus
from forecasting.forecasting_nexus import ForecastingNexus

class ThonocNexus:  # Your existing class
    def __init__(self):
        # Add Trinity integration
        self.trinity_integration = TrinityNexusIntegration("THONOC")
        
        # Your existing init code
        
    def run(self, query, series=None):  # Your existing method
        # Add Trinity computation
        result = self.trinity_integration.trinity_compute(
            operation=self._process_prediction_request,
            input_data={"query": query, "series": series}
        )
        
        if result is None:
            return {"status": "trinity_validation_failed"}
            
        return result
    
    def _process_prediction_request(self, enhanced_data):
        # Your existing logic
        query = enhanced_data.get('query') or enhanced_data.get('original_data', {}).get('query')
        series = enhanced_data.get('series') or enhanced_data.get('original_data', {}).get('series')
        
        # Your existing processing
        return self.your_existing_prediction_logic(query, series)
        
class TrinityNexusIntegration:
    """Trinity integration system for enhanced subsystem coordination."""
    
    def __init__(self, component_name: str):
        self.component = component_name
        self.trinity_state = {
            "existence": 0.33,
            "goodness": 0.33, 
            "truth": 0.34
        }
        self.validation_active = True
    
    def trinity_compute(self, operation, input_data):
        """Execute Trinity-enhanced computation with validation."""
        try:
            # Enhance input with Trinity context
            enhanced_data = {
                "original_data": input_data,
                "trinity_enhancement": self.trinity_state,
                "component": self.component,
                "validation_timestamp": time.time()
            }
            
            # Execute operation with enhancement
            result = operation(enhanced_data)
            
            # Validate Trinity coherence
            if self._validate_trinity_coherence(result):
                return result
            else:
                return {"status": "trinity_validation_failed", "component": self.component}
                
        except Exception as e:
            return {
                "status": "trinity_computation_error", 
                "error": str(e),
                "component": self.component
            }
    
    def _validate_trinity_coherence(self, result):
        """Validate computational result maintains Trinity coherence."""
        # Basic coherence checks
        if result is None:
            return False
        if isinstance(result, dict) and result.get("status") == "error":
            return False
        return True

class ThonocNexus:
    def __init__(self,
                 bayes_priors: str = 'config/bayes_priors.json',
                 fractal_priors: str = 'config/bayes_priors.json',
                 core_config: Optional[str] = None):
        # Core API (core logic + modal + translation)
        self.core_api   = ThonocCoreAPI(config_path=core_config)
        # Toolkit-level nexuses
        self.bayes_nexus      = BayesianNexus(priors_path=bayes_priors)
        self.fractal_nexus    = FractalNexus(fractal_priors)
        self.forecasting_nexus = ForecastingNexus()

    def run(self, query: str, series: Optional[List[float]] = None) -> Dict[str, Any]:
        report: Dict[str, Any] = {
            'query': query,
            'core': None,
            'bayesian': None,
            'fractal': None,
            'forecasting': None,
            'errors': {}
        }
        # 1) Core run
        try:
            report['core'] = self.core_api.run(query)
        except Exception:
            report['errors']['core'] = traceback.format_exc()

        # 2) Bayesian pipeline
        try:
            report['bayesian'] = self.bayes_nexus.run_pipeline(query)
        except Exception:
            report['errors']['bayesian'] = traceback.format_exc()

        # 3) Fractal pipeline (use first 3 words as keywords)
        keywords: List[str] = query.split()[:3]
        try:
            report['fractal'] = self.fractal_nexus.run_pipeline(keywords)
        except Exception:
            report['errors']['fractal'] = traceback.format_exc()

        # 4) Forecasting pipeline (if series data provided)
        if series is not None:
            try:
                report['forecasting'] = self.forecasting_nexus.run_pipeline(series)
            except Exception:
                report['errors']['forecasting'] = traceback.format_exc()

        return report

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Thonoc Master Nexus')
    parser.add_argument('--query', required=True, help='Input natural-language query')
    parser.add_argument('--series', nargs='+', type=float,
                        help='Optional time series data for forecasting')
    parser.add_argument('--core-config', help='Path to core JSON config')
    parser.add_argument('--bayes-priors', default='config/bayes_priors.json', help='Bayesian priors JSON')
    parser.add_argument('--fractal-priors', default='config/bayes_priors.json', help='Fractal priors JSON')
    args = parser.parse_args()

    nexus = ThonocNexus(
        bayes_priors=args.bayes_priors,
        fractal_priors=args.fractal_priors,
        core_config=args.core_config
    )
    result = nexus.run(args.query, series=args.series)
    print(json.dumps(result, indent=2))
    with open('thonoc_nexus_report.json', 'w') as f:
        json.dump(result, f, indent=2)


--- END OF FILE subsystems/thonoc/thonoc_nexus.py ---

--- START OF FILE subsystems/thonoc/thonoc_worker.py ---

import os
import pika
import json
import time
import logging
import os
import pika
import json
import time
import logging

class AxiomaticProofEngine:
    """Placeholder proof engine for formal verification."""
    def __init__(self, lambda_engine, validator):
        self.lambda_engine = lambda_engine
        self.validator = validator
    
    def construct_proof(self, claim, counter_claims=None):
        """Generate formal proof for logical claim."""
        return {
            "claim": claim,
            "proof_status": "valid",
            "steps": ["Assumption", "Inference", "Conclusion"],
            "counter_claims_addressed": len(counter_claims or [])
        }

class LambdaEngine:
    """Lambda calculus computation engine."""
    def __init__(self):
        self.expression_cache = {}
    
    def evaluate(self, expression):
        """Evaluate lambda expression."""
        return f"λ-result: {expression}"

class UnifiedFormalismValidator:
    """Unified validation for formal operations."""
    def validate_agi_operation(self, payload):
        """Validate operation against formal constraints."""
        return {"authorized": True, "reason": "Validation passed"}

class ThonocWorker:
    def __init__(self, rabbitmq_host='rabbitmq'):
        self.logger = logging.getLogger("THONOC_WORKER")
        
        validator = UnifiedFormalismValidator()
        lambda_engine = LambdaEngine()
        self.proof_engine = AxiomaticProofEngine(lambda_engine, validator)
        
        self.connection, self.channel = self._connect_rabbitmq(rabbitmq_host)
        self._setup_queues()

    def _connect_rabbitmq(self, host):
        for _ in range(10):
            try:
                connection = pika.BlockingConnection(pika.ConnectionParameters(host, heartbeat=600))
                channel = connection.channel()
                self.logger.info("Thonoc worker connected to RabbitMQ.")
                return connection, channel
            except pika.exceptions.AMQPConnectionError:
                self.logger.warning(f"Thonoc worker could not connect. Retrying in 5s...")
                time.sleep(5)
        raise ConnectionError("Thonoc worker could not connect to RabbitMQ")

    def _setup_queues(self):
        self.channel.queue_declare(queue='thonoc_task_queue', durable=True)
        self.channel.queue_declare(queue='task_result_queue', durable=True)

    def process_task(self, ch, method, properties, body):
        task = json.loads(body)
        task_id = task.get('task_id', 'unknown')
        logging.info(f"Thonoc received task {task_id} of type {task.get('type')}")

        result_payload = {}
        status = 'failure'

        try:
            task_type = task.get('type')
            payload = task.get('payload', {})
            
            if task_type == 'construct_proof':
                claim = payload['claim']
                counters = payload.get('counter_claims', [])
                result_payload = self.proof_engine.construct_proof(claim, counters)
                status = 'success'
            
            elif task_type == 'assign_consequence':
                outcome = payload.get('outcome', {})
                prob = outcome.get('probability', 0)
                
                if prob == 0: meta_status = {"possibility": False, "necessity": False}
                elif prob == 1: meta_status = {"possibility": True, "necessity": True}
                else: meta_status = {"possibility": True, "necessity": False}
                
                base_consequence = f"Outcome '{outcome.get('description')}' leads to a state of {outcome.get('alignment')}"
                
                result_payload = {
                    "full_consequence": f"{base_consequence} | Possibility={meta_status['possibility']}, Necessity={meta_status['necessity']}"
                }
                status = 'success'

            else:
                result_payload = {'error': f"Unknown task type: {task_type}"}

        except Exception as e:
            self.logger.error(f"Error processing task {task_id}: {e}", exc_info=True)
            result_payload = {'error': str(e)}

        response = {'subsystem': 'Thonoc', 'task_id': task_id, 'status': status, 'result': result_payload}
        ch.basic_publish(exchange='', routing_key='task_result_queue', body=json.dumps(response), properties=pika.BasicProperties(delivery_mode=2))
        ch.basic_ack(delivery_tag=method.delivery_tag)

    def start(self):
        self.channel.basic_consume(queue='thonoc_task_queue', on_message_callback=self.process_task)
        self.logger.info("Thonoc worker started and waiting for tasks.")
        self.channel.start_consuming()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    worker = ThonocWorker(os.getenv('RABBITMQ_HOST', 'rabbitmq'))
    worker.start()

--- END OF FILE subsystems/thonoc/thonoc_worker.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/1mcmc_engine.py ---

"""
mcmc_engine.py

MCMC Sampling via PyMC3.
"""
import pymc3 as pm
import numpy as np
import logging

logging.basicConfig(level=logging.INFO)
logger=logging.getLogger(__name__)

def run_mcmc_model(model_definition_func, draws=2000, tune=1000, chains=2, cores=1):
    with model_definition_func() as mdl:
        logger.info("Starting MCMC")
        trace = pm.sample(draws=draws, tune=tune, chains=chains, cores=cores, return_inferencedata=True)
        logger.info("MCMC complete")
    return trace

def example_model():
    model = pm.Model()
    with model:
        mu=pm.Normal('mu',0,1)
        obs=pm.Normal('obs',mu,1, observed=np.random.randn(100))
    return model


--- END OF FILE subsystems/thonoc/bayesian_toolkit/1mcmc_engine.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/__init__.py ---



--- END OF FILE subsystems/thonoc/bayesian_toolkit/__init__.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/bayes_update_real_time.py ---

# ts_kalman_filter.py
"""
Forecasting Toolkit: Time Series Kalman
Scaffold + operational code
"""
import numpy as np
from pykalman import KalmanFilter as PKKalmanFilter

class TimeSeriesKalman:
    """
    Wrapper around pykalman's KalmanFilter for time-series smoothing.
    """
    def __init__(self, transition_matrices=None, observation_matrices=None,
                 transition_covariance=None, observation_covariance=None,
                 initial_state_mean=None, initial_state_covariance=None):

        self.kf = PKKalmanFilter(
            transition_matrices=transition_matrices,
            observation_matrices=observation_matrices,
            transition_covariance=transition_covariance,
            observation_covariance=observation_covariance,
            initial_state_mean=initial_state_mean,
            initial_state_covariance=initial_state_covariance
        )

    def fit(self, observations):
        """
        Fit the Kalman filter to observations.
        Returns state means and covariances.
        """
        state_means, state_covariances = self.kf.filter(observations)
        return state_means, state_covariances

    def predict(self, n_steps, current_state=None):
        """
        Predict the next `n_steps` states.
        """
        if current_state is None:
            current_state = self.kf.initial_state_mean

        predictions = []
        for _ in range(n_steps):
            current_state = self.kf.transition_matrices.dot(current_state)
            predictions.append(current_state)
        return np.array(predictions)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/bayes_update_real_time.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_data_parser.py ---

"""
bayesian_data_parser.py

Handles loading/saving of Bayesian prediction data.
"""
import pandas as pd
from pathlib import Path
import json
from typing import Dict, Optional
from datetime import datetime

class BayesianDataHandler:
    def __init__(self, data_dir: str = "data/bayesian_ml"):
        self.data_dir = Path(data_dir)
        self.predictions_file = self.data_dir / "predictions.csv"
        self.metadata_file = self.data_dir / "metadata.json"
        self._init_storage()

    def _init_storage(self):
        self.data_dir.mkdir(parents=True, exist_ok=True)
        if not self.predictions_file.exists():
            pd.DataFrame(columns=[
                'timestamp','prediction','confidence','variance','hypothesis','evidence'
            ]).to_csv(self.predictions_file, index=False)
        if not self.metadata_file.exists():
            meta = {
                'model_version':'1.0',
                'last_updated': datetime.now().isoformat(),
                'performance_metrics': {}, 
                'model_parameters': {}
            }
            self.save_metadata(meta)

    def save_prediction(self, prediction, hypothesis: str) -> None:
        row = {
            'timestamp': prediction.timestamp,
            'prediction': prediction.prediction,
            'confidence': prediction.confidence,
            'variance': prediction.variance,
            'hypothesis': hypothesis,
            'evidence': json.dumps(prediction.metadata['evidence'])
        }
        pd.DataFrame([row]).to_csv(self.predictions_file, mode='a', header=False, index=False)

    def get_predictions(self, start_date: Optional[str]=None,
                              end_date: Optional[str]=None,
                              min_confidence: float=0.0):
        df = pd.read_csv(self.predictions_file, parse_dates=['timestamp'])
        if start_date:
            df = df[df.timestamp >= pd.to_datetime(start_date)]
        if end_date:
            df = df[df.timestamp <= pd.to_datetime(end_date)]
        if min_confidence > 0:
            df = df[df.confidence >= min_confidence]
        return df

    def save_metadata(self, metadata: Dict) -> None:
        metadata['last_updated'] = datetime.now().isoformat()
        with open(self.metadata_file, 'w') as f:
            json.dump(metadata, f, indent=2)

    def get_metadata(self) -> Dict:
        with open(self.metadata_file) as f:
            return json.load(f)

    def cleanup_old_data(self, days_to_keep: int = 30) -> None:
        df = pd.read_csv(self.predictions_file, parse_dates=['timestamp'])
        cutoff = pd.Timestamp.now() - pd.Timedelta(days=days_to_keep)
        df = df[df.timestamp >= cutoff]
        df.to_csv(self.predictions_file, index=False)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_data_parser.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_inferencer.py ---

"""
bayesian_inferencer.py

Inferencer for trinitarian vectors via Bayesian priors.
"""
import json
from typing import Dict, List, Optional, Any, Tuple

class BayesianTrinityInferencer:
    def __init__(self, prior_path: str = "config/bayes_priors.json"):
        try:
            with open(prior_path) as f:
                self.priors: Dict[str,Dict[str,float]] = json.load(f)
        except:
            self.priors = {}

    def infer(self, keywords: List[str], weights: Optional[List[float]]=None) -> Dict[str,Any]:
        if not keywords:
            raise ValueError("Need ≥1 keyword")
        kws = [k.lower() for k in keywords]
        wts = weights if weights and len(weights)==len(kws) else [1.0]*len(kws)
        e_total=g_total=t_total=0.0
        sum_w=0.0
        matches=[]
        for i,k in enumerate(kws):
            entry = self.priors.get(k)
            if entry:
                w=wts[i]
                e_total+=entry.get("E",0)*w
                g_total+=entry.get("G",0)*w
                t_total+=entry.get("T",0)*w
                sum_w+=w
                matches.append(k)
        if sum_w==0:
            raise ValueError("No valid priors")
        e,g,t = e_total/sum_w, g_total/sum_w, t_total/sum_w
        e,g,t = max(0, min(1,e)), max(0,min(1,g)), max(0,min(1,t))
        c = complex(e*t, g)
        return {"trinity":(e,g,t), "c":c, "source_terms":matches}


--- END OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_inferencer.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_nexus.py ---

# bayesian_nexus.py
"""
bayesian_nexus.py

Toolkit-level Nexus orchestrator for Bayesian Predictor.
"""
import traceback
import json

from bayes_update_real_time import run_BERT_pipeline
from bayesian_inferencer import BayesianTrinityInferencer
from hierarchical_bayes_network import execute_HBN
from bayesian_recursion import BayesianMLModel
from mcmc_engine import run_mcmc_model, example_model

class BayesianNexus:
    def __init__(self, priors_path: str):
        self.priors_path = priors_path
        self.inferencer = BayesianTrinityInferencer(prior_path=priors_path)
        self.recursion_model = BayesianMLModel()

    def run_real_time(self, query: str) -> Dict:
        try:
            ok, log = run_BERT_pipeline(self.priors_path, query)
            return {'output': {'success': ok, 'log': log}, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_inferencer(self, query: str) -> Dict:
        try:
            res = self.inferencer.infer(query.split())
            return {'output': res, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_hbn(self, query: str) -> Dict:
        try:
            res = execute_HBN(query)
            # ensure only numeric prediction
            pred = float(res.get('prediction', 0.0))
            return {'output': {'prediction': pred}, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_recursion(self, evidence: Dict) -> Dict:
        try:
            pred = self.recursion_model.update_belief('hypothesis', evidence)
            return {'output': {'prediction': pred.prediction}, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_mcmc(self) -> Dict:
        try:
            trace = run_mcmc_model(example_model)
            return {'output': {'n_samples': len(getattr(trace, 'posterior', []))}, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_pipeline(self, query: str) -> List[Dict]:
        report = []
        # Stage 1: Real-Time
        r1 = self.run_real_time(query)
        report.append({'stage': 'real_time', **r1})

        # Stage 2: Inferencer
        r2 = self.run_inferencer(query)
        report.append({'stage': 'inferencer', **r2})

        # Stage 3: HBN
        r3 = self.run_hbn(query)
        report.append({'stage': 'hbn', **r3})

        # Stage 4: Recursion (uses trinity from inferencer)
        evidence = r2['output'] if r2['output'] else {}
        r4 = self.run_recursion(evidence)
        report.append({'stage': 'recursion', **r4})

        # Stage 5: MCMC
        r5 = self.run_mcmc()
        report.append({'stage': 'mcmc', **r5})

        return report

if __name__ == '__main__':
    import sys
    import pprint

    if len(sys.argv) < 2:
        print("Usage: python bayesian_nexus.py '<query>'")
        sys.exit(1)

    query = sys.argv[1]
    nexus = BayesianNexus(priors_path='config/bayes_priors.json')
    result = nexus.run_pipeline(query)
    pprint.pprint(result)
    # Optionally write to JSON
    with open('bayesian_nexus_report.json', 'w') as f:
        json.dump(result, f, indent=2)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_nexus.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_recursion.py ---

"""
bayesian_recursion.py

Recursive Bayesian belief updater.
"""
import pickle
from pathlib import Path
from dataclasses import dataclass
from typing import Dict, List
from datetime import datetime
import numpy as np
from scipy import stats

@dataclass
class BayesianPrediction:
    prediction: float
    confidence: float
    variance: float
    timestamp: str
    metadata: Dict

@dataclass
class ModelState:
    priors: Dict[str,float]
    likelihoods: Dict[str,float]
    posterior_history: List[Dict[str,float]]
    variance_metrics: Dict[str,float]
    performance_metrics: Dict[str,float]

class BayesianMLModel:
    def __init__(self, data_path: str="data/bayesian_model_data.pkl"):
        self.path = Path(data_path)
        self._load_or_init()

    def _load_or_init(self):
        if self.path.exists():
            try:
                with open(self.path,'rb') as f:
                    self.state: ModelState = pickle.load(f)
            except:
                self._init_state()
        else:
            self._init_state()

    def _init_state(self):
        self.state = ModelState({'default':0.5}, {}, [], {'global_variance':0.0}, {'accuracy':0.0,'confidence':0.0})
        with open(self.path,'wb') as f:
            pickle.dump(self.state,f)

    def update_belief(self, hypothesis: str, evidence: Dict[str,float]) -> BayesianPrediction:
        prior = self.state.priors.get(hypothesis,0.5)
        lik = self._likelihood(hypothesis, evidence)
        marg = self._marginal(evidence)
        post = (prior * lik)/marg if marg else prior
        conf = (post * np.mean(list(evidence.values())) * np.mean(list(self.state.priors.values())))**(1/3)
        vars_ = np.var([p['prediction'] for p in self.state.posterior_history[-10:]]+[post]) if self.state.posterior_history else 0.0
        pred = BayesianPrediction(post,conf,vars_,datetime.now().isoformat(), {'evidence':evidence,'prior':prior})
        self.state.posterior_history.append({'prediction':pred.prediction,'confidence':pred.confidence,'variance':pred.variance,'timestamp':pred.timestamp})
        with open(self.path,'wb') as f:
            pickle.dump(self.state,f)
        return pred

    def _likelihood(self, hypothesis,evidence):
        return np.prod([stats.norm.pdf(val, loc=self.state.likelihoods.get(f"{hypothesis}|{k}",0), scale=0.1)
                        for k,val in evidence.items()]) or 0.5

    def _marginal(self, evidence):
        return sum(self.state.priors[h]*self.update_belief(h,evidence).prediction 
                   for h in self.state.priors)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/bayesian_recursion.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/hierarchical_bayes_network.py ---

"""
hierarchical_bayes_network.py

Hierarchical Bayesian Network analysis.
"""
import json
import re
import numpy as np
from sklearn.linear_model import BayesianRidge
from sklearn.preprocessing import StandardScaler

def load_static_priors(path: str="config/bayes_priors.json") -> dict:
    with open(path) as f:
        return json.load(f)

def query_intent_analyzer(q: str) -> dict:
    flags=[]
    lw=q.lower()
    if any(w in lw for w in ['dragon','wizard','hogwarts']):
        flags.append("fictional")
    return {'is_valid': not flags, 'flags': flags, 'action':("reroute" if flags else "proceed")}

def preprocess_query(q: str) -> str:
    return re.sub(r'[^\\w\\s]','',q.lower())

def run_HBN_analysis(query: str, priors: dict) -> dict:
    cats=list(priors.keys())
    vals=np.array([priors.get(c,0) for c in cats]).reshape(-1,1)
    sc=StandardScaler().fit_transform(vals)
    mdl=BayesianRidge().fit(np.arange(len(cats)).reshape(-1,1), sc.ravel())
    idx=len(preprocess_query(query)) % len(cats)
    return {'prediction': mdl.predict([[idx]])[0], 'category': cats[idx]}

def execute_HBN(query: str) -> dict:
    p=load_static_priors()
    intent=query_intent_analyzer(query)
    if not intent['is_valid']:
        print("Flags:", intent['flags'])
        return {}
    return run_HBN_analysis(query,p)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/hierarchical_bayes_network.py ---

--- START OF FILE subsystems/thonoc/bayesian_toolkit/real_time_bayesian.py ---

# BERT_module.py
# Bayesian Update Real-Time (BURT) Module for TELOS

import json
import math
import os
from datetime import datetime
from typing import List, Dict, Tuple, Optional

# Threshold for report acceptance (matches EGTC threshold logic at 3/4 = 0.75)
CONFIDENCE_THRESHOLD = 0.755
MAX_ITERATIONS = 2

# Load priors
def load_priors(path: str) -> Dict:
    with open(path, 'r') as f:
        return json.load(f)

# Save updated priors
def save_priors(data: Dict, path: str) -> None:
    with open(path, 'w') as f:
        json.dump(data, f, indent=2)

# EGTC scoring system: Existence, Goodness, Truth, Coherence
def score_data_point(dp: Dict) -> int:
    score = 0
    if dp.get("exists", False): score += 1
    if dp.get("good", False): score += 1
    if dp.get("true", False): score += 1
    if dp.get("coherent", False): score += 1
    return score

# Assigns confidence to data points based on EGTC weight and exponential decay
def assign_confidence(score: int) -> float:
    if score < 3:
        return 0.0
    weight_map = {3: 0.755, 4: 1.0}
    return weight_map.get(score, 0.0)

# Run EGTC filter on dataset
def filter_and_score(raw_data: List[Dict]) -> List[Dict]:
    valid_points = []
    for dp in raw_data:
        score = score_data_point(dp)
        confidence = assign_confidence(score)
        if confidence >= CONFIDENCE_THRESHOLD:
            dp["EGTC_score"] = score
            dp["confidence"] = confidence
            valid_points.append(dp)
    return valid_points

# Simulated predictive refinement sweep (placeholder)
def predictive_refinement(query: str, tier: int = 1) -> List[Dict]:
    # Placeholder for real search/ingestion logic
    return []

# Main update routine
def run_BERT_pipeline(priors_path: str, query: str) -> Tuple[bool, str]:
    priors = load_priors(priors_path)
    attempt_log = []
    
    for i in range(MAX_ITERATIONS):
        tier = 1 if i == 0 else 2
        raw_data = predictive_refinement(query, tier=tier)
        filtered = filter_and_score(raw_data)
        
        if not filtered:
            attempt_log.append(f"Attempt {i+1}: No valid priors passed EGTC threshold.")
            continue
        
        average_confidence = sum(dp["confidence"] for dp in filtered) / len(filtered)
        
        if average_confidence >= CONFIDENCE_THRESHOLD:
            for dp in filtered:
                priors[dp["label"]] = {
                    "value": dp["value"],
                    "confidence": dp["confidence"],
                    "timestamp": datetime.utcnow().isoformat(),
                    "EGTC_score": dp["EGTC_score"]
                }
            save_priors(priors, priors_path)
            return True, f"Success on attempt {i+1} with average confidence {average_confidence:.3f}."
        else:
            attempt_log.append(f"Attempt {i+1}: Average confidence {average_confidence:.3f} below threshold.")

    return False, "BERT failed all refinement attempts:\n" + "\n".join(attempt_log)


--- END OF FILE subsystems/thonoc/bayesian_toolkit/real_time_bayesian.py ---

--- START OF FILE subsystems/thonoc/config/__init__.py ---



--- END OF FILE subsystems/thonoc/config/__init__.py ---

--- START OF FILE subsystems/thonoc/config/bayes_priors.json ---

{
  "god": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "trinity": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "father": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "resurrection": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "incarnation": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "eternal": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "divine": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "sacred": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "heaven": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "salvation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "redemption": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "grace": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "revelation": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "miracle": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "prayer": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "faith": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "existence": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "being": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "reality": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "ontology": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "substance": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "creation": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "universe": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "nature": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "metaphysics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "goodness": {
    "E": 0.7,
    "G": 0.95,
    "T": 0.8
  },
  "moral": {
    "E": 0.7,
    "G": 0.9,
    "T": 0.8
  },
  "ethics": {
    "E": 0.7,
    "G": 0.9,
    "T": 0.8
  },
  "virtue": {
    "E": 0.7,
    "G": 0.95,
    "T": 0.8
  },
  "justice": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "love": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.8
  },
  "compassion": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "mercy": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "charity": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "forgiveness": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "hope": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "joy": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.7
  },
  "peace": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "truth": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.95
  },
  "knowledge": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.9
  },
  "wisdom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.9
  },
  "reason": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "rationality": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "logic": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.95
  },
  "understanding": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "intellect": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "proposition": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.9
  },
  "concept": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.85
  },
  "theory": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.85
  },
  "sin": {
    "E": 0.8,
    "G": 0.1,
    "T": 0.8
  },
  "evil": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.7
  },
  "suffering": {
    "E": 0.9,
    "G": 0.2,
    "T": 0.85
  },
  "death": {
    "E": 0.9,
    "G": 0.3,
    "T": 0.85
  },
  "hell": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.7
  },
  "satan": {
    "E": 0.7,
    "G": 0.0,
    "T": 0.7
  },
  "demons": {
    "E": 0.6,
    "G": 0.1,
    "T": 0.6
  },
  "falsehood": {
    "E": 0.6,
    "G": 0.2,
    "T": 0.1
  },
  "deception": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.1
  },
  "corruption": {
    "E": 0.8,
    "G": 0.1,
    "T": 0.6
  },
  "necessity": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.95
  },
  "possibility": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.7
  },
  "contingency": {
    "E": 0.6,
    "G": 0.6,
    "T": 0.6
  },
  "actuality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "potentiality": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.7
  },
  "identity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "contradiction": {
    "E": 0.7,
    "G": 0.2,
    "T": 0.1
  },
  "excluded_middle": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.95
  },
  "infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "transcendence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "immanence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "omnipotence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "omniscience": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "worship": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "communion": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "baptism": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "science": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "mathematics": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.95
  },
  "philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "theology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.9
  },
  "space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "causality": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "determinism": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.8
  },
  "freedom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "will": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "mind": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "soul": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "consciousness": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "family": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.8
  },
  "society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "law": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "authority": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "power": {
    "E": 0.9,
    "G": 0.6,
    "T": 0.8
  },
  "sovereignty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "order": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "chaos": {
    "E": 0.7,
    "G": 0.3,
    "T": 0.6
  },
  "complexity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.8
  },
  "simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "purpose": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "providence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.7
  },
  "judgment": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "trinity_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "3pdn": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "god_jesus": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_christ": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_trinity": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_father": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "god_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "god_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "god_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "god_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "god_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "god_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "god_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "god_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "god_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "god_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "god_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "god_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "god_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "god_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "god_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "god_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "god_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "god_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "god_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "god_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "god_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "god_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "god_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "god_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "god_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "god_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "god_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "god_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "god_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "god_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "god_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "god_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "god_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "god_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "god_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "god_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "god_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "god_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "god_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "god_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "god_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "god_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "god_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "god_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "god_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "god_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "god_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "god_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "god_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "god_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "god_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "god_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "god_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "god_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "god_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "god_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "god_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "god_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "god_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "god_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "god_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "god_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "god_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "god_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "god_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "god_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "god_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "god_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "god_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "god_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "god_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "god_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "god_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "god_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "god_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "god_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "god_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "god_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "god_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "god_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "god_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "god_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "god_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "god_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "god_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "god_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "god_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "god_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "god_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "god_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "god_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "god_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "god_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "god_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "god_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "god_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "god_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "god_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "god_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "god_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "god_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "god_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "god_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "god_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "god_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "jesus_christ": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_trinity": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_father": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "jesus_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "jesus_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "jesus_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "jesus_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "jesus_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "jesus_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "jesus_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "jesus_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "jesus_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "jesus_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "jesus_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "jesus_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "jesus_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "jesus_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "jesus_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "jesus_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "jesus_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "jesus_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "jesus_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "jesus_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "jesus_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "jesus_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "jesus_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "jesus_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "jesus_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "jesus_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "jesus_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "jesus_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "jesus_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "jesus_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "jesus_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "jesus_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "jesus_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "jesus_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "jesus_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "jesus_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "jesus_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "jesus_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "jesus_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "jesus_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "jesus_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "jesus_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "jesus_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "jesus_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "jesus_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "jesus_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "jesus_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "jesus_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "jesus_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "jesus_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "jesus_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "jesus_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "jesus_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "jesus_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "jesus_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "jesus_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "jesus_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "jesus_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "jesus_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "jesus_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "jesus_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "jesus_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "jesus_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "jesus_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "jesus_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "christ_trinity": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ_father": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ_son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "christ_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "christ_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "christ_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "christ_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "christ_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "christ_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "christ_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "christ_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "christ_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "christ_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "christ_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "christ_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "christ_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "christ_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "christ_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "christ_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "christ_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "christ_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "christ_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "christ_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "christ_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "christ_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "christ_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "christ_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "christ_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "christ_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "christ_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "christ_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "christ_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "christ_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "christ_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "christ_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "christ_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "christ_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "christ_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "christ_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "christ_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "christ_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "christ_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "christ_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "christ_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "christ_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "christ_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "christ_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "christ_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "christ_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "christ_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "christ_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "christ_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "christ_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "christ_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "christ_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "christ_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "christ_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "christ_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "christ_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "christ_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "christ_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "christ_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "christ_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "christ_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "christ_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "christ_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "christ_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "christ_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "christ_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "christ_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "christ_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "christ_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "christ_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "christ_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "christ_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "christ_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "christ_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "christ_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "christ_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "christ_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "christ_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "christ_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "christ_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "christ_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "christ_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "christ_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "christ_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "christ_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "christ_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "christ_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "christ_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "christ_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "christ_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "christ_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "christ_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "christ_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "christ_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "christ_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "christ_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "christ_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "christ_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "christ_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "christ_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "christ_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "christ_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "christ_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "christ_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "christ_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "trinity_father": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "trinity_son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "trinity_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "trinity_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "trinity_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "trinity_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "trinity_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "trinity_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "trinity_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "trinity_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "trinity_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "trinity_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "trinity_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "trinity_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "trinity_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "trinity_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "trinity_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "trinity_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "trinity_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "trinity_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "trinity_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "trinity_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "trinity_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "trinity_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "trinity_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "trinity_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "trinity_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "trinity_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "trinity_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "trinity_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "trinity_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "trinity_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "trinity_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "trinity_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "trinity_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "trinity_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "trinity_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "trinity_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "trinity_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "trinity_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "trinity_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "trinity_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "trinity_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "trinity_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "trinity_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "trinity_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "trinity_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "trinity_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "trinity_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "trinity_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "trinity_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "trinity_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "trinity_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "trinity_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "trinity_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "trinity_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "trinity_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "trinity_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "trinity_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "trinity_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "trinity_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "trinity_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "trinity_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "trinity_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "trinity_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "trinity_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "trinity_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "trinity_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "trinity_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "trinity_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "trinity_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "trinity_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "father_son": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "father_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "father_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "father_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "father_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "father_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "father_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "father_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "father_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "father_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "father_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "father_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "father_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "father_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "father_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "father_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "father_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "father_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "father_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "father_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "father_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "father_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "father_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "father_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "father_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "father_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "father_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "father_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "father_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "father_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "father_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "father_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "father_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "father_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "father_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "father_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "father_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "father_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "father_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "father_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "father_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "father_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "father_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "father_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "father_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "father_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "father_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "father_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "father_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "father_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "father_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "father_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "father_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "father_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "father_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "father_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "father_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "father_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "father_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "father_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "father_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "father_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "father_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "father_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "father_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "father_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "father_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "father_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "father_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "father_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "father_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "father_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "father_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "father_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "father_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "father_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "father_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "father_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "father_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "father_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "father_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "father_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "father_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "father_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "father_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "father_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "father_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "father_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "father_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "father_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "father_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "father_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "father_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "father_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "father_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "father_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "father_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "father_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "father_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "father_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "father_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "father_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "father_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "father_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "father_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "father_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "father_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "father_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "son_holy_spirit": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "son_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "son_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "son_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "son_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "son_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "son_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "son_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "son_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "son_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "son_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "son_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "son_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "son_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "son_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "son_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "son_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "son_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "son_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "son_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "son_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "son_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "son_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "son_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "son_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "son_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "son_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "son_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "son_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "son_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "son_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "son_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "son_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "son_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "son_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "son_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "son_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "son_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "son_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "son_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "son_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "son_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "son_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "son_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "son_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "son_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "son_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "son_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "son_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "son_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "son_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "son_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "son_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "son_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "son_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "son_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "son_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "son_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "son_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "son_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "son_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "son_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "son_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "son_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "son_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "son_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "son_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "son_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "son_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "son_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "son_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "son_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "son_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "son_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "son_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "son_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "son_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "son_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "son_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "son_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "son_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "son_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "son_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "son_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "son_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "son_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "son_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "son_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "son_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "son_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "son_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "son_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "son_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "son_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "son_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "son_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "son_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "son_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "son_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "son_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "son_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "son_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "son_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "son_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "son_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "son_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "son_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "holy_spirit_logos": {
    "E": 1.0,
    "G": 1.0,
    "T": 1.0
  },
  "holy_spirit_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "holy_spirit_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "holy_spirit_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "holy_spirit_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "holy_spirit_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "holy_spirit_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "holy_spirit_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "holy_spirit_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "holy_spirit_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "holy_spirit_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "holy_spirit_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "holy_spirit_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "holy_spirit_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "holy_spirit_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "holy_spirit_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "holy_spirit_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "holy_spirit_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "holy_spirit_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "holy_spirit_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "holy_spirit_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "holy_spirit_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "holy_spirit_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "holy_spirit_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "holy_spirit_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "holy_spirit_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "holy_spirit_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "holy_spirit_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "holy_spirit_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "holy_spirit_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "holy_spirit_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "holy_spirit_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "holy_spirit_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "holy_spirit_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "holy_spirit_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "holy_spirit_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "holy_spirit_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "holy_spirit_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "holy_spirit_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "holy_spirit_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "holy_spirit_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "holy_spirit_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "holy_spirit_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "holy_spirit_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "holy_spirit_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "holy_spirit_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "holy_spirit_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "holy_spirit_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "holy_spirit_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "holy_spirit_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "holy_spirit_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "holy_spirit_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "holy_spirit_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "holy_spirit_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "holy_spirit_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "holy_spirit_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "holy_spirit_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "holy_spirit_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "holy_spirit_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "holy_spirit_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "holy_spirit_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "holy_spirit_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "holy_spirit_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "holy_spirit_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "holy_spirit_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "holy_spirit_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "logos_resurrection": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "logos_incarnation": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "logos_eternal": {
    "E": 0.975,
    "G": 0.95,
    "T": 0.975
  },
  "logos_divine": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "logos_sacred": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "logos_heaven": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "logos_salvation": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "logos_redemption": {
    "E": 0.95,
    "G": 0.975,
    "T": 0.95
  },
  "logos_grace": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "logos_revelation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.975
  },
  "logos_miracle": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.925
  },
  "logos_prayer": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "logos_faith": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "logos_existence": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "logos_being": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_reality": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "logos_ontology": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.925
  },
  "logos_substance": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_creation": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.925
  },
  "logos_universe": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "logos_cosmos": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.925
  },
  "logos_world": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_nature": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_metaphysics": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "logos_goodness": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "logos_moral": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "logos_ethics": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.9
  },
  "logos_virtue": {
    "E": 0.85,
    "G": 0.975,
    "T": 0.9
  },
  "logos_justice": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "logos_love": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.9
  },
  "logos_compassion": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "logos_mercy": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "logos_charity": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "logos_forgiveness": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "logos_hope": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "logos_joy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.85
  },
  "logos_peace": {
    "E": 0.9,
    "G": 0.975,
    "T": 0.9
  },
  "logos_truth": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.975
  },
  "logos_knowledge": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.95
  },
  "logos_wisdom": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.95
  },
  "logos_reason": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "logos_rationality": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "logos_logic": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.975
  },
  "logos_understanding": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.95
  },
  "logos_intellect": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "logos_proposition": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "logos_concept": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "logos_theory": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "logos_sin": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "logos_evil": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "logos_suffering": {
    "E": 0.95,
    "G": 0.6,
    "T": 0.925
  },
  "logos_death": {
    "E": 0.95,
    "G": 0.65,
    "T": 0.925
  },
  "logos_hell": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "logos_satan": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "logos_demons": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.8
  },
  "logos_falsehood": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.55
  },
  "logos_deception": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.55
  },
  "logos_corruption": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.8
  },
  "logos_necessity": {
    "E": 0.975,
    "G": 0.925,
    "T": 0.975
  },
  "logos_possibility": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "logos_contingency": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "logos_actuality": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_potentiality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "logos_identity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "logos_contradiction": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.55
  },
  "logos_excluded_middle": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "logos_infinity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "logos_eternity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "logos_transcendence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "logos_immanence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "logos_omnipotence": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "logos_omniscience": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.975
  },
  "logos_omnipresence": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "logos_church": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_worship": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "logos_communion": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "logos_baptism": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "logos_science": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "logos_mathematics": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.975
  },
  "logos_philosophy": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "logos_theology": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "logos_epistemology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "logos_space": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_time": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_causality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "logos_determinism": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "logos_freedom": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "logos_will": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "logos_mind": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "logos_soul": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "logos_consciousness": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "logos_human": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_person": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_individual": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_community": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.9
  },
  "logos_family": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.9
  },
  "logos_society": {
    "E": 0.95,
    "G": 0.85,
    "T": 0.9
  },
  "logos_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "logos_authority": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "logos_power": {
    "E": 0.95,
    "G": 0.8,
    "T": 0.9
  },
  "logos_sovereignty": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "logos_beauty": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "logos_harmony": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "logos_order": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "logos_chaos": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "logos_complexity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "logos_simplicity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "logos_purpose": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "logos_meaning": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "logos_teleology": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "logos_providence": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "logos_destiny": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "logos_judgment": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "logos_reconciliation": {
    "E": 0.925,
    "G": 0.975,
    "T": 0.925
  },
  "logos_trinity_law": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "logos_3pdn": {
    "E": 0.975,
    "G": 0.975,
    "T": 0.975
  },
  "resurrection_incarnation": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "resurrection_eternal": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.95
  },
  "resurrection_divine": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "resurrection_sacred": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "resurrection_heaven": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "resurrection_salvation": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "resurrection_redemption": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "resurrection_grace": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "resurrection_revelation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "resurrection_miracle": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.9
  },
  "resurrection_prayer": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_faith": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "resurrection_existence": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_being": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_reality": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_ontology": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_substance": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_creation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_universe": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_cosmos": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_world": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_nature": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_metaphysics": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_goodness": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_moral": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_ethics": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_virtue": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_justice": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "resurrection_love": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_compassion": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_mercy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "resurrection_charity": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_forgiveness": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "resurrection_hope": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "resurrection_joy": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "resurrection_peace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "resurrection_truth": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.95
  },
  "resurrection_knowledge": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "resurrection_wisdom": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.925
  },
  "resurrection_reason": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_rationality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_logic": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "resurrection_understanding": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_intellect": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "resurrection_proposition": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "resurrection_concept": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_theory": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_sin": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.875
  },
  "resurrection_evil": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "resurrection_suffering": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "resurrection_death": {
    "E": 0.925,
    "G": 0.625,
    "T": 0.9
  },
  "resurrection_hell": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "resurrection_satan": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "resurrection_demons": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "resurrection_falsehood": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.525
  },
  "resurrection_deception": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "resurrection_corruption": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.775
  },
  "resurrection_necessity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "resurrection_possibility": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "resurrection_contingency": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "resurrection_actuality": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_potentiality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "resurrection_identity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_contradiction": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.525
  },
  "resurrection_excluded_middle": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "resurrection_infinity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_eternity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_transcendence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "resurrection_immanence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_omnipotence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "resurrection_omniscience": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.95
  },
  "resurrection_omnipresence": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "resurrection_church": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_worship": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "resurrection_communion": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_baptism": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "resurrection_science": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_mathematics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "resurrection_philosophy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_theology": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_epistemology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "resurrection_space": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_time": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_causality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "resurrection_determinism": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "resurrection_freedom": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_will": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_mind": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_soul": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_consciousness": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_human": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_person": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_individual": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_community": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_family": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.875
  },
  "resurrection_society": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_authority": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_power": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "resurrection_sovereignty": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_beauty": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_harmony": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "resurrection_order": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_chaos": {
    "E": 0.825,
    "G": 0.625,
    "T": 0.775
  },
  "resurrection_complexity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "resurrection_simplicity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "resurrection_purpose": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "resurrection_meaning": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "resurrection_teleology": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "resurrection_providence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "resurrection_destiny": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "resurrection_judgment": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "resurrection_reconciliation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "resurrection_trinity_law": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "resurrection_3pdn": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "incarnation_eternal": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.95
  },
  "incarnation_divine": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "incarnation_sacred": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "incarnation_heaven": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "incarnation_salvation": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "incarnation_redemption": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "incarnation_grace": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "incarnation_revelation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "incarnation_miracle": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.9
  },
  "incarnation_prayer": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_faith": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "incarnation_existence": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_being": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_reality": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_ontology": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_substance": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_creation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_universe": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_cosmos": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_world": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_nature": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_metaphysics": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_goodness": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_moral": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_ethics": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_virtue": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_justice": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "incarnation_love": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_compassion": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_mercy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "incarnation_charity": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_forgiveness": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "incarnation_hope": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "incarnation_joy": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "incarnation_peace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "incarnation_truth": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.95
  },
  "incarnation_knowledge": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "incarnation_wisdom": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.925
  },
  "incarnation_reason": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_rationality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_logic": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "incarnation_understanding": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_intellect": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "incarnation_proposition": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "incarnation_concept": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_theory": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_sin": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.875
  },
  "incarnation_evil": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "incarnation_suffering": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "incarnation_death": {
    "E": 0.925,
    "G": 0.625,
    "T": 0.9
  },
  "incarnation_hell": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "incarnation_satan": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "incarnation_demons": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "incarnation_falsehood": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.525
  },
  "incarnation_deception": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "incarnation_corruption": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.775
  },
  "incarnation_necessity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "incarnation_possibility": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "incarnation_contingency": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "incarnation_actuality": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_potentiality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "incarnation_identity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_contradiction": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.525
  },
  "incarnation_excluded_middle": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "incarnation_infinity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_eternity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_transcendence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "incarnation_immanence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_omnipotence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "incarnation_omniscience": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.95
  },
  "incarnation_omnipresence": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "incarnation_church": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_worship": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "incarnation_communion": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_baptism": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "incarnation_science": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_mathematics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "incarnation_philosophy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_theology": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_epistemology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "incarnation_space": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_time": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_causality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "incarnation_determinism": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "incarnation_freedom": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_will": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_mind": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_soul": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_consciousness": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_human": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_person": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_individual": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_community": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_family": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.875
  },
  "incarnation_society": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_authority": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_power": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "incarnation_sovereignty": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_beauty": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_harmony": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "incarnation_order": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_chaos": {
    "E": 0.825,
    "G": 0.625,
    "T": 0.775
  },
  "incarnation_complexity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "incarnation_simplicity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "incarnation_purpose": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "incarnation_meaning": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "incarnation_teleology": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "incarnation_providence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "incarnation_destiny": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "incarnation_judgment": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "incarnation_reconciliation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "incarnation_trinity_law": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "incarnation_3pdn": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "eternal_divine": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.95
  },
  "eternal_sacred": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "eternal_heaven": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "eternal_salvation": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "eternal_redemption": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "eternal_grace": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "eternal_revelation": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.95
  },
  "eternal_miracle": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "eternal_prayer": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_faith": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "eternal_existence": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_being": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_reality": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_ontology": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_substance": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_creation": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_universe": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_cosmos": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_world": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_nature": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_metaphysics": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_goodness": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_moral": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_ethics": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_virtue": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_justice": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "eternal_love": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_compassion": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_mercy": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "eternal_charity": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_forgiveness": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "eternal_hope": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "eternal_joy": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "eternal_peace": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "eternal_truth": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "eternal_knowledge": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.925
  },
  "eternal_wisdom": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "eternal_reason": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_rationality": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_logic": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "eternal_understanding": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_intellect": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "eternal_proposition": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.925
  },
  "eternal_concept": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_theory": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_sin": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.875
  },
  "eternal_evil": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.825
  },
  "eternal_suffering": {
    "E": 0.925,
    "G": 0.55,
    "T": 0.9
  },
  "eternal_death": {
    "E": 0.925,
    "G": 0.6,
    "T": 0.9
  },
  "eternal_hell": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.825
  },
  "eternal_satan": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.825
  },
  "eternal_demons": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.775
  },
  "eternal_falsehood": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.525
  },
  "eternal_deception": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.525
  },
  "eternal_corruption": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.775
  },
  "eternal_necessity": {
    "E": 0.95,
    "G": 0.875,
    "T": 0.95
  },
  "eternal_possibility": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "eternal_contingency": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "eternal_actuality": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_potentiality": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "eternal_identity": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_contradiction": {
    "E": 0.825,
    "G": 0.55,
    "T": 0.525
  },
  "eternal_excluded_middle": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.95
  },
  "eternal_infinity": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_eternity": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_transcendence": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "eternal_immanence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_omnipotence": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "eternal_omniscience": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "eternal_omnipresence": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.925
  },
  "eternal_church": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_worship": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "eternal_communion": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_baptism": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "eternal_science": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_mathematics": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.95
  },
  "eternal_philosophy": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_theology": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_epistemology": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.925
  },
  "eternal_space": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_time": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_causality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "eternal_determinism": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "eternal_freedom": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_will": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_mind": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_soul": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_consciousness": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_human": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_person": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_individual": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_community": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_family": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "eternal_society": {
    "E": 0.925,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_law": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_authority": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_power": {
    "E": 0.925,
    "G": 0.75,
    "T": 0.875
  },
  "eternal_sovereignty": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_beauty": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_harmony": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "eternal_order": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_chaos": {
    "E": 0.825,
    "G": 0.6,
    "T": 0.775
  },
  "eternal_complexity": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "eternal_simplicity": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "eternal_purpose": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "eternal_meaning": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "eternal_teleology": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "eternal_providence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "eternal_destiny": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "eternal_judgment": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "eternal_reconciliation": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "eternal_trinity_law": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.95
  },
  "eternal_3pdn": {
    "E": 0.95,
    "G": 0.925,
    "T": 0.95
  },
  "divine_sacred": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "divine_heaven": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "divine_salvation": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "divine_redemption": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "divine_grace": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "divine_revelation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "divine_miracle": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.9
  },
  "divine_prayer": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "divine_faith": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "divine_existence": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "divine_being": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_reality": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "divine_ontology": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "divine_substance": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_creation": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "divine_universe": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "divine_cosmos": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "divine_world": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_nature": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_metaphysics": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "divine_goodness": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "divine_moral": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "divine_ethics": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "divine_virtue": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "divine_justice": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "divine_love": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "divine_compassion": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "divine_mercy": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "divine_charity": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "divine_forgiveness": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "divine_hope": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "divine_joy": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "divine_peace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "divine_truth": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.95
  },
  "divine_knowledge": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "divine_wisdom": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.925
  },
  "divine_reason": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "divine_rationality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "divine_logic": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "divine_understanding": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "divine_intellect": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "divine_proposition": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "divine_concept": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "divine_theory": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "divine_sin": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.875
  },
  "divine_evil": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "divine_suffering": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "divine_death": {
    "E": 0.925,
    "G": 0.625,
    "T": 0.9
  },
  "divine_hell": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "divine_satan": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "divine_demons": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "divine_falsehood": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.525
  },
  "divine_deception": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "divine_corruption": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.775
  },
  "divine_necessity": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "divine_possibility": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "divine_contingency": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "divine_actuality": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_potentiality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "divine_identity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "divine_contradiction": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.525
  },
  "divine_excluded_middle": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "divine_infinity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "divine_eternity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "divine_transcendence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "divine_immanence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "divine_omnipotence": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "divine_omniscience": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.95
  },
  "divine_omnipresence": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "divine_church": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_worship": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "divine_communion": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "divine_baptism": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "divine_science": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "divine_mathematics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "divine_philosophy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "divine_theology": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "divine_epistemology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "divine_space": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_time": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_causality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "divine_determinism": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "divine_freedom": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "divine_will": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "divine_mind": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "divine_soul": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "divine_consciousness": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "divine_human": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_person": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_individual": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_community": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "divine_family": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.875
  },
  "divine_society": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "divine_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "divine_authority": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "divine_power": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "divine_sovereignty": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "divine_beauty": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "divine_harmony": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "divine_order": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "divine_chaos": {
    "E": 0.825,
    "G": 0.625,
    "T": 0.775
  },
  "divine_complexity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "divine_simplicity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "divine_purpose": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "divine_meaning": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "divine_teleology": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "divine_providence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "divine_destiny": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "divine_judgment": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "divine_reconciliation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "divine_trinity_law": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "divine_3pdn": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  },
  "sacred_heaven": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "sacred_salvation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "sacred_redemption": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "sacred_grace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "sacred_revelation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "sacred_miracle": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.875
  },
  "sacred_prayer": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_faith": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "sacred_existence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_being": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_reality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_ontology": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_substance": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_creation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_universe": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_cosmos": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_world": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_nature": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_metaphysics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_goodness": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_moral": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_ethics": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_virtue": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_justice": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "sacred_love": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_compassion": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_mercy": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "sacred_charity": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_forgiveness": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "sacred_hope": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "sacred_joy": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.8
  },
  "sacred_peace": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "sacred_truth": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.925
  },
  "sacred_knowledge": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "sacred_wisdom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.9
  },
  "sacred_reason": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_rationality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_logic": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "sacred_understanding": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_intellect": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "sacred_proposition": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "sacred_concept": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_theory": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_sin": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.85
  },
  "sacred_evil": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "sacred_suffering": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.875
  },
  "sacred_death": {
    "E": 0.9,
    "G": 0.625,
    "T": 0.875
  },
  "sacred_hell": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "sacred_satan": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "sacred_demons": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "sacred_falsehood": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.5
  },
  "sacred_deception": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.5
  },
  "sacred_corruption": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.75
  },
  "sacred_necessity": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "sacred_possibility": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "sacred_contingency": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "sacred_actuality": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_potentiality": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "sacred_identity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_contradiction": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.5
  },
  "sacred_excluded_middle": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "sacred_infinity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_eternity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_transcendence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "sacred_immanence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_omnipotence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "sacred_omniscience": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "sacred_omnipresence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "sacred_church": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_worship": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "sacred_communion": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_baptism": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "sacred_science": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_mathematics": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "sacred_philosophy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_theology": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_epistemology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "sacred_space": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_time": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_causality": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "sacred_determinism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "sacred_freedom": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_will": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_mind": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_soul": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_consciousness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_human": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_person": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_individual": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_community": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_family": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "sacred_society": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_authority": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_power": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "sacred_sovereignty": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_beauty": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_harmony": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "sacred_order": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_chaos": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.75
  },
  "sacred_complexity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "sacred_simplicity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "sacred_purpose": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "sacred_meaning": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "sacred_teleology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "sacred_providence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "sacred_destiny": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "sacred_judgment": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "sacred_reconciliation": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "sacred_trinity_law": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "sacred_3pdn": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "heaven_salvation": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "heaven_redemption": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "heaven_grace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "heaven_revelation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "heaven_miracle": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.875
  },
  "heaven_prayer": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_faith": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "heaven_existence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_being": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_reality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_ontology": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_substance": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_creation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_universe": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_cosmos": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_world": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_nature": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_metaphysics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_goodness": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_moral": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_ethics": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_virtue": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_justice": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "heaven_love": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_compassion": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_mercy": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "heaven_charity": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_forgiveness": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "heaven_hope": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "heaven_joy": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.8
  },
  "heaven_peace": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "heaven_truth": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.925
  },
  "heaven_knowledge": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "heaven_wisdom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.9
  },
  "heaven_reason": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_rationality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_logic": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "heaven_understanding": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_intellect": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "heaven_proposition": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "heaven_concept": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_theory": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_sin": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.85
  },
  "heaven_evil": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "heaven_suffering": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.875
  },
  "heaven_death": {
    "E": 0.9,
    "G": 0.625,
    "T": 0.875
  },
  "heaven_hell": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "heaven_satan": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "heaven_demons": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "heaven_falsehood": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.5
  },
  "heaven_deception": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.5
  },
  "heaven_corruption": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.75
  },
  "heaven_necessity": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "heaven_possibility": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "heaven_contingency": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "heaven_actuality": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_potentiality": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "heaven_identity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_contradiction": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.5
  },
  "heaven_excluded_middle": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "heaven_infinity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_eternity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_transcendence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "heaven_immanence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_omnipotence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "heaven_omniscience": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "heaven_omnipresence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "heaven_church": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_worship": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "heaven_communion": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_baptism": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "heaven_science": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_mathematics": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "heaven_philosophy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_theology": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_epistemology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "heaven_space": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_time": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_causality": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "heaven_determinism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "heaven_freedom": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_will": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_mind": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_soul": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_consciousness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_human": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_person": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_individual": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_community": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_family": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "heaven_society": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_authority": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_power": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "heaven_sovereignty": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_beauty": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_harmony": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "heaven_order": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_chaos": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.75
  },
  "heaven_complexity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "heaven_simplicity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "heaven_purpose": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "heaven_meaning": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "heaven_teleology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "heaven_providence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "heaven_destiny": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "heaven_judgment": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "heaven_reconciliation": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "heaven_trinity_law": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "heaven_3pdn": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "salvation_redemption": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "salvation_grace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "salvation_revelation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "salvation_miracle": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.875
  },
  "salvation_prayer": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_faith": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "salvation_existence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_being": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_reality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_ontology": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_substance": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_creation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_universe": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_cosmos": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_world": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_nature": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_metaphysics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_goodness": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_moral": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_ethics": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_virtue": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_justice": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "salvation_love": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_compassion": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_mercy": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "salvation_charity": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_forgiveness": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "salvation_hope": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "salvation_joy": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.8
  },
  "salvation_peace": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "salvation_truth": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.925
  },
  "salvation_knowledge": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "salvation_wisdom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.9
  },
  "salvation_reason": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_rationality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_logic": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "salvation_understanding": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_intellect": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "salvation_proposition": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "salvation_concept": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_theory": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_sin": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.85
  },
  "salvation_evil": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "salvation_suffering": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.875
  },
  "salvation_death": {
    "E": 0.9,
    "G": 0.625,
    "T": 0.875
  },
  "salvation_hell": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "salvation_satan": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "salvation_demons": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "salvation_falsehood": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.5
  },
  "salvation_deception": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.5
  },
  "salvation_corruption": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.75
  },
  "salvation_necessity": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "salvation_possibility": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "salvation_contingency": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "salvation_actuality": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_potentiality": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "salvation_identity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_contradiction": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.5
  },
  "salvation_excluded_middle": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "salvation_infinity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_eternity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_transcendence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "salvation_immanence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_omnipotence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "salvation_omniscience": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "salvation_omnipresence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "salvation_church": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_worship": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "salvation_communion": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_baptism": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "salvation_science": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_mathematics": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "salvation_philosophy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_theology": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_epistemology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "salvation_space": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_time": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_causality": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "salvation_determinism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "salvation_freedom": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_will": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_mind": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_soul": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_consciousness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_human": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_person": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_individual": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_community": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_family": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "salvation_society": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_authority": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_power": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "salvation_sovereignty": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_beauty": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_harmony": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "salvation_order": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_chaos": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.75
  },
  "salvation_complexity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "salvation_simplicity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "salvation_purpose": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "salvation_meaning": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "salvation_teleology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "salvation_providence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "salvation_destiny": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "salvation_judgment": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "salvation_reconciliation": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "salvation_trinity_law": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "salvation_3pdn": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "redemption_grace": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "redemption_revelation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "redemption_miracle": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.875
  },
  "redemption_prayer": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_faith": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "redemption_existence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_being": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_reality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_ontology": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_substance": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_creation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_universe": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_cosmos": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_world": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_nature": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_metaphysics": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_goodness": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_moral": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_ethics": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_virtue": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_justice": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "redemption_love": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_compassion": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_mercy": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "redemption_charity": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_forgiveness": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "redemption_hope": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "redemption_joy": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.8
  },
  "redemption_peace": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "redemption_truth": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.925
  },
  "redemption_knowledge": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "redemption_wisdom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.9
  },
  "redemption_reason": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_rationality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_logic": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "redemption_understanding": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_intellect": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "redemption_proposition": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "redemption_concept": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_theory": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_sin": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.85
  },
  "redemption_evil": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "redemption_suffering": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.875
  },
  "redemption_death": {
    "E": 0.9,
    "G": 0.625,
    "T": 0.875
  },
  "redemption_hell": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "redemption_satan": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "redemption_demons": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "redemption_falsehood": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.5
  },
  "redemption_deception": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.5
  },
  "redemption_corruption": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.75
  },
  "redemption_necessity": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.925
  },
  "redemption_possibility": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "redemption_contingency": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "redemption_actuality": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_potentiality": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "redemption_identity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_contradiction": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.5
  },
  "redemption_excluded_middle": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "redemption_infinity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_eternity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_transcendence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "redemption_immanence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_omnipotence": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "redemption_omniscience": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.925
  },
  "redemption_omnipresence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "redemption_church": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_worship": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "redemption_communion": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_baptism": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "redemption_science": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_mathematics": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "redemption_philosophy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_theology": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_epistemology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "redemption_space": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_time": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_causality": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "redemption_determinism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "redemption_freedom": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_will": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_mind": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_soul": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_consciousness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_human": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_person": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_individual": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_community": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_family": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.85
  },
  "redemption_society": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_authority": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_power": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "redemption_sovereignty": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_beauty": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_harmony": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "redemption_order": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_chaos": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.75
  },
  "redemption_complexity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "redemption_simplicity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "redemption_purpose": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "redemption_meaning": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "redemption_teleology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "redemption_providence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "redemption_destiny": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "redemption_judgment": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "redemption_reconciliation": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "redemption_trinity_law": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "redemption_3pdn": {
    "E": 0.925,
    "G": 0.95,
    "T": 0.925
  },
  "grace_revelation": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "grace_miracle": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "grace_prayer": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "grace_faith": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "grace_existence": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "grace_being": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_reality": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "grace_ontology": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "grace_substance": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_creation": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "grace_universe": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "grace_cosmos": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "grace_world": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_nature": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_metaphysics": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "grace_goodness": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "grace_moral": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "grace_ethics": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "grace_virtue": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "grace_justice": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "grace_love": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.825
  },
  "grace_compassion": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "grace_mercy": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "grace_charity": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "grace_forgiveness": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "grace_hope": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "grace_joy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "grace_peace": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "grace_truth": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.9
  },
  "grace_knowledge": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "grace_wisdom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "grace_reason": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "grace_rationality": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "grace_logic": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "grace_understanding": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "grace_intellect": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "grace_proposition": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "grace_concept": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "grace_theory": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "grace_sin": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "grace_evil": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "grace_suffering": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "grace_death": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.85
  },
  "grace_hell": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "grace_satan": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "grace_demons": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.725
  },
  "grace_falsehood": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.475
  },
  "grace_deception": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "grace_corruption": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.725
  },
  "grace_necessity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "grace_possibility": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "grace_contingency": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.725
  },
  "grace_actuality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_potentiality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "grace_identity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "grace_contradiction": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.475
  },
  "grace_excluded_middle": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "grace_infinity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "grace_eternity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "grace_transcendence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "grace_immanence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "grace_omnipotence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "grace_omniscience": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.9
  },
  "grace_omnipresence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "grace_church": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_worship": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "grace_communion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "grace_baptism": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "grace_science": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "grace_mathematics": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "grace_philosophy": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "grace_theology": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "grace_epistemology": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "grace_space": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_time": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_causality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "grace_determinism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "grace_freedom": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "grace_will": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "grace_mind": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "grace_soul": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "grace_consciousness": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "grace_human": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_person": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_individual": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_community": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "grace_family": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "grace_society": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "grace_law": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "grace_authority": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "grace_power": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "grace_sovereignty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "grace_beauty": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "grace_harmony": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "grace_order": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "grace_chaos": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.725
  },
  "grace_complexity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "grace_simplicity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "grace_purpose": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "grace_meaning": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "grace_teleology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "grace_providence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "grace_destiny": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "grace_judgment": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "grace_reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "grace_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "grace_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "revelation_miracle": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "revelation_prayer": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_faith": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "revelation_existence": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_being": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_reality": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_ontology": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_substance": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_creation": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_universe": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_cosmos": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_world": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_nature": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_metaphysics": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_goodness": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_moral": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_ethics": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_virtue": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_justice": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "revelation_love": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_compassion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_mercy": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "revelation_charity": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_forgiveness": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "revelation_hope": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "revelation_joy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "revelation_peace": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "revelation_truth": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.95
  },
  "revelation_knowledge": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.925
  },
  "revelation_wisdom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "revelation_reason": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_rationality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_logic": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.95
  },
  "revelation_understanding": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_intellect": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "revelation_proposition": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "revelation_concept": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_theory": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_sin": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.875
  },
  "revelation_evil": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.825
  },
  "revelation_suffering": {
    "E": 0.9,
    "G": 0.525,
    "T": 0.9
  },
  "revelation_death": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.9
  },
  "revelation_hell": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.825
  },
  "revelation_satan": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.825
  },
  "revelation_demons": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.775
  },
  "revelation_falsehood": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.525
  },
  "revelation_deception": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.525
  },
  "revelation_corruption": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.775
  },
  "revelation_necessity": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.95
  },
  "revelation_possibility": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "revelation_contingency": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.775
  },
  "revelation_actuality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_potentiality": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "revelation_identity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_contradiction": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.525
  },
  "revelation_excluded_middle": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.95
  },
  "revelation_infinity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_eternity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_transcendence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.925
  },
  "revelation_immanence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_omnipotence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.925
  },
  "revelation_omniscience": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.95
  },
  "revelation_omnipresence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.925
  },
  "revelation_church": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_worship": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "revelation_communion": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_baptism": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "revelation_science": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_mathematics": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.95
  },
  "revelation_philosophy": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_theology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_epistemology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "revelation_space": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_time": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_causality": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.9
  },
  "revelation_determinism": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "revelation_freedom": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_will": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_mind": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_soul": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_consciousness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_human": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_person": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_individual": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_community": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_family": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "revelation_society": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_law": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_authority": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_power": {
    "E": 0.9,
    "G": 0.725,
    "T": 0.875
  },
  "revelation_sovereignty": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_beauty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_harmony": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "revelation_order": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_chaos": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.775
  },
  "revelation_complexity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "revelation_simplicity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "revelation_purpose": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "revelation_meaning": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "revelation_teleology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "revelation_providence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "revelation_destiny": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "revelation_judgment": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "revelation_reconciliation": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "revelation_trinity_law": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "revelation_3pdn": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.95
  },
  "miracle_prayer": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_faith": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "miracle_existence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_being": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_reality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_ontology": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_substance": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_creation": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_universe": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_cosmos": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_world": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_nature": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_metaphysics": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_goodness": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_moral": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_ethics": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_virtue": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_justice": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "miracle_love": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_compassion": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_mercy": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "miracle_charity": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_forgiveness": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "miracle_hope": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "miracle_joy": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.775
  },
  "miracle_peace": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "miracle_truth": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "miracle_knowledge": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "miracle_wisdom": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "miracle_reason": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_rationality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_logic": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "miracle_understanding": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_intellect": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "miracle_proposition": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "miracle_concept": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_theory": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_sin": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.825
  },
  "miracle_evil": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.775
  },
  "miracle_suffering": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.85
  },
  "miracle_death": {
    "E": 0.9,
    "G": 0.6,
    "T": 0.85
  },
  "miracle_hell": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.775
  },
  "miracle_satan": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "miracle_demons": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.725
  },
  "miracle_falsehood": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.475
  },
  "miracle_deception": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.475
  },
  "miracle_corruption": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.725
  },
  "miracle_necessity": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "miracle_possibility": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "miracle_contingency": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.725
  },
  "miracle_actuality": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_potentiality": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "miracle_identity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_contradiction": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.475
  },
  "miracle_excluded_middle": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "miracle_infinity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_eternity": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_transcendence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "miracle_immanence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_omnipotence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "miracle_omniscience": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "miracle_omnipresence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "miracle_church": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_worship": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "miracle_communion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_baptism": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "miracle_science": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_mathematics": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "miracle_philosophy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_theology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_epistemology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "miracle_space": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_time": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_causality": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "miracle_determinism": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "miracle_freedom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_will": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_mind": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_soul": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_consciousness": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_human": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_person": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_individual": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_community": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_family": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.825
  },
  "miracle_society": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_authority": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_power": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "miracle_sovereignty": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_beauty": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_harmony": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "miracle_order": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_chaos": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.725
  },
  "miracle_complexity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "miracle_simplicity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "miracle_purpose": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "miracle_meaning": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "miracle_teleology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "miracle_providence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "miracle_destiny": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "miracle_judgment": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "miracle_reconciliation": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "miracle_trinity_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.9
  },
  "miracle_3pdn": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.9
  },
  "prayer_faith": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "prayer_existence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_being": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_reality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_ontology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_substance": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_creation": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_universe": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_cosmos": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_world": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_nature": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_metaphysics": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_goodness": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_moral": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_ethics": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_virtue": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_justice": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "prayer_love": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_compassion": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_mercy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "prayer_charity": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_forgiveness": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "prayer_hope": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.775
  },
  "prayer_joy": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "prayer_peace": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "prayer_truth": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "prayer_knowledge": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "prayer_wisdom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "prayer_reason": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_rationality": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_logic": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "prayer_understanding": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_intellect": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "prayer_proposition": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "prayer_concept": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_theory": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_sin": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "prayer_evil": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "prayer_suffering": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "prayer_death": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.825
  },
  "prayer_hell": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "prayer_satan": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "prayer_demons": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.7
  },
  "prayer_falsehood": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "prayer_deception": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "prayer_corruption": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "prayer_necessity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "prayer_possibility": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "prayer_contingency": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.7
  },
  "prayer_actuality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_potentiality": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "prayer_identity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_contradiction": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.45
  },
  "prayer_excluded_middle": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "prayer_infinity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_eternity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_transcendence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "prayer_immanence": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_omnipotence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "prayer_omniscience": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "prayer_omnipresence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "prayer_church": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_worship": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "prayer_communion": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_baptism": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "prayer_science": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_mathematics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "prayer_philosophy": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_theology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_epistemology": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "prayer_space": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_time": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_causality": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "prayer_determinism": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "prayer_freedom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_will": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_mind": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_soul": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_consciousness": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_human": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_person": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_individual": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_community": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_family": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "prayer_society": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_law": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_authority": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_power": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "prayer_sovereignty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "prayer_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "prayer_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "prayer_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "prayer_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "prayer_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "prayer_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "prayer_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "prayer_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "prayer_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "prayer_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "prayer_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "prayer_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "faith_existence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "faith_being": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_reality": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "faith_ontology": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "faith_substance": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_creation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "faith_universe": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "faith_cosmos": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "faith_world": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_nature": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_metaphysics": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "faith_goodness": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "faith_moral": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "faith_ethics": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "faith_virtue": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "faith_justice": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "faith_love": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "faith_compassion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "faith_mercy": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "faith_charity": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "faith_forgiveness": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "faith_hope": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "faith_joy": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.775
  },
  "faith_peace": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "faith_truth": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "faith_knowledge": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "faith_wisdom": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "faith_reason": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "faith_rationality": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "faith_logic": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "faith_understanding": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "faith_intellect": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "faith_proposition": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.875
  },
  "faith_concept": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.85
  },
  "faith_theory": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.85
  },
  "faith_sin": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.825
  },
  "faith_evil": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.775
  },
  "faith_suffering": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.85
  },
  "faith_death": {
    "E": 0.875,
    "G": 0.6,
    "T": 0.85
  },
  "faith_hell": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.775
  },
  "faith_satan": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "faith_demons": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.725
  },
  "faith_falsehood": {
    "E": 0.725,
    "G": 0.55,
    "T": 0.475
  },
  "faith_deception": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.475
  },
  "faith_corruption": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.725
  },
  "faith_necessity": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "faith_possibility": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.775
  },
  "faith_contingency": {
    "E": 0.725,
    "G": 0.75,
    "T": 0.725
  },
  "faith_actuality": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_potentiality": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.775
  },
  "faith_identity": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "faith_contradiction": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.475
  },
  "faith_excluded_middle": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "faith_infinity": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "faith_eternity": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "faith_transcendence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "faith_immanence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "faith_omnipotence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "faith_omniscience": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "faith_omnipresence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "faith_church": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_worship": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "faith_communion": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "faith_baptism": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "faith_science": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "faith_mathematics": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "faith_philosophy": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "faith_theology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "faith_epistemology": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.875
  },
  "faith_space": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_time": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_causality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "faith_determinism": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "faith_freedom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "faith_will": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "faith_mind": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "faith_soul": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "faith_consciousness": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "faith_human": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_person": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_individual": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_community": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "faith_family": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "faith_society": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "faith_law": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "faith_authority": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "faith_power": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "faith_sovereignty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "faith_beauty": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "faith_harmony": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "faith_order": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "faith_chaos": {
    "E": 0.775,
    "G": 0.6,
    "T": 0.725
  },
  "faith_complexity": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "faith_simplicity": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "faith_purpose": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "faith_meaning": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "faith_teleology": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "faith_providence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "faith_destiny": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "faith_judgment": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "faith_reconciliation": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "faith_trinity_law": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "faith_3pdn": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "existence_being": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_reality": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "existence_ontology": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "existence_substance": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_creation": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "existence_universe": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "existence_cosmos": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "existence_world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "existence_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "existence_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "existence_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "existence_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "existence_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "existence_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "existence_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "existence_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "existence_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "existence_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "existence_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "existence_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "existence_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "existence_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "existence_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "existence_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "existence_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "existence_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "existence_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.9
  },
  "existence_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "existence_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "existence_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "existence_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "existence_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "existence_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.825
  },
  "existence_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "existence_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.85
  },
  "existence_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.85
  },
  "existence_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "existence_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.775
  },
  "existence_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "existence_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "existence_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.475
  },
  "existence_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.725
  },
  "existence_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.9
  },
  "existence_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "existence_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.725
  },
  "existence_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "existence_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "existence_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.475
  },
  "existence_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "existence_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "existence_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "existence_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "existence_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "existence_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "existence_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "existence_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "existence_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "existence_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "existence_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "existence_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "existence_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "existence_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "existence_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "existence_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "existence_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "existence_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.825
  },
  "existence_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "existence_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "existence_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "existence_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "existence_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "existence_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "existence_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "existence_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "existence_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "existence_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "existence_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.825
  },
  "existence_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "existence_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "existence_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "existence_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "existence_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.725
  },
  "existence_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "existence_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "existence_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "existence_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "existence_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "existence_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "existence_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.775
  },
  "existence_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "existence_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "existence_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "existence_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "being_reality": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "being_ontology": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "being_substance": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_creation": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "being_universe": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "being_cosmos": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "being_world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "being_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "being_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "being_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "being_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "being_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "being_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "being_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "being_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "being_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "being_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "being_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "being_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "being_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "being_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "being_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "being_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "being_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "being_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "being_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "being_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "being_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "being_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "being_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "being_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "being_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "being_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "being_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "being_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "being_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "being_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "being_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "being_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "being_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "being_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "being_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "being_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "being_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "being_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "being_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "being_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "being_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "being_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "being_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "being_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "being_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "being_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "being_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "being_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "being_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "being_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "being_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "being_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "being_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "being_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "being_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "being_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "being_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "being_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "being_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "being_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "being_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "being_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "being_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "being_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "being_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "being_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "being_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "being_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "being_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "being_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "being_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "being_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "being_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "being_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "being_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "being_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "being_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "being_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "being_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "being_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "being_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "being_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "being_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "being_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "being_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "reality_ontology": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "reality_substance": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_creation": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "reality_universe": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "reality_cosmos": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "reality_world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "reality_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "reality_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "reality_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "reality_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "reality_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "reality_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "reality_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "reality_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "reality_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "reality_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "reality_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "reality_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "reality_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "reality_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "reality_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "reality_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "reality_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "reality_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "reality_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.9
  },
  "reality_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "reality_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "reality_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "reality_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "reality_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "reality_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.825
  },
  "reality_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "reality_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.85
  },
  "reality_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.85
  },
  "reality_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "reality_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.775
  },
  "reality_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "reality_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "reality_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.475
  },
  "reality_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.725
  },
  "reality_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.9
  },
  "reality_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "reality_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.725
  },
  "reality_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "reality_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "reality_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.475
  },
  "reality_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "reality_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "reality_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "reality_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "reality_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "reality_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "reality_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "reality_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "reality_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "reality_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "reality_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "reality_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "reality_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "reality_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reality_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "reality_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "reality_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "reality_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.825
  },
  "reality_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "reality_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "reality_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "reality_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "reality_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "reality_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "reality_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "reality_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "reality_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "reality_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "reality_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.825
  },
  "reality_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "reality_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "reality_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "reality_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "reality_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.725
  },
  "reality_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "reality_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reality_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "reality_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "reality_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "reality_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "reality_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.775
  },
  "reality_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "reality_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "reality_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "reality_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "ontology_substance": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_creation": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_universe": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_cosmos": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "ontology_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "ontology_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "ontology_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "ontology_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "ontology_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "ontology_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "ontology_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "ontology_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "ontology_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "ontology_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.9
  },
  "ontology_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "ontology_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "ontology_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "ontology_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "ontology_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.825
  },
  "ontology_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "ontology_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.85
  },
  "ontology_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.85
  },
  "ontology_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "ontology_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.775
  },
  "ontology_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "ontology_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "ontology_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.475
  },
  "ontology_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.725
  },
  "ontology_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.9
  },
  "ontology_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "ontology_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.725
  },
  "ontology_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.775
  },
  "ontology_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.475
  },
  "ontology_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "ontology_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "ontology_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "ontology_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "ontology_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "ontology_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "ontology_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "ontology_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "ontology_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.9
  },
  "ontology_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "ontology_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.85
  },
  "ontology_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.825
  },
  "ontology_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "ontology_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.825
  },
  "ontology_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "ontology_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.725
  },
  "ontology_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "ontology_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "ontology_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "ontology_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "ontology_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "ontology_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "ontology_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.775
  },
  "ontology_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "ontology_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "ontology_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "ontology_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "substance_creation": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "substance_universe": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "substance_cosmos": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "substance_world": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "substance_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "substance_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "substance_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "substance_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "substance_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "substance_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "substance_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "substance_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "substance_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "substance_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "substance_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "substance_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "substance_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "substance_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "substance_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "substance_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "substance_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "substance_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "substance_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "substance_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "substance_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "substance_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "substance_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "substance_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "substance_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "substance_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "substance_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "substance_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "substance_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "substance_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "substance_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "substance_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "substance_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "substance_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "substance_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "substance_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "substance_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "substance_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "substance_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "substance_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "substance_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "substance_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "substance_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "substance_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "substance_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "substance_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "substance_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "substance_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "substance_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "substance_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "substance_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "substance_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "substance_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "substance_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "substance_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "substance_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "substance_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "substance_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "substance_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "substance_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "substance_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "substance_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "substance_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "substance_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "substance_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "substance_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "substance_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "substance_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "substance_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "substance_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "substance_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "substance_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "substance_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "substance_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "substance_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "substance_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "substance_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "substance_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "substance_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "substance_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "substance_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "substance_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "substance_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "substance_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "substance_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "substance_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "substance_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "substance_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "substance_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "creation_universe": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "creation_cosmos": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "creation_world": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "creation_nature": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_metaphysics": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "creation_goodness": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "creation_moral": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "creation_ethics": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "creation_virtue": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "creation_justice": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "creation_love": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "creation_compassion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "creation_mercy": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "creation_charity": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "creation_forgiveness": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "creation_hope": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "creation_joy": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.775
  },
  "creation_peace": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "creation_truth": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "creation_knowledge": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "creation_wisdom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "creation_reason": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "creation_rationality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "creation_logic": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "creation_understanding": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "creation_intellect": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "creation_proposition": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "creation_concept": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "creation_theory": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "creation_sin": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.825
  },
  "creation_evil": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.775
  },
  "creation_suffering": {
    "E": 0.9,
    "G": 0.525,
    "T": 0.85
  },
  "creation_death": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.85
  },
  "creation_hell": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.775
  },
  "creation_satan": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.775
  },
  "creation_demons": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.725
  },
  "creation_falsehood": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.475
  },
  "creation_deception": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.475
  },
  "creation_corruption": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.725
  },
  "creation_necessity": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.9
  },
  "creation_possibility": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.775
  },
  "creation_contingency": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.725
  },
  "creation_actuality": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_potentiality": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.775
  },
  "creation_identity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "creation_contradiction": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.475
  },
  "creation_excluded_middle": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "creation_infinity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "creation_eternity": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "creation_transcendence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "creation_immanence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "creation_omnipotence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "creation_omniscience": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "creation_omnipresence": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "creation_church": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_worship": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "creation_communion": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "creation_baptism": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "creation_science": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "creation_mathematics": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "creation_philosophy": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "creation_theology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "creation_epistemology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "creation_space": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "creation_time": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "creation_causality": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.85
  },
  "creation_determinism": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.825
  },
  "creation_freedom": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "creation_will": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "creation_mind": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "creation_soul": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "creation_consciousness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "creation_human": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "creation_person": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_individual": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_community": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "creation_family": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.825
  },
  "creation_society": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.825
  },
  "creation_law": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "creation_authority": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "creation_power": {
    "E": 0.9,
    "G": 0.725,
    "T": 0.825
  },
  "creation_sovereignty": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "creation_beauty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "creation_harmony": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "creation_order": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "creation_chaos": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.725
  },
  "creation_complexity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "creation_simplicity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "creation_purpose": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "creation_meaning": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "creation_teleology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "creation_providence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "creation_destiny": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.775
  },
  "creation_judgment": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "creation_reconciliation": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.85
  },
  "creation_trinity_law": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "creation_3pdn": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.9
  },
  "universe_cosmos": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "universe_world": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "universe_nature": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_metaphysics": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "universe_goodness": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "universe_moral": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "universe_ethics": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "universe_virtue": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "universe_justice": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "universe_love": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "universe_compassion": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "universe_mercy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "universe_charity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "universe_forgiveness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "universe_hope": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "universe_joy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "universe_peace": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "universe_truth": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "universe_knowledge": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "universe_wisdom": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "universe_reason": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "universe_rationality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "universe_logic": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "universe_understanding": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "universe_intellect": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "universe_proposition": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "universe_concept": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "universe_theory": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "universe_sin": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.825
  },
  "universe_evil": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "universe_suffering": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.85
  },
  "universe_death": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.85
  },
  "universe_hell": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "universe_satan": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "universe_demons": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.725
  },
  "universe_falsehood": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.475
  },
  "universe_deception": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.475
  },
  "universe_corruption": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.725
  },
  "universe_necessity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "universe_possibility": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "universe_contingency": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.725
  },
  "universe_actuality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_potentiality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "universe_identity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "universe_contradiction": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.475
  },
  "universe_excluded_middle": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "universe_infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "universe_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "universe_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "universe_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "universe_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "universe_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "universe_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "universe_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "universe_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "universe_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "universe_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "universe_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "universe_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "universe_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "universe_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "universe_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "universe_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "universe_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "universe_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "universe_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "universe_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "universe_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "universe_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "universe_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "universe_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "universe_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "universe_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "universe_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "universe_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "universe_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "universe_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "universe_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "universe_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "universe_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "universe_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "universe_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.725
  },
  "universe_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "universe_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "universe_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "universe_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "universe_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "universe_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "universe_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "universe_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "universe_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "universe_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "universe_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "cosmos_world": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_nature": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_metaphysics": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "cosmos_goodness": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_moral": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_ethics": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_virtue": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_justice": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "cosmos_love": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_compassion": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_mercy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "cosmos_charity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_forgiveness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "cosmos_hope": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "cosmos_joy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "cosmos_peace": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "cosmos_truth": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "cosmos_knowledge": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "cosmos_wisdom": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "cosmos_reason": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_rationality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_logic": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "cosmos_understanding": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_intellect": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "cosmos_proposition": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "cosmos_concept": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "cosmos_theory": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "cosmos_sin": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.825
  },
  "cosmos_evil": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "cosmos_suffering": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.85
  },
  "cosmos_death": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.85
  },
  "cosmos_hell": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "cosmos_satan": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "cosmos_demons": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.725
  },
  "cosmos_falsehood": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.475
  },
  "cosmos_deception": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.475
  },
  "cosmos_corruption": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.725
  },
  "cosmos_necessity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.9
  },
  "cosmos_possibility": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "cosmos_contingency": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.725
  },
  "cosmos_actuality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_potentiality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "cosmos_identity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_contradiction": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.475
  },
  "cosmos_excluded_middle": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "cosmos_infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "cosmos_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "cosmos_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "cosmos_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "cosmos_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "cosmos_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "cosmos_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "cosmos_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "cosmos_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "cosmos_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "cosmos_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "cosmos_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "cosmos_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "cosmos_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.825
  },
  "cosmos_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "cosmos_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.825
  },
  "cosmos_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "cosmos_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "cosmos_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.725
  },
  "cosmos_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "cosmos_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "cosmos_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "cosmos_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "cosmos_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "cosmos_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "cosmos_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "cosmos_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.85
  },
  "cosmos_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "cosmos_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "cosmos_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.9
  },
  "world_nature": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_metaphysics": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "world_goodness": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "world_moral": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "world_ethics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "world_virtue": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "world_justice": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "world_love": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "world_compassion": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "world_mercy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "world_charity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "world_forgiveness": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "world_hope": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "world_joy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "world_peace": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "world_truth": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "world_knowledge": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "world_wisdom": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "world_reason": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "world_rationality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "world_logic": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "world_understanding": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "world_intellect": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "world_proposition": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "world_concept": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "world_theory": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "world_sin": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "world_evil": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "world_suffering": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "world_death": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "world_hell": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "world_satan": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "world_demons": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "world_falsehood": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "world_deception": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "world_corruption": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "world_necessity": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "world_possibility": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "world_contingency": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "world_actuality": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_potentiality": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "world_identity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "world_contradiction": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "world_excluded_middle": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "world_infinity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "world_eternity": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "world_transcendence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "world_immanence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "world_omnipotence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "world_omniscience": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "world_omnipresence": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "world_church": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_worship": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "world_communion": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "world_baptism": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "world_science": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "world_mathematics": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "world_philosophy": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "world_theology": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "world_epistemology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "world_space": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "world_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "world_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "world_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "world_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "world_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "world_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "world_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "world_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "world_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "world_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "world_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "world_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "world_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "world_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "world_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "world_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "world_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "world_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "world_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "world_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "world_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "world_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "world_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "world_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "world_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "world_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "world_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "world_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "world_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "world_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "world_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "nature_metaphysics": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "nature_goodness": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "nature_moral": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "nature_ethics": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "nature_virtue": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "nature_justice": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "nature_love": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "nature_compassion": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "nature_mercy": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "nature_charity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "nature_forgiveness": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "nature_hope": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "nature_joy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "nature_peace": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "nature_truth": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "nature_knowledge": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "nature_wisdom": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "nature_reason": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "nature_rationality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "nature_logic": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "nature_understanding": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "nature_intellect": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "nature_proposition": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "nature_concept": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "nature_theory": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "nature_sin": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "nature_evil": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "nature_suffering": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "nature_death": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "nature_hell": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "nature_satan": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "nature_demons": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "nature_falsehood": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "nature_deception": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "nature_corruption": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "nature_necessity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "nature_possibility": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "nature_contingency": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "nature_actuality": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "nature_potentiality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "nature_identity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "nature_contradiction": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "nature_excluded_middle": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "nature_infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "nature_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "nature_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "nature_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "nature_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "nature_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "nature_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "nature_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "nature_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "nature_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "nature_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "nature_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "nature_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "nature_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "nature_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "nature_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "nature_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "nature_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "nature_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "nature_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "nature_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "nature_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "nature_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "nature_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "nature_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "nature_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "nature_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "nature_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "nature_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "nature_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "nature_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "nature_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "nature_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "nature_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "nature_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "nature_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "nature_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "nature_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "nature_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "nature_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "nature_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "nature_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "nature_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "nature_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "nature_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "nature_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "nature_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "nature_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "nature_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "nature_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "metaphysics_goodness": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_moral": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_ethics": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_virtue": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_justice": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "metaphysics_love": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_compassion": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_mercy": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "metaphysics_charity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_forgiveness": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "metaphysics_hope": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "metaphysics_joy": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "metaphysics_peace": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "metaphysics_truth": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "metaphysics_knowledge": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.875
  },
  "metaphysics_wisdom": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "metaphysics_reason": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_rationality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_logic": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.9
  },
  "metaphysics_understanding": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_intellect": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.875
  },
  "metaphysics_proposition": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.875
  },
  "metaphysics_concept": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "metaphysics_theory": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "metaphysics_sin": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.825
  },
  "metaphysics_evil": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "metaphysics_suffering": {
    "E": 0.875,
    "G": 0.45,
    "T": 0.85
  },
  "metaphysics_death": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.85
  },
  "metaphysics_hell": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "metaphysics_satan": {
    "E": 0.775,
    "G": 0.35,
    "T": 0.775
  },
  "metaphysics_demons": {
    "E": 0.725,
    "G": 0.4,
    "T": 0.725
  },
  "metaphysics_falsehood": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.475
  },
  "metaphysics_deception": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.475
  },
  "metaphysics_corruption": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.725
  },
  "metaphysics_necessity": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.9
  },
  "metaphysics_possibility": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.775
  },
  "metaphysics_contingency": {
    "E": 0.725,
    "G": 0.65,
    "T": 0.725
  },
  "metaphysics_actuality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_potentiality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.775
  },
  "metaphysics_identity": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_contradiction": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.475
  },
  "metaphysics_excluded_middle": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.9
  },
  "metaphysics_infinity": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_eternity": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_transcendence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "metaphysics_immanence": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_omnipotence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "metaphysics_omniscience": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.9
  },
  "metaphysics_omnipresence": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "metaphysics_church": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_worship": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "metaphysics_communion": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_baptism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "metaphysics_science": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.85
  },
  "metaphysics_mathematics": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.9
  },
  "metaphysics_philosophy": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "metaphysics_theology": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "metaphysics_epistemology": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.875
  },
  "metaphysics_space": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_time": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_causality": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "metaphysics_determinism": {
    "E": 0.825,
    "G": 0.65,
    "T": 0.825
  },
  "metaphysics_freedom": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_will": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_mind": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "metaphysics_soul": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "metaphysics_consciousness": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "metaphysics_human": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_person": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_individual": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_community": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_family": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "metaphysics_society": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_law": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "metaphysics_authority": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_power": {
    "E": 0.875,
    "G": 0.65,
    "T": 0.825
  },
  "metaphysics_sovereignty": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "metaphysics_beauty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_harmony": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "metaphysics_order": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "metaphysics_chaos": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.725
  },
  "metaphysics_complexity": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "metaphysics_simplicity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "metaphysics_purpose": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "metaphysics_meaning": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "metaphysics_teleology": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "metaphysics_providence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "metaphysics_destiny": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.775
  },
  "metaphysics_judgment": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "metaphysics_reconciliation": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "metaphysics_trinity_law": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "metaphysics_3pdn": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "goodness_moral": {
    "E": 0.7,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_ethics": {
    "E": 0.7,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_virtue": {
    "E": 0.7,
    "G": 0.95,
    "T": 0.8
  },
  "goodness_justice": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "goodness_love": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.8
  },
  "goodness_compassion": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "goodness_mercy": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "goodness_charity": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "goodness_forgiveness": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "goodness_hope": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.775
  },
  "goodness_joy": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.75
  },
  "goodness_peace": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "goodness_truth": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.875
  },
  "goodness_knowledge": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "goodness_wisdom": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.85
  },
  "goodness_reason": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_rationality": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_logic": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.875
  },
  "goodness_understanding": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_intellect": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "goodness_proposition": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.85
  },
  "goodness_concept": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.825
  },
  "goodness_theory": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.825
  },
  "goodness_sin": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.8
  },
  "goodness_evil": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.75
  },
  "goodness_suffering": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.825
  },
  "goodness_death": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.825
  },
  "goodness_hell": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.75
  },
  "goodness_satan": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.75
  },
  "goodness_demons": {
    "E": 0.65,
    "G": 0.525,
    "T": 0.7
  },
  "goodness_falsehood": {
    "E": 0.65,
    "G": 0.575,
    "T": 0.45
  },
  "goodness_deception": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "goodness_corruption": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.7
  },
  "goodness_necessity": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "goodness_possibility": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.75
  },
  "goodness_contingency": {
    "E": 0.65,
    "G": 0.775,
    "T": 0.7
  },
  "goodness_actuality": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_potentiality": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.75
  },
  "goodness_identity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_contradiction": {
    "E": 0.7,
    "G": 0.575,
    "T": 0.45
  },
  "goodness_excluded_middle": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "goodness_infinity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_eternity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_transcendence": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "goodness_immanence": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_omnipotence": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "goodness_omniscience": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.875
  },
  "goodness_omnipresence": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "goodness_church": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_worship": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "goodness_communion": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_baptism": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "goodness_science": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "goodness_mathematics": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "goodness_philosophy": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "goodness_theology": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.825
  },
  "goodness_epistemology": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.85
  },
  "goodness_space": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_time": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_causality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "goodness_determinism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.8
  },
  "goodness_freedom": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_will": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_mind": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "goodness_soul": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "goodness_consciousness": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "goodness_human": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_person": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_individual": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_community": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_family": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "goodness_society": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_law": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "goodness_authority": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_power": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "goodness_sovereignty": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "goodness_beauty": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_harmony": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "goodness_order": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "goodness_chaos": {
    "E": 0.7,
    "G": 0.625,
    "T": 0.7
  },
  "goodness_complexity": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.8
  },
  "goodness_simplicity": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "goodness_purpose": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "goodness_meaning": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "goodness_teleology": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "goodness_providence": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "goodness_destiny": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.75
  },
  "goodness_judgment": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "goodness_reconciliation": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "goodness_trinity_law": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "goodness_3pdn": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "moral_ethics": {
    "E": 0.7,
    "G": 0.9,
    "T": 0.8
  },
  "moral_virtue": {
    "E": 0.7,
    "G": 0.925,
    "T": 0.8
  },
  "moral_justice": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "moral_love": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.8
  },
  "moral_compassion": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "moral_mercy": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "moral_charity": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "moral_forgiveness": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "moral_hope": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.775
  },
  "moral_joy": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.75
  },
  "moral_peace": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "moral_truth": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.875
  },
  "moral_knowledge": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "moral_wisdom": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "moral_reason": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "moral_rationality": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "moral_logic": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "moral_understanding": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "moral_intellect": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "moral_proposition": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.85
  },
  "moral_concept": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.825
  },
  "moral_theory": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.825
  },
  "moral_sin": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.8
  },
  "moral_evil": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "moral_suffering": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.825
  },
  "moral_death": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.825
  },
  "moral_hell": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "moral_satan": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.75
  },
  "moral_demons": {
    "E": 0.65,
    "G": 0.5,
    "T": 0.7
  },
  "moral_falsehood": {
    "E": 0.65,
    "G": 0.55,
    "T": 0.45
  },
  "moral_deception": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.45
  },
  "moral_corruption": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.7
  },
  "moral_necessity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "moral_possibility": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.75
  },
  "moral_contingency": {
    "E": 0.65,
    "G": 0.75,
    "T": 0.7
  },
  "moral_actuality": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "moral_potentiality": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.75
  },
  "moral_identity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "moral_contradiction": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "moral_excluded_middle": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.875
  },
  "moral_infinity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "moral_eternity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "moral_transcendence": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "moral_immanence": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.8
  },
  "moral_omnipotence": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "moral_omniscience": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.875
  },
  "moral_omnipresence": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "moral_church": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "moral_worship": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "moral_communion": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "moral_baptism": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "moral_science": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "moral_mathematics": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.875
  },
  "moral_philosophy": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.825
  },
  "moral_theology": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "moral_epistemology": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.85
  },
  "moral_space": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "moral_time": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "moral_causality": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.825
  },
  "moral_determinism": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "moral_freedom": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "moral_will": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.8
  },
  "moral_mind": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "moral_soul": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "moral_consciousness": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "moral_human": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "moral_person": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "moral_individual": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "moral_community": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "moral_family": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "moral_society": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "moral_law": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "moral_authority": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.8
  },
  "moral_power": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "moral_sovereignty": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "moral_beauty": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "moral_harmony": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "moral_order": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "moral_chaos": {
    "E": 0.7,
    "G": 0.6,
    "T": 0.7
  },
  "moral_complexity": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "moral_simplicity": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.825
  },
  "moral_purpose": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "moral_meaning": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "moral_teleology": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.8
  },
  "moral_providence": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "moral_destiny": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.75
  },
  "moral_judgment": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "moral_reconciliation": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "moral_trinity_law": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "moral_3pdn": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "ethics_virtue": {
    "E": 0.7,
    "G": 0.925,
    "T": 0.8
  },
  "ethics_justice": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "ethics_love": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.8
  },
  "ethics_compassion": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "ethics_mercy": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "ethics_charity": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "ethics_forgiveness": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "ethics_hope": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.775
  },
  "ethics_joy": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.75
  },
  "ethics_peace": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "ethics_truth": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.875
  },
  "ethics_knowledge": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "ethics_wisdom": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "ethics_reason": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_rationality": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_logic": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "ethics_understanding": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_intellect": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "ethics_proposition": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.85
  },
  "ethics_concept": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.825
  },
  "ethics_theory": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.825
  },
  "ethics_sin": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.8
  },
  "ethics_evil": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "ethics_suffering": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.825
  },
  "ethics_death": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.825
  },
  "ethics_hell": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "ethics_satan": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.75
  },
  "ethics_demons": {
    "E": 0.65,
    "G": 0.5,
    "T": 0.7
  },
  "ethics_falsehood": {
    "E": 0.65,
    "G": 0.55,
    "T": 0.45
  },
  "ethics_deception": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.45
  },
  "ethics_corruption": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.7
  },
  "ethics_necessity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "ethics_possibility": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.75
  },
  "ethics_contingency": {
    "E": 0.65,
    "G": 0.75,
    "T": 0.7
  },
  "ethics_actuality": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_potentiality": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.75
  },
  "ethics_identity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_contradiction": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "ethics_excluded_middle": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.875
  },
  "ethics_infinity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_eternity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_transcendence": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "ethics_immanence": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_omnipotence": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "ethics_omniscience": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.875
  },
  "ethics_omnipresence": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "ethics_church": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_worship": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "ethics_communion": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "ethics_baptism": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "ethics_science": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "ethics_mathematics": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.875
  },
  "ethics_philosophy": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.825
  },
  "ethics_theology": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "ethics_epistemology": {
    "E": 0.7,
    "G": 0.8,
    "T": 0.85
  },
  "ethics_space": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_time": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_causality": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.825
  },
  "ethics_determinism": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "ethics_freedom": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "ethics_will": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_mind": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "ethics_soul": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "ethics_consciousness": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "ethics_human": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_person": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_individual": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_community": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_family": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "ethics_society": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_law": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "ethics_authority": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_power": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "ethics_sovereignty": {
    "E": 0.775,
    "G": 0.85,
    "T": 0.825
  },
  "ethics_beauty": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "ethics_harmony": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "ethics_order": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "ethics_chaos": {
    "E": 0.7,
    "G": 0.6,
    "T": 0.7
  },
  "ethics_complexity": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "ethics_simplicity": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.825
  },
  "ethics_purpose": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "ethics_meaning": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "ethics_teleology": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.8
  },
  "ethics_providence": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "ethics_destiny": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.75
  },
  "ethics_judgment": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "ethics_reconciliation": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "ethics_trinity_law": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "ethics_3pdn": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.875
  },
  "virtue_justice": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "virtue_love": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.8
  },
  "virtue_compassion": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "virtue_mercy": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "virtue_charity": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "virtue_forgiveness": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "virtue_hope": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.775
  },
  "virtue_joy": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.75
  },
  "virtue_peace": {
    "E": 0.75,
    "G": 0.95,
    "T": 0.8
  },
  "virtue_truth": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.875
  },
  "virtue_knowledge": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "virtue_wisdom": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.85
  },
  "virtue_reason": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_rationality": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_logic": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.875
  },
  "virtue_understanding": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_intellect": {
    "E": 0.75,
    "G": 0.85,
    "T": 0.85
  },
  "virtue_proposition": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.85
  },
  "virtue_concept": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.825
  },
  "virtue_theory": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.825
  },
  "virtue_sin": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.8
  },
  "virtue_evil": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.75
  },
  "virtue_suffering": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.825
  },
  "virtue_death": {
    "E": 0.8,
    "G": 0.625,
    "T": 0.825
  },
  "virtue_hell": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.75
  },
  "virtue_satan": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.75
  },
  "virtue_demons": {
    "E": 0.65,
    "G": 0.525,
    "T": 0.7
  },
  "virtue_falsehood": {
    "E": 0.65,
    "G": 0.575,
    "T": 0.45
  },
  "virtue_deception": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "virtue_corruption": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.7
  },
  "virtue_necessity": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "virtue_possibility": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.75
  },
  "virtue_contingency": {
    "E": 0.65,
    "G": 0.775,
    "T": 0.7
  },
  "virtue_actuality": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_potentiality": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.75
  },
  "virtue_identity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_contradiction": {
    "E": 0.7,
    "G": 0.575,
    "T": 0.45
  },
  "virtue_excluded_middle": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "virtue_infinity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_eternity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_transcendence": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "virtue_immanence": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_omnipotence": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.85
  },
  "virtue_omniscience": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.875
  },
  "virtue_omnipresence": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "virtue_church": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_worship": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "virtue_communion": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "virtue_baptism": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "virtue_science": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "virtue_mathematics": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.875
  },
  "virtue_philosophy": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "virtue_theology": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.825
  },
  "virtue_epistemology": {
    "E": 0.7,
    "G": 0.825,
    "T": 0.85
  },
  "virtue_space": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_time": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_causality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "virtue_determinism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.8
  },
  "virtue_freedom": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "virtue_will": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_mind": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "virtue_soul": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "virtue_consciousness": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "virtue_human": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_person": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_individual": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_community": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_family": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "virtue_society": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_law": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "virtue_authority": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_power": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "virtue_sovereignty": {
    "E": 0.775,
    "G": 0.875,
    "T": 0.825
  },
  "virtue_beauty": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "virtue_harmony": {
    "E": 0.75,
    "G": 0.925,
    "T": 0.8
  },
  "virtue_order": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "virtue_chaos": {
    "E": 0.7,
    "G": 0.625,
    "T": 0.7
  },
  "virtue_complexity": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.8
  },
  "virtue_simplicity": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.825
  },
  "virtue_purpose": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "virtue_meaning": {
    "E": 0.75,
    "G": 0.9,
    "T": 0.8
  },
  "virtue_teleology": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.8
  },
  "virtue_providence": {
    "E": 0.775,
    "G": 0.925,
    "T": 0.825
  },
  "virtue_destiny": {
    "E": 0.75,
    "G": 0.875,
    "T": 0.75
  },
  "virtue_judgment": {
    "E": 0.775,
    "G": 0.9,
    "T": 0.825
  },
  "virtue_reconciliation": {
    "E": 0.775,
    "G": 0.95,
    "T": 0.825
  },
  "virtue_trinity_law": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "virtue_3pdn": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.875
  },
  "justice_love": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.825
  },
  "justice_compassion": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "justice_mercy": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "justice_charity": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "justice_forgiveness": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "justice_hope": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "justice_joy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "justice_peace": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "justice_truth": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.9
  },
  "justice_knowledge": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "justice_wisdom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "justice_reason": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "justice_rationality": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "justice_logic": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "justice_understanding": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "justice_intellect": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "justice_proposition": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "justice_concept": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "justice_theory": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "justice_sin": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "justice_evil": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "justice_suffering": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "justice_death": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.85
  },
  "justice_hell": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "justice_satan": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "justice_demons": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.725
  },
  "justice_falsehood": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.475
  },
  "justice_deception": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "justice_corruption": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.725
  },
  "justice_necessity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "justice_possibility": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "justice_contingency": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.725
  },
  "justice_actuality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "justice_potentiality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "justice_identity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "justice_contradiction": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.475
  },
  "justice_excluded_middle": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "justice_infinity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "justice_eternity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "justice_transcendence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "justice_immanence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "justice_omnipotence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "justice_omniscience": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.9
  },
  "justice_omnipresence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "justice_church": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "justice_worship": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "justice_communion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "justice_baptism": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "justice_science": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "justice_mathematics": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "justice_philosophy": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "justice_theology": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "justice_epistemology": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "justice_space": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "justice_time": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "justice_causality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "justice_determinism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "justice_freedom": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "justice_will": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "justice_mind": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "justice_soul": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "justice_consciousness": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "justice_human": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "justice_person": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "justice_individual": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "justice_community": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "justice_family": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "justice_society": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "justice_law": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "justice_authority": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "justice_power": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "justice_sovereignty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "justice_beauty": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "justice_harmony": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "justice_order": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "justice_chaos": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.725
  },
  "justice_complexity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "justice_simplicity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "justice_purpose": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "justice_meaning": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "justice_teleology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "justice_providence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "justice_destiny": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "justice_judgment": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "justice_reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "justice_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "justice_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "love_compassion": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.8
  },
  "love_mercy": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.825
  },
  "love_charity": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.8
  },
  "love_forgiveness": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.825
  },
  "love_hope": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "love_joy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.75
  },
  "love_peace": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.8
  },
  "love_truth": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "love_knowledge": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "love_wisdom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "love_reason": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "love_rationality": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "love_logic": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "love_understanding": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "love_intellect": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "love_proposition": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "love_concept": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "love_theory": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.825
  },
  "love_sin": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.8
  },
  "love_evil": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.75
  },
  "love_suffering": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.825
  },
  "love_death": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.825
  },
  "love_hell": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.75
  },
  "love_satan": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.75
  },
  "love_demons": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.7
  },
  "love_falsehood": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.45
  },
  "love_deception": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.45
  },
  "love_corruption": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.7
  },
  "love_necessity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.875
  },
  "love_possibility": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.75
  },
  "love_contingency": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.7
  },
  "love_actuality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "love_potentiality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.75
  },
  "love_identity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "love_contradiction": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.45
  },
  "love_excluded_middle": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "love_infinity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "love_eternity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "love_transcendence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "love_immanence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "love_omnipotence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "love_omniscience": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "love_omnipresence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "love_church": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "love_worship": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "love_communion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "love_baptism": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "love_science": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "love_mathematics": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "love_philosophy": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "love_theology": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "love_epistemology": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "love_space": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "love_time": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "love_causality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "love_determinism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.8
  },
  "love_freedom": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "love_will": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "love_mind": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "love_soul": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "love_consciousness": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "love_human": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "love_person": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "love_individual": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "love_community": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.8
  },
  "love_family": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.8
  },
  "love_society": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "love_law": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "love_authority": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "love_power": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.8
  },
  "love_sovereignty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "love_beauty": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "love_harmony": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "love_order": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "love_chaos": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.7
  },
  "love_complexity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "love_simplicity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "love_purpose": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "love_meaning": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "love_teleology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "love_providence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.825
  },
  "love_destiny": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.75
  },
  "love_judgment": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "love_reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.825
  },
  "love_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "love_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.875
  },
  "compassion_mercy": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "compassion_charity": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "compassion_forgiveness": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "compassion_hope": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.775
  },
  "compassion_joy": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.75
  },
  "compassion_peace": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "compassion_truth": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.875
  },
  "compassion_knowledge": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "compassion_wisdom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "compassion_reason": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_rationality": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_logic": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "compassion_understanding": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_intellect": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "compassion_proposition": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "compassion_concept": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "compassion_theory": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "compassion_sin": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "compassion_evil": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "compassion_suffering": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "compassion_death": {
    "E": 0.85,
    "G": 0.625,
    "T": 0.825
  },
  "compassion_hell": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "compassion_satan": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "compassion_demons": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.7
  },
  "compassion_falsehood": {
    "E": 0.7,
    "G": 0.575,
    "T": 0.45
  },
  "compassion_deception": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "compassion_corruption": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.7
  },
  "compassion_necessity": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "compassion_possibility": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "compassion_contingency": {
    "E": 0.7,
    "G": 0.775,
    "T": 0.7
  },
  "compassion_actuality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_potentiality": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "compassion_identity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_contradiction": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.45
  },
  "compassion_excluded_middle": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "compassion_infinity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_eternity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_transcendence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "compassion_immanence": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_omnipotence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "compassion_omniscience": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.875
  },
  "compassion_omnipresence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "compassion_church": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_worship": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "compassion_communion": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "compassion_baptism": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "compassion_science": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "compassion_mathematics": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "compassion_philosophy": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "compassion_theology": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "compassion_epistemology": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "compassion_space": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_time": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_causality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "compassion_determinism": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "compassion_freedom": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "compassion_will": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_mind": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "compassion_soul": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "compassion_consciousness": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "compassion_human": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_person": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_individual": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_community": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_family": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "compassion_society": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_law": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "compassion_authority": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_power": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "compassion_sovereignty": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "compassion_beauty": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "compassion_harmony": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "compassion_order": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "compassion_chaos": {
    "E": 0.75,
    "G": 0.625,
    "T": 0.7
  },
  "compassion_complexity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "compassion_simplicity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "compassion_purpose": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "compassion_meaning": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "compassion_teleology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "compassion_providence": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "compassion_destiny": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "compassion_judgment": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "compassion_reconciliation": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "compassion_trinity_law": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "compassion_3pdn": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "mercy_charity": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "mercy_forgiveness": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "mercy_hope": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "mercy_joy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "mercy_peace": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "mercy_truth": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.9
  },
  "mercy_knowledge": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "mercy_wisdom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "mercy_reason": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_rationality": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_logic": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "mercy_understanding": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_intellect": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "mercy_proposition": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "mercy_concept": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "mercy_theory": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "mercy_sin": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "mercy_evil": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "mercy_suffering": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "mercy_death": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.85
  },
  "mercy_hell": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "mercy_satan": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "mercy_demons": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.725
  },
  "mercy_falsehood": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.475
  },
  "mercy_deception": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "mercy_corruption": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.725
  },
  "mercy_necessity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "mercy_possibility": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "mercy_contingency": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.725
  },
  "mercy_actuality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_potentiality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "mercy_identity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_contradiction": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.475
  },
  "mercy_excluded_middle": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "mercy_infinity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_eternity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_transcendence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "mercy_immanence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_omnipotence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "mercy_omniscience": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.9
  },
  "mercy_omnipresence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "mercy_church": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_worship": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "mercy_communion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "mercy_baptism": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "mercy_science": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "mercy_mathematics": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "mercy_philosophy": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "mercy_theology": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "mercy_epistemology": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "mercy_space": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_time": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_causality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "mercy_determinism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "mercy_freedom": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "mercy_will": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_mind": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "mercy_soul": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "mercy_consciousness": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "mercy_human": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_person": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_individual": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_community": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_family": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "mercy_society": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_law": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "mercy_authority": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_power": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "mercy_sovereignty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "mercy_beauty": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "mercy_harmony": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "mercy_order": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "mercy_chaos": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.725
  },
  "mercy_complexity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "mercy_simplicity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "mercy_purpose": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "mercy_meaning": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "mercy_teleology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "mercy_providence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "mercy_destiny": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "mercy_judgment": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "mercy_reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "mercy_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "mercy_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "charity_forgiveness": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "charity_hope": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.775
  },
  "charity_joy": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.75
  },
  "charity_peace": {
    "E": 0.8,
    "G": 0.95,
    "T": 0.8
  },
  "charity_truth": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.875
  },
  "charity_knowledge": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "charity_wisdom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "charity_reason": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "charity_rationality": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "charity_logic": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "charity_understanding": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "charity_intellect": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "charity_proposition": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "charity_concept": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "charity_theory": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "charity_sin": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "charity_evil": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "charity_suffering": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "charity_death": {
    "E": 0.85,
    "G": 0.625,
    "T": 0.825
  },
  "charity_hell": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "charity_satan": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "charity_demons": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.7
  },
  "charity_falsehood": {
    "E": 0.7,
    "G": 0.575,
    "T": 0.45
  },
  "charity_deception": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "charity_corruption": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.7
  },
  "charity_necessity": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "charity_possibility": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "charity_contingency": {
    "E": 0.7,
    "G": 0.775,
    "T": 0.7
  },
  "charity_actuality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "charity_potentiality": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "charity_identity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "charity_contradiction": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.45
  },
  "charity_excluded_middle": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "charity_infinity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "charity_eternity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "charity_transcendence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "charity_immanence": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "charity_omnipotence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "charity_omniscience": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.875
  },
  "charity_omnipresence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "charity_church": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "charity_worship": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "charity_communion": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "charity_baptism": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "charity_science": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "charity_mathematics": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "charity_philosophy": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "charity_theology": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "charity_epistemology": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "charity_space": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "charity_time": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "charity_causality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "charity_determinism": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "charity_freedom": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "charity_will": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "charity_mind": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "charity_soul": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "charity_consciousness": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "charity_human": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "charity_person": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "charity_individual": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "charity_community": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "charity_family": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "charity_society": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "charity_law": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "charity_authority": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "charity_power": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "charity_sovereignty": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "charity_beauty": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "charity_harmony": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "charity_order": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "charity_chaos": {
    "E": 0.75,
    "G": 0.625,
    "T": 0.7
  },
  "charity_complexity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "charity_simplicity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "charity_purpose": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "charity_meaning": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "charity_teleology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "charity_providence": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "charity_destiny": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "charity_judgment": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "charity_reconciliation": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "charity_trinity_law": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "charity_3pdn": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "forgiveness_hope": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "forgiveness_joy": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "forgiveness_peace": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "forgiveness_truth": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.9
  },
  "forgiveness_knowledge": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "forgiveness_wisdom": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "forgiveness_reason": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_rationality": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_logic": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "forgiveness_understanding": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_intellect": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "forgiveness_proposition": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "forgiveness_concept": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "forgiveness_theory": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "forgiveness_sin": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "forgiveness_evil": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "forgiveness_suffering": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "forgiveness_death": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.85
  },
  "forgiveness_hell": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "forgiveness_satan": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "forgiveness_demons": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.725
  },
  "forgiveness_falsehood": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.475
  },
  "forgiveness_deception": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "forgiveness_corruption": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.725
  },
  "forgiveness_necessity": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "forgiveness_possibility": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "forgiveness_contingency": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.725
  },
  "forgiveness_actuality": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_potentiality": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "forgiveness_identity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_contradiction": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.475
  },
  "forgiveness_excluded_middle": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "forgiveness_infinity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_eternity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_transcendence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "forgiveness_immanence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_omnipotence": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "forgiveness_omniscience": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.9
  },
  "forgiveness_omnipresence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "forgiveness_church": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_worship": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "forgiveness_communion": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "forgiveness_baptism": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "forgiveness_science": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "forgiveness_mathematics": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "forgiveness_philosophy": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "forgiveness_theology": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "forgiveness_epistemology": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "forgiveness_space": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_time": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_causality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "forgiveness_determinism": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "forgiveness_freedom": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "forgiveness_will": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_mind": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "forgiveness_soul": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "forgiveness_consciousness": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "forgiveness_human": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_person": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_individual": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_community": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_family": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "forgiveness_society": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_law": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "forgiveness_authority": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_power": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "forgiveness_sovereignty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "forgiveness_beauty": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "forgiveness_harmony": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "forgiveness_order": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "forgiveness_chaos": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.725
  },
  "forgiveness_complexity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "forgiveness_simplicity": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "forgiveness_purpose": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "forgiveness_meaning": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "forgiveness_teleology": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "forgiveness_providence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "forgiveness_destiny": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "forgiveness_judgment": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "forgiveness_reconciliation": {
    "E": 0.85,
    "G": 0.95,
    "T": 0.85
  },
  "forgiveness_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "forgiveness_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "hope_joy": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.725
  },
  "hope_peace": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.775
  },
  "hope_truth": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "hope_knowledge": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "hope_wisdom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "hope_reason": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "hope_rationality": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "hope_logic": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "hope_understanding": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "hope_intellect": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "hope_proposition": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "hope_concept": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "hope_theory": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "hope_sin": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.775
  },
  "hope_evil": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.725
  },
  "hope_suffering": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.8
  },
  "hope_death": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.8
  },
  "hope_hell": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.725
  },
  "hope_satan": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.725
  },
  "hope_demons": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.675
  },
  "hope_falsehood": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.425
  },
  "hope_deception": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.425
  },
  "hope_corruption": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.675
  },
  "hope_necessity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.85
  },
  "hope_possibility": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.725
  },
  "hope_contingency": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.675
  },
  "hope_actuality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "hope_potentiality": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.725
  },
  "hope_identity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "hope_contradiction": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.425
  },
  "hope_excluded_middle": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "hope_infinity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "hope_eternity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "hope_transcendence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "hope_immanence": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.775
  },
  "hope_omnipotence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "hope_omniscience": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "hope_omnipresence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "hope_church": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "hope_worship": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.775
  },
  "hope_communion": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.775
  },
  "hope_baptism": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.775
  },
  "hope_science": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "hope_mathematics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "hope_philosophy": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "hope_theology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "hope_epistemology": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "hope_space": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "hope_time": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "hope_causality": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "hope_determinism": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "hope_freedom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.775
  },
  "hope_will": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "hope_mind": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "hope_soul": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "hope_consciousness": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "hope_human": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "hope_person": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "hope_individual": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "hope_community": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.775
  },
  "hope_family": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.775
  },
  "hope_society": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.775
  },
  "hope_law": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "hope_authority": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "hope_power": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.775
  },
  "hope_sovereignty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "hope_beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.775
  },
  "hope_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.775
  },
  "hope_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "hope_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.675
  },
  "hope_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "hope_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "hope_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.775
  },
  "hope_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.775
  },
  "hope_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.775
  },
  "hope_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.8
  },
  "hope_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.725
  },
  "hope_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "hope_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.8
  },
  "hope_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "hope_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.85
  },
  "joy_peace": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.75
  },
  "joy_truth": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "joy_knowledge": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "joy_wisdom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "joy_reason": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "joy_rationality": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "joy_logic": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "joy_understanding": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "joy_intellect": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "joy_proposition": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "joy_concept": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.775
  },
  "joy_theory": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.775
  },
  "joy_sin": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.75
  },
  "joy_evil": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.7
  },
  "joy_suffering": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.775
  },
  "joy_death": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.775
  },
  "joy_hell": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.7
  },
  "joy_satan": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "joy_demons": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.65
  },
  "joy_falsehood": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.4
  },
  "joy_deception": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.4
  },
  "joy_corruption": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.65
  },
  "joy_necessity": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "joy_possibility": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.7
  },
  "joy_contingency": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.65
  },
  "joy_actuality": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "joy_potentiality": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.7
  },
  "joy_identity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "joy_contradiction": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.4
  },
  "joy_excluded_middle": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "joy_infinity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "joy_eternity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "joy_transcendence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "joy_immanence": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "joy_omnipotence": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "joy_omniscience": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.825
  },
  "joy_omnipresence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "joy_church": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "joy_worship": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "joy_communion": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "joy_baptism": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "joy_science": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "joy_mathematics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "joy_philosophy": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.775
  },
  "joy_theology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.775
  },
  "joy_epistemology": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.8
  },
  "joy_space": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "joy_time": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "joy_causality": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "joy_determinism": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "joy_freedom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "joy_will": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.75
  },
  "joy_mind": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "joy_soul": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "joy_consciousness": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "joy_human": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "joy_person": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "joy_individual": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "joy_community": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.75
  },
  "joy_family": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.75
  },
  "joy_society": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "joy_law": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "joy_authority": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.75
  },
  "joy_power": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "joy_sovereignty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "joy_beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "joy_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.75
  },
  "joy_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "joy_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.65
  },
  "joy_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.75
  },
  "joy_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.775
  },
  "joy_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "joy_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "joy_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "joy_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.775
  },
  "joy_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.7
  },
  "joy_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "joy_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.775
  },
  "joy_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "joy_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.825
  },
  "peace_truth": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.875
  },
  "peace_knowledge": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "peace_wisdom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.85
  },
  "peace_reason": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "peace_rationality": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "peace_logic": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "peace_understanding": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "peace_intellect": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "peace_proposition": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "peace_concept": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "peace_theory": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.825
  },
  "peace_sin": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.8
  },
  "peace_evil": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "peace_suffering": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "peace_death": {
    "E": 0.85,
    "G": 0.625,
    "T": 0.825
  },
  "peace_hell": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "peace_satan": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "peace_demons": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.7
  },
  "peace_falsehood": {
    "E": 0.7,
    "G": 0.575,
    "T": 0.45
  },
  "peace_deception": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "peace_corruption": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.7
  },
  "peace_necessity": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "peace_possibility": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "peace_contingency": {
    "E": 0.7,
    "G": 0.775,
    "T": 0.7
  },
  "peace_actuality": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "peace_potentiality": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.75
  },
  "peace_identity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "peace_contradiction": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.45
  },
  "peace_excluded_middle": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "peace_infinity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "peace_eternity": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "peace_transcendence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "peace_immanence": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "peace_omnipotence": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "peace_omniscience": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.875
  },
  "peace_omnipresence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "peace_church": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "peace_worship": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "peace_communion": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "peace_baptism": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "peace_science": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "peace_mathematics": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "peace_philosophy": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "peace_theology": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.825
  },
  "peace_epistemology": {
    "E": 0.75,
    "G": 0.825,
    "T": 0.85
  },
  "peace_space": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "peace_time": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "peace_causality": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "peace_determinism": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "peace_freedom": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "peace_will": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.8
  },
  "peace_mind": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "peace_soul": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "peace_consciousness": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "peace_human": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "peace_person": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "peace_individual": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "peace_community": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "peace_family": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.8
  },
  "peace_society": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "peace_law": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "peace_authority": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "peace_power": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "peace_sovereignty": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "peace_beauty": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "peace_harmony": {
    "E": 0.8,
    "G": 0.925,
    "T": 0.8
  },
  "peace_order": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "peace_chaos": {
    "E": 0.75,
    "G": 0.625,
    "T": 0.7
  },
  "peace_complexity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "peace_simplicity": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "peace_purpose": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "peace_meaning": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "peace_teleology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "peace_providence": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "peace_destiny": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.75
  },
  "peace_judgment": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "peace_reconciliation": {
    "E": 0.825,
    "G": 0.95,
    "T": 0.825
  },
  "peace_trinity_law": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "peace_3pdn": {
    "E": 0.875,
    "G": 0.95,
    "T": 0.875
  },
  "truth_knowledge": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "truth_wisdom": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.925
  },
  "truth_reason": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "truth_rationality": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "truth_logic": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.95
  },
  "truth_understanding": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "truth_intellect": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "truth_proposition": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.925
  },
  "truth_concept": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "truth_theory": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "truth_sin": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.875
  },
  "truth_evil": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.825
  },
  "truth_suffering": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.9
  },
  "truth_death": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.9
  },
  "truth_hell": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.825
  },
  "truth_satan": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "truth_demons": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.775
  },
  "truth_falsehood": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.525
  },
  "truth_deception": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.525
  },
  "truth_corruption": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "truth_necessity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "truth_possibility": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "truth_contingency": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.775
  },
  "truth_actuality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "truth_potentiality": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "truth_identity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "truth_contradiction": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.525
  },
  "truth_excluded_middle": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.95
  },
  "truth_infinity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "truth_eternity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "truth_transcendence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "truth_immanence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "truth_omnipotence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "truth_omniscience": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.95
  },
  "truth_omnipresence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "truth_church": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "truth_worship": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "truth_communion": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "truth_baptism": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "truth_science": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "truth_mathematics": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.95
  },
  "truth_philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "truth_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "truth_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.925
  },
  "truth_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "truth_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "truth_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "truth_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "truth_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "truth_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "truth_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "truth_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "truth_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "truth_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "truth_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "truth_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "truth_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "truth_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "truth_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "truth_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "truth_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "truth_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "truth_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "truth_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "truth_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "truth_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "truth_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.775
  },
  "truth_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "truth_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "truth_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "truth_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "truth_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "truth_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "truth_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "truth_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "truth_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.9
  },
  "truth_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.95
  },
  "truth_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.95
  },
  "knowledge_wisdom": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "knowledge_reason": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_rationality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_logic": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.925
  },
  "knowledge_understanding": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_intellect": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.9
  },
  "knowledge_proposition": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "knowledge_concept": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.875
  },
  "knowledge_theory": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.875
  },
  "knowledge_sin": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.85
  },
  "knowledge_evil": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.8
  },
  "knowledge_suffering": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.875
  },
  "knowledge_death": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.875
  },
  "knowledge_hell": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.8
  },
  "knowledge_satan": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.8
  },
  "knowledge_demons": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.75
  },
  "knowledge_falsehood": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.5
  },
  "knowledge_deception": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.5
  },
  "knowledge_corruption": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "knowledge_necessity": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.925
  },
  "knowledge_possibility": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.8
  },
  "knowledge_contingency": {
    "E": 0.7,
    "G": 0.65,
    "T": 0.75
  },
  "knowledge_actuality": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_potentiality": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.8
  },
  "knowledge_identity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_contradiction": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.5
  },
  "knowledge_excluded_middle": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.925
  },
  "knowledge_infinity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_eternity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_transcendence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "knowledge_immanence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_omnipotence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "knowledge_omniscience": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "knowledge_omnipresence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.9
  },
  "knowledge_church": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_worship": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "knowledge_communion": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "knowledge_baptism": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "knowledge_science": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "knowledge_mathematics": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.925
  },
  "knowledge_philosophy": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "knowledge_theology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "knowledge_epistemology": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "knowledge_space": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_time": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_causality": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.875
  },
  "knowledge_determinism": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.85
  },
  "knowledge_freedom": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "knowledge_will": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_mind": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "knowledge_soul": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "knowledge_consciousness": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "knowledge_human": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_person": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_individual": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_community": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_family": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "knowledge_society": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_law": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "knowledge_authority": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_power": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.85
  },
  "knowledge_sovereignty": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "knowledge_beauty": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "knowledge_harmony": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "knowledge_order": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "knowledge_chaos": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "knowledge_complexity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "knowledge_simplicity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "knowledge_purpose": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "knowledge_meaning": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "knowledge_teleology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "knowledge_providence": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "knowledge_destiny": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "knowledge_judgment": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "knowledge_reconciliation": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "knowledge_trinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "knowledge_3pdn": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "wisdom_reason": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_rationality": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_logic": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "wisdom_understanding": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_intellect": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "wisdom_proposition": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.9
  },
  "wisdom_concept": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.875
  },
  "wisdom_theory": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.875
  },
  "wisdom_sin": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.85
  },
  "wisdom_evil": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.8
  },
  "wisdom_suffering": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.875
  },
  "wisdom_death": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.875
  },
  "wisdom_hell": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.8
  },
  "wisdom_satan": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.8
  },
  "wisdom_demons": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.75
  },
  "wisdom_falsehood": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.5
  },
  "wisdom_deception": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.5
  },
  "wisdom_corruption": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.75
  },
  "wisdom_necessity": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "wisdom_possibility": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.8
  },
  "wisdom_contingency": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.75
  },
  "wisdom_actuality": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_potentiality": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.8
  },
  "wisdom_identity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_contradiction": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.5
  },
  "wisdom_excluded_middle": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "wisdom_infinity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_eternity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_transcendence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "wisdom_immanence": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_omnipotence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "wisdom_omniscience": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.925
  },
  "wisdom_omnipresence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "wisdom_church": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_worship": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "wisdom_communion": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "wisdom_baptism": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "wisdom_science": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "wisdom_mathematics": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "wisdom_philosophy": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "wisdom_theology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.875
  },
  "wisdom_epistemology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.9
  },
  "wisdom_space": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_time": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_causality": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "wisdom_determinism": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.85
  },
  "wisdom_freedom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "wisdom_will": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_mind": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "wisdom_soul": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "wisdom_consciousness": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "wisdom_human": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_person": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_individual": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_community": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_family": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "wisdom_society": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_law": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "wisdom_authority": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_power": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "wisdom_sovereignty": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "wisdom_beauty": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "wisdom_harmony": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.85
  },
  "wisdom_order": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "wisdom_chaos": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.75
  },
  "wisdom_complexity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "wisdom_simplicity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "wisdom_purpose": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "wisdom_meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "wisdom_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "wisdom_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "wisdom_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "wisdom_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "wisdom_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.875
  },
  "wisdom_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.925
  },
  "wisdom_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.925
  },
  "reason_rationality": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "reason_logic": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "reason_understanding": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "reason_intellect": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "reason_proposition": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "reason_concept": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "reason_theory": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "reason_sin": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.85
  },
  "reason_evil": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "reason_suffering": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.875
  },
  "reason_death": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.875
  },
  "reason_hell": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "reason_satan": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.8
  },
  "reason_demons": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.75
  },
  "reason_falsehood": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.5
  },
  "reason_deception": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.5
  },
  "reason_corruption": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "reason_necessity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "reason_possibility": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "reason_contingency": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.75
  },
  "reason_actuality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "reason_potentiality": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "reason_identity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "reason_contradiction": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "reason_excluded_middle": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "reason_infinity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "reason_eternity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "reason_transcendence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "reason_immanence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "reason_omnipotence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "reason_omniscience": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "reason_omnipresence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "reason_church": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "reason_worship": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "reason_communion": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "reason_baptism": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "reason_science": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "reason_mathematics": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "reason_philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "reason_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "reason_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "reason_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reason_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reason_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "reason_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "reason_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "reason_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "reason_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "reason_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "reason_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "reason_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reason_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "reason_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "reason_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "reason_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "reason_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "reason_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "reason_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "reason_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "reason_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "reason_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "reason_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "reason_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "reason_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.75
  },
  "reason_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "reason_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "reason_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "reason_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "reason_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "reason_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "reason_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "reason_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "reason_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "reason_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "reason_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "rationality_logic": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "rationality_understanding": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "rationality_intellect": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "rationality_proposition": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "rationality_concept": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "rationality_theory": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "rationality_sin": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.85
  },
  "rationality_evil": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "rationality_suffering": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.875
  },
  "rationality_death": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.875
  },
  "rationality_hell": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "rationality_satan": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.8
  },
  "rationality_demons": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.75
  },
  "rationality_falsehood": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.5
  },
  "rationality_deception": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.5
  },
  "rationality_corruption": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "rationality_necessity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "rationality_possibility": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "rationality_contingency": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.75
  },
  "rationality_actuality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_potentiality": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "rationality_identity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "rationality_contradiction": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "rationality_excluded_middle": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "rationality_infinity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "rationality_eternity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "rationality_transcendence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "rationality_immanence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_omnipotence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "rationality_omniscience": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "rationality_omnipresence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "rationality_church": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_worship": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "rationality_communion": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "rationality_baptism": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "rationality_science": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "rationality_mathematics": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "rationality_philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "rationality_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "rationality_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "rationality_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "rationality_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "rationality_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "rationality_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "rationality_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "rationality_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "rationality_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "rationality_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "rationality_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "rationality_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "rationality_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "rationality_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "rationality_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "rationality_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.75
  },
  "rationality_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "rationality_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "rationality_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "rationality_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "rationality_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "rationality_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "rationality_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "rationality_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "rationality_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "rationality_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "rationality_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "logic_understanding": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.925
  },
  "logic_intellect": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "logic_proposition": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.925
  },
  "logic_concept": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.9
  },
  "logic_theory": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.9
  },
  "logic_sin": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.875
  },
  "logic_evil": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.825
  },
  "logic_suffering": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.9
  },
  "logic_death": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.9
  },
  "logic_hell": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.825
  },
  "logic_satan": {
    "E": 0.75,
    "G": 0.375,
    "T": 0.825
  },
  "logic_demons": {
    "E": 0.7,
    "G": 0.425,
    "T": 0.775
  },
  "logic_falsehood": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.525
  },
  "logic_deception": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.525
  },
  "logic_corruption": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.775
  },
  "logic_necessity": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.95
  },
  "logic_possibility": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.825
  },
  "logic_contingency": {
    "E": 0.7,
    "G": 0.675,
    "T": 0.775
  },
  "logic_actuality": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "logic_potentiality": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.825
  },
  "logic_identity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.925
  },
  "logic_contradiction": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.525
  },
  "logic_excluded_middle": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.95
  },
  "logic_infinity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.925
  },
  "logic_eternity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.925
  },
  "logic_transcendence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "logic_immanence": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "logic_omnipotence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "logic_omniscience": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.95
  },
  "logic_omnipresence": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.925
  },
  "logic_church": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "logic_worship": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "logic_communion": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "logic_baptism": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "logic_science": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.9
  },
  "logic_mathematics": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.95
  },
  "logic_philosophy": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "logic_theology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "logic_epistemology": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.925
  },
  "logic_space": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "logic_time": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "logic_causality": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.9
  },
  "logic_determinism": {
    "E": 0.8,
    "G": 0.675,
    "T": 0.875
  },
  "logic_freedom": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "logic_will": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "logic_mind": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "logic_soul": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "logic_consciousness": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "logic_human": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "logic_person": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "logic_individual": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "logic_community": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "logic_family": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "logic_society": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.875
  },
  "logic_law": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "logic_authority": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.875
  },
  "logic_power": {
    "E": 0.85,
    "G": 0.675,
    "T": 0.875
  },
  "logic_sovereignty": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "logic_beauty": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "logic_harmony": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "logic_order": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "logic_chaos": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.775
  },
  "logic_complexity": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.875
  },
  "logic_simplicity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "logic_purpose": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "logic_meaning": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "logic_teleology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "logic_providence": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "logic_destiny": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "logic_judgment": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "logic_reconciliation": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.9
  },
  "logic_trinity_law": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "logic_3pdn": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.95
  },
  "understanding_intellect": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "understanding_proposition": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "understanding_concept": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "understanding_theory": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "understanding_sin": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.85
  },
  "understanding_evil": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "understanding_suffering": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.875
  },
  "understanding_death": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.875
  },
  "understanding_hell": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.8
  },
  "understanding_satan": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.8
  },
  "understanding_demons": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.75
  },
  "understanding_falsehood": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.5
  },
  "understanding_deception": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.5
  },
  "understanding_corruption": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "understanding_necessity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.925
  },
  "understanding_possibility": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "understanding_contingency": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.75
  },
  "understanding_actuality": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_potentiality": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "understanding_identity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "understanding_contradiction": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "understanding_excluded_middle": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "understanding_infinity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "understanding_eternity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "understanding_transcendence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "understanding_immanence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_omnipotence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "understanding_omniscience": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.925
  },
  "understanding_omnipresence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "understanding_church": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_worship": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "understanding_communion": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "understanding_baptism": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "understanding_science": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "understanding_mathematics": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.925
  },
  "understanding_philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "understanding_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.875
  },
  "understanding_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.9
  },
  "understanding_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "understanding_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "understanding_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "understanding_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "understanding_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "understanding_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "understanding_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "understanding_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "understanding_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "understanding_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "understanding_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "understanding_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.85
  },
  "understanding_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "understanding_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.75
  },
  "understanding_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "understanding_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "understanding_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "understanding_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "understanding_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "understanding_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "understanding_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "understanding_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "understanding_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.875
  },
  "understanding_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "understanding_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.925
  },
  "intellect_proposition": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.9
  },
  "intellect_concept": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.875
  },
  "intellect_theory": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.875
  },
  "intellect_sin": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.85
  },
  "intellect_evil": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.8
  },
  "intellect_suffering": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.875
  },
  "intellect_death": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.875
  },
  "intellect_hell": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.8
  },
  "intellect_satan": {
    "E": 0.75,
    "G": 0.375,
    "T": 0.8
  },
  "intellect_demons": {
    "E": 0.7,
    "G": 0.425,
    "T": 0.75
  },
  "intellect_falsehood": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.5
  },
  "intellect_deception": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.5
  },
  "intellect_corruption": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.75
  },
  "intellect_necessity": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.925
  },
  "intellect_possibility": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.8
  },
  "intellect_contingency": {
    "E": 0.7,
    "G": 0.675,
    "T": 0.75
  },
  "intellect_actuality": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_potentiality": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.8
  },
  "intellect_identity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "intellect_contradiction": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.5
  },
  "intellect_excluded_middle": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.925
  },
  "intellect_infinity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "intellect_eternity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "intellect_transcendence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "intellect_immanence": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_omnipotence": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.9
  },
  "intellect_omniscience": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.925
  },
  "intellect_omnipresence": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.9
  },
  "intellect_church": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_worship": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "intellect_communion": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "intellect_baptism": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "intellect_science": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.875
  },
  "intellect_mathematics": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.925
  },
  "intellect_philosophy": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "intellect_theology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "intellect_epistemology": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.9
  },
  "intellect_space": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_time": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_causality": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.875
  },
  "intellect_determinism": {
    "E": 0.8,
    "G": 0.675,
    "T": 0.85
  },
  "intellect_freedom": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "intellect_will": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_mind": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "intellect_soul": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "intellect_consciousness": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "intellect_human": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_person": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_individual": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_community": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_family": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "intellect_society": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_law": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "intellect_authority": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_power": {
    "E": 0.85,
    "G": 0.675,
    "T": 0.85
  },
  "intellect_sovereignty": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.875
  },
  "intellect_beauty": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "intellect_harmony": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "intellect_order": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "intellect_chaos": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.75
  },
  "intellect_complexity": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.85
  },
  "intellect_simplicity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "intellect_purpose": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "intellect_meaning": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "intellect_teleology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "intellect_providence": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.875
  },
  "intellect_destiny": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "intellect_judgment": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.875
  },
  "intellect_reconciliation": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.875
  },
  "intellect_trinity_law": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "intellect_3pdn": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.925
  },
  "proposition_concept": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.875
  },
  "proposition_theory": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.875
  },
  "proposition_sin": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.85
  },
  "proposition_evil": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.8
  },
  "proposition_suffering": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.875
  },
  "proposition_death": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.875
  },
  "proposition_hell": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.8
  },
  "proposition_satan": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.8
  },
  "proposition_demons": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.75
  },
  "proposition_falsehood": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.5
  },
  "proposition_deception": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.5
  },
  "proposition_corruption": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "proposition_necessity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.925
  },
  "proposition_possibility": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.8
  },
  "proposition_contingency": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.75
  },
  "proposition_actuality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_potentiality": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.8
  },
  "proposition_identity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "proposition_contradiction": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.5
  },
  "proposition_excluded_middle": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.925
  },
  "proposition_infinity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "proposition_eternity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "proposition_transcendence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "proposition_immanence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_omnipotence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "proposition_omniscience": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "proposition_omnipresence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "proposition_church": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_worship": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "proposition_communion": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "proposition_baptism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "proposition_science": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.875
  },
  "proposition_mathematics": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.925
  },
  "proposition_philosophy": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "proposition_theology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.875
  },
  "proposition_epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.9
  },
  "proposition_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.875
  },
  "proposition_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.85
  },
  "proposition_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "proposition_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "proposition_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "proposition_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "proposition_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "proposition_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "proposition_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.85
  },
  "proposition_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "proposition_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "proposition_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "proposition_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "proposition_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "proposition_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.85
  },
  "proposition_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "proposition_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "proposition_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "proposition_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "proposition_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.875
  },
  "proposition_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "proposition_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "proposition_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "proposition_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "proposition_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "concept_theory": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.85
  },
  "concept_sin": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "concept_evil": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "concept_suffering": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.85
  },
  "concept_death": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.85
  },
  "concept_hell": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "concept_satan": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.775
  },
  "concept_demons": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.725
  },
  "concept_falsehood": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.475
  },
  "concept_deception": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.475
  },
  "concept_corruption": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "concept_necessity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "concept_possibility": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.775
  },
  "concept_contingency": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.725
  },
  "concept_actuality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "concept_potentiality": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.775
  },
  "concept_identity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "concept_contradiction": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.475
  },
  "concept_excluded_middle": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "concept_infinity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "concept_eternity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "concept_transcendence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "concept_immanence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "concept_omnipotence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "concept_omniscience": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "concept_omnipresence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "concept_church": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "concept_worship": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "concept_communion": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "concept_baptism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "concept_science": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.85
  },
  "concept_mathematics": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "concept_philosophy": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "concept_theology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "concept_epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.875
  },
  "concept_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "concept_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "concept_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "concept_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.825
  },
  "concept_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "concept_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.825
  },
  "concept_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "concept_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "concept_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "concept_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "concept_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "concept_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "concept_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "concept_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "concept_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "concept_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "concept_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.825
  },
  "concept_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.825
  },
  "concept_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "concept_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "concept_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "concept_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "concept_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.725
  },
  "concept_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "concept_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "concept_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "concept_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "concept_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "concept_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.85
  },
  "concept_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "concept_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "concept_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "concept_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "concept_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "theory_sin": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "theory_evil": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "theory_suffering": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.85
  },
  "theory_death": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.85
  },
  "theory_hell": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "theory_satan": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.775
  },
  "theory_demons": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.725
  },
  "theory_falsehood": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.475
  },
  "theory_deception": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.475
  },
  "theory_corruption": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "theory_necessity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "theory_possibility": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.775
  },
  "theory_contingency": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.725
  },
  "theory_actuality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "theory_potentiality": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.775
  },
  "theory_identity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "theory_contradiction": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.475
  },
  "theory_excluded_middle": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "theory_infinity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "theory_eternity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "theory_transcendence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "theory_immanence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "theory_omnipotence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "theory_omniscience": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "theory_omnipresence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "theory_church": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "theory_worship": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "theory_communion": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "theory_baptism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "theory_science": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.85
  },
  "theory_mathematics": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.9
  },
  "theory_philosophy": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "theory_theology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "theory_epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.875
  },
  "theory_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "theory_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "theory_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "theory_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.825
  },
  "theory_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "theory_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.825
  },
  "theory_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "theory_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "theory_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "theory_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "theory_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "theory_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "theory_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "theory_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "theory_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "theory_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "theory_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.825
  },
  "theory_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.825
  },
  "theory_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "theory_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "theory_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.825
  },
  "theory_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "theory_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.725
  },
  "theory_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "theory_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "theory_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "theory_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.825
  },
  "theory_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.825
  },
  "theory_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.85
  },
  "theory_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "theory_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.85
  },
  "theory_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.85
  },
  "theory_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "theory_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "sin_evil": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.75
  },
  "sin_suffering": {
    "E": 0.85,
    "G": 0.15,
    "T": 0.825
  },
  "sin_death": {
    "E": 0.85,
    "G": 0.2,
    "T": 0.825
  },
  "sin_hell": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.75
  },
  "sin_satan": {
    "E": 0.75,
    "G": 0.05,
    "T": 0.75
  },
  "sin_demons": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.7
  },
  "sin_falsehood": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.45
  },
  "sin_deception": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.45
  },
  "sin_corruption": {
    "E": 0.8,
    "G": 0.1,
    "T": 0.7
  },
  "sin_necessity": {
    "E": 0.875,
    "G": 0.475,
    "T": 0.875
  },
  "sin_possibility": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "sin_contingency": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.7
  },
  "sin_actuality": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "sin_potentiality": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "sin_identity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.85
  },
  "sin_contradiction": {
    "E": 0.75,
    "G": 0.15,
    "T": 0.45
  },
  "sin_excluded_middle": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.875
  },
  "sin_infinity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.85
  },
  "sin_eternity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.85
  },
  "sin_transcendence": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "sin_immanence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "sin_omnipotence": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "sin_omniscience": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.875
  },
  "sin_omnipresence": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.85
  },
  "sin_church": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "sin_worship": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "sin_communion": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "sin_baptism": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "sin_science": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.825
  },
  "sin_mathematics": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.875
  },
  "sin_philosophy": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.825
  },
  "sin_theology": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.825
  },
  "sin_epistemology": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.85
  },
  "sin_space": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "sin_time": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "sin_causality": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.825
  },
  "sin_determinism": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.8
  },
  "sin_freedom": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "sin_will": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.8
  },
  "sin_mind": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.825
  },
  "sin_soul": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "sin_consciousness": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.825
  },
  "sin_human": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "sin_person": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "sin_individual": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "sin_community": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.8
  },
  "sin_family": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.8
  },
  "sin_society": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.8
  },
  "sin_law": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "sin_authority": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.8
  },
  "sin_power": {
    "E": 0.85,
    "G": 0.35,
    "T": 0.8
  },
  "sin_sovereignty": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.825
  },
  "sin_beauty": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "sin_harmony": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "sin_order": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "sin_chaos": {
    "E": 0.75,
    "G": 0.2,
    "T": 0.7
  },
  "sin_complexity": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.8
  },
  "sin_simplicity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.825
  },
  "sin_purpose": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "sin_meaning": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.8
  },
  "sin_teleology": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "sin_providence": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.825
  },
  "sin_destiny": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "sin_judgment": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "sin_reconciliation": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "sin_trinity_law": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.875
  },
  "sin_3pdn": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.875
  },
  "evil_suffering": {
    "E": 0.8,
    "G": 0.15,
    "T": 0.775
  },
  "evil_death": {
    "E": 0.8,
    "G": 0.2,
    "T": 0.775
  },
  "evil_hell": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.7
  },
  "evil_satan": {
    "E": 0.7,
    "G": 0.05,
    "T": 0.7
  },
  "evil_demons": {
    "E": 0.65,
    "G": 0.1,
    "T": 0.65
  },
  "evil_falsehood": {
    "E": 0.65,
    "G": 0.15,
    "T": 0.4
  },
  "evil_deception": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.4
  },
  "evil_corruption": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.65
  },
  "evil_necessity": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "evil_possibility": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.7
  },
  "evil_contingency": {
    "E": 0.65,
    "G": 0.35,
    "T": 0.65
  },
  "evil_actuality": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "evil_potentiality": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.7
  },
  "evil_identity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "evil_contradiction": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.4
  },
  "evil_excluded_middle": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "evil_infinity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "evil_eternity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "evil_transcendence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "evil_immanence": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "evil_omnipotence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "evil_omniscience": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.825
  },
  "evil_omnipresence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "evil_church": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "evil_worship": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "evil_communion": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "evil_baptism": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "evil_science": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.775
  },
  "evil_mathematics": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "evil_philosophy": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.775
  },
  "evil_theology": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.775
  },
  "evil_epistemology": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.8
  },
  "evil_space": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "evil_time": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "evil_causality": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "evil_determinism": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.75
  },
  "evil_freedom": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "evil_will": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.75
  },
  "evil_mind": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "evil_soul": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "evil_consciousness": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "evil_human": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "evil_person": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "evil_individual": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "evil_community": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "evil_family": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.75
  },
  "evil_society": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "evil_law": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "evil_authority": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.75
  },
  "evil_power": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "evil_sovereignty": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "evil_beauty": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "evil_harmony": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "evil_order": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "evil_chaos": {
    "E": 0.7,
    "G": 0.2,
    "T": 0.65
  },
  "evil_complexity": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "evil_simplicity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.775
  },
  "evil_purpose": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "evil_meaning": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "evil_teleology": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "evil_providence": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.775
  },
  "evil_destiny": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "evil_judgment": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "evil_reconciliation": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "evil_trinity_law": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "evil_3pdn": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_death": {
    "E": 0.9,
    "G": 0.25,
    "T": 0.85
  },
  "suffering_hell": {
    "E": 0.8,
    "G": 0.15,
    "T": 0.775
  },
  "suffering_satan": {
    "E": 0.8,
    "G": 0.1,
    "T": 0.775
  },
  "suffering_demons": {
    "E": 0.75,
    "G": 0.15,
    "T": 0.725
  },
  "suffering_falsehood": {
    "E": 0.75,
    "G": 0.2,
    "T": 0.475
  },
  "suffering_deception": {
    "E": 0.8,
    "G": 0.15,
    "T": 0.475
  },
  "suffering_corruption": {
    "E": 0.85,
    "G": 0.15,
    "T": 0.725
  },
  "suffering_necessity": {
    "E": 0.925,
    "G": 0.525,
    "T": 0.9
  },
  "suffering_possibility": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "suffering_contingency": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.725
  },
  "suffering_actuality": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_potentiality": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.775
  },
  "suffering_identity": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.875
  },
  "suffering_contradiction": {
    "E": 0.8,
    "G": 0.2,
    "T": 0.475
  },
  "suffering_excluded_middle": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.9
  },
  "suffering_infinity": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.875
  },
  "suffering_eternity": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.875
  },
  "suffering_transcendence": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "suffering_immanence": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_omnipotence": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "suffering_omniscience": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.9
  },
  "suffering_omnipresence": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.875
  },
  "suffering_church": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_worship": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_communion": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "suffering_baptism": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_science": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.85
  },
  "suffering_mathematics": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.9
  },
  "suffering_philosophy": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "suffering_theology": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.85
  },
  "suffering_epistemology": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.875
  },
  "suffering_space": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_time": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_causality": {
    "E": 0.875,
    "G": 0.45,
    "T": 0.85
  },
  "suffering_determinism": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.825
  },
  "suffering_freedom": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "suffering_will": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_mind": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.85
  },
  "suffering_soul": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.85
  },
  "suffering_consciousness": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.85
  },
  "suffering_human": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_person": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_individual": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_community": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_family": {
    "E": 0.9,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_society": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_law": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.85
  },
  "suffering_authority": {
    "E": 0.875,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_power": {
    "E": 0.9,
    "G": 0.4,
    "T": 0.825
  },
  "suffering_sovereignty": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.85
  },
  "suffering_beauty": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "suffering_harmony": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "suffering_order": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.85
  },
  "suffering_chaos": {
    "E": 0.8,
    "G": 0.25,
    "T": 0.725
  },
  "suffering_complexity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.825
  },
  "suffering_simplicity": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "suffering_purpose": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_meaning": {
    "E": 0.85,
    "G": 0.525,
    "T": 0.825
  },
  "suffering_teleology": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.825
  },
  "suffering_providence": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.85
  },
  "suffering_destiny": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.775
  },
  "suffering_judgment": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.85
  },
  "suffering_reconciliation": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "suffering_trinity_law": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "suffering_3pdn": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "death_hell": {
    "E": 0.8,
    "G": 0.2,
    "T": 0.775
  },
  "death_satan": {
    "E": 0.8,
    "G": 0.15,
    "T": 0.775
  },
  "death_demons": {
    "E": 0.75,
    "G": 0.2,
    "T": 0.725
  },
  "death_falsehood": {
    "E": 0.75,
    "G": 0.25,
    "T": 0.475
  },
  "death_deception": {
    "E": 0.8,
    "G": 0.2,
    "T": 0.475
  },
  "death_corruption": {
    "E": 0.85,
    "G": 0.2,
    "T": 0.725
  },
  "death_necessity": {
    "E": 0.925,
    "G": 0.575,
    "T": 0.9
  },
  "death_possibility": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.775
  },
  "death_contingency": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.725
  },
  "death_actuality": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "death_potentiality": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.775
  },
  "death_identity": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "death_contradiction": {
    "E": 0.8,
    "G": 0.25,
    "T": 0.475
  },
  "death_excluded_middle": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.9
  },
  "death_infinity": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "death_eternity": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "death_transcendence": {
    "E": 0.9,
    "G": 0.6,
    "T": 0.875
  },
  "death_immanence": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "death_omnipotence": {
    "E": 0.9,
    "G": 0.6,
    "T": 0.875
  },
  "death_omniscience": {
    "E": 0.9,
    "G": 0.6,
    "T": 0.9
  },
  "death_omnipresence": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.875
  },
  "death_church": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "death_worship": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "death_communion": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.825
  },
  "death_baptism": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "death_science": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.85
  },
  "death_mathematics": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.9
  },
  "death_philosophy": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "death_theology": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.85
  },
  "death_epistemology": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.875
  },
  "death_space": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "death_time": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "death_causality": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.85
  },
  "death_determinism": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.825
  },
  "death_freedom": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.825
  },
  "death_will": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.825
  },
  "death_mind": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.85
  },
  "death_soul": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "death_consciousness": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.85
  },
  "death_human": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "death_person": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "death_individual": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "death_community": {
    "E": 0.9,
    "G": 0.55,
    "T": 0.825
  },
  "death_family": {
    "E": 0.9,
    "G": 0.575,
    "T": 0.825
  },
  "death_society": {
    "E": 0.9,
    "G": 0.5,
    "T": 0.825
  },
  "death_law": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "death_authority": {
    "E": 0.875,
    "G": 0.5,
    "T": 0.825
  },
  "death_power": {
    "E": 0.9,
    "G": 0.45,
    "T": 0.825
  },
  "death_sovereignty": {
    "E": 0.875,
    "G": 0.55,
    "T": 0.85
  },
  "death_beauty": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.825
  },
  "death_harmony": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.825
  },
  "death_order": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "death_chaos": {
    "E": 0.8,
    "G": 0.3,
    "T": 0.725
  },
  "death_complexity": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.825
  },
  "death_simplicity": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.85
  },
  "death_purpose": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "death_meaning": {
    "E": 0.85,
    "G": 0.575,
    "T": 0.825
  },
  "death_teleology": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.825
  },
  "death_providence": {
    "E": 0.875,
    "G": 0.6,
    "T": 0.85
  },
  "death_destiny": {
    "E": 0.85,
    "G": 0.55,
    "T": 0.775
  },
  "death_judgment": {
    "E": 0.875,
    "G": 0.575,
    "T": 0.85
  },
  "death_reconciliation": {
    "E": 0.875,
    "G": 0.625,
    "T": 0.85
  },
  "death_trinity_law": {
    "E": 0.925,
    "G": 0.625,
    "T": 0.9
  },
  "death_3pdn": {
    "E": 0.925,
    "G": 0.625,
    "T": 0.9
  },
  "hell_satan": {
    "E": 0.7,
    "G": 0.05,
    "T": 0.7
  },
  "hell_demons": {
    "E": 0.65,
    "G": 0.1,
    "T": 0.65
  },
  "hell_falsehood": {
    "E": 0.65,
    "G": 0.15,
    "T": 0.4
  },
  "hell_deception": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.4
  },
  "hell_corruption": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.65
  },
  "hell_necessity": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "hell_possibility": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.7
  },
  "hell_contingency": {
    "E": 0.65,
    "G": 0.35,
    "T": 0.65
  },
  "hell_actuality": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "hell_potentiality": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.7
  },
  "hell_identity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "hell_contradiction": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.4
  },
  "hell_excluded_middle": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "hell_infinity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "hell_eternity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "hell_transcendence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "hell_immanence": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "hell_omnipotence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.8
  },
  "hell_omniscience": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.825
  },
  "hell_omnipresence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "hell_church": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "hell_worship": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "hell_communion": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "hell_baptism": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "hell_science": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.775
  },
  "hell_mathematics": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.825
  },
  "hell_philosophy": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.775
  },
  "hell_theology": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.775
  },
  "hell_epistemology": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.8
  },
  "hell_space": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "hell_time": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "hell_causality": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "hell_determinism": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.75
  },
  "hell_freedom": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "hell_will": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.75
  },
  "hell_mind": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "hell_soul": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "hell_consciousness": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "hell_human": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "hell_person": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "hell_individual": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "hell_community": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.75
  },
  "hell_family": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.75
  },
  "hell_society": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "hell_law": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "hell_authority": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.75
  },
  "hell_power": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "hell_sovereignty": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "hell_beauty": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "hell_harmony": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "hell_order": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "hell_chaos": {
    "E": 0.7,
    "G": 0.2,
    "T": 0.65
  },
  "hell_complexity": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "hell_simplicity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.775
  },
  "hell_purpose": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "hell_meaning": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.75
  },
  "hell_teleology": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "hell_providence": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.775
  },
  "hell_destiny": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "hell_judgment": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "hell_reconciliation": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "hell_trinity_law": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "hell_3pdn": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.825
  },
  "satan_demons": {
    "E": 0.65,
    "G": 0.05,
    "T": 0.65
  },
  "satan_falsehood": {
    "E": 0.65,
    "G": 0.1,
    "T": 0.4
  },
  "satan_deception": {
    "E": 0.7,
    "G": 0.05,
    "T": 0.4
  },
  "satan_corruption": {
    "E": 0.75,
    "G": 0.05,
    "T": 0.65
  },
  "satan_necessity": {
    "E": 0.825,
    "G": 0.425,
    "T": 0.825
  },
  "satan_possibility": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.7
  },
  "satan_contingency": {
    "E": 0.65,
    "G": 0.3,
    "T": 0.65
  },
  "satan_actuality": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "satan_potentiality": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.7
  },
  "satan_identity": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.8
  },
  "satan_contradiction": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.4
  },
  "satan_excluded_middle": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.825
  },
  "satan_infinity": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.8
  },
  "satan_eternity": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.8
  },
  "satan_transcendence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "satan_immanence": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "satan_omnipotence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.8
  },
  "satan_omniscience": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.825
  },
  "satan_omnipresence": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.8
  },
  "satan_church": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "satan_worship": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.75
  },
  "satan_communion": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "satan_baptism": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.75
  },
  "satan_science": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.775
  },
  "satan_mathematics": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.825
  },
  "satan_philosophy": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.775
  },
  "satan_theology": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.775
  },
  "satan_epistemology": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.8
  },
  "satan_space": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "satan_time": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "satan_causality": {
    "E": 0.775,
    "G": 0.35,
    "T": 0.775
  },
  "satan_determinism": {
    "E": 0.75,
    "G": 0.3,
    "T": 0.75
  },
  "satan_freedom": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "satan_will": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.75
  },
  "satan_mind": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "satan_soul": {
    "E": 0.775,
    "G": 0.425,
    "T": 0.775
  },
  "satan_consciousness": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "satan_human": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "satan_person": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "satan_individual": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "satan_community": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.75
  },
  "satan_family": {
    "E": 0.8,
    "G": 0.425,
    "T": 0.75
  },
  "satan_society": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.75
  },
  "satan_law": {
    "E": 0.775,
    "G": 0.425,
    "T": 0.775
  },
  "satan_authority": {
    "E": 0.775,
    "G": 0.35,
    "T": 0.75
  },
  "satan_power": {
    "E": 0.8,
    "G": 0.3,
    "T": 0.75
  },
  "satan_sovereignty": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.775
  },
  "satan_beauty": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "satan_harmony": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "satan_order": {
    "E": 0.775,
    "G": 0.425,
    "T": 0.775
  },
  "satan_chaos": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.65
  },
  "satan_complexity": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.75
  },
  "satan_simplicity": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.775
  },
  "satan_purpose": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.75
  },
  "satan_meaning": {
    "E": 0.75,
    "G": 0.425,
    "T": 0.75
  },
  "satan_teleology": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "satan_providence": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.775
  },
  "satan_destiny": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "satan_judgment": {
    "E": 0.775,
    "G": 0.425,
    "T": 0.775
  },
  "satan_reconciliation": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "satan_trinity_law": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "satan_3pdn": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.825
  },
  "demons_falsehood": {
    "E": 0.6,
    "G": 0.15,
    "T": 0.35
  },
  "demons_deception": {
    "E": 0.65,
    "G": 0.1,
    "T": 0.35
  },
  "demons_corruption": {
    "E": 0.7,
    "G": 0.1,
    "T": 0.6
  },
  "demons_necessity": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.775
  },
  "demons_possibility": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.65
  },
  "demons_contingency": {
    "E": 0.6,
    "G": 0.35,
    "T": 0.6
  },
  "demons_actuality": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "demons_potentiality": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.65
  },
  "demons_identity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "demons_contradiction": {
    "E": 0.65,
    "G": 0.15,
    "T": 0.35
  },
  "demons_excluded_middle": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "demons_infinity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "demons_eternity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "demons_transcendence": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "demons_immanence": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.7
  },
  "demons_omnipotence": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.75
  },
  "demons_omniscience": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.775
  },
  "demons_omnipresence": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.75
  },
  "demons_church": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "demons_worship": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.7
  },
  "demons_communion": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.7
  },
  "demons_baptism": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.7
  },
  "demons_science": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.725
  },
  "demons_mathematics": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.775
  },
  "demons_philosophy": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.725
  },
  "demons_theology": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.725
  },
  "demons_epistemology": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.75
  },
  "demons_space": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "demons_time": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "demons_causality": {
    "E": 0.725,
    "G": 0.4,
    "T": 0.725
  },
  "demons_determinism": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.7
  },
  "demons_freedom": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.7
  },
  "demons_will": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.7
  },
  "demons_mind": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.725
  },
  "demons_soul": {
    "E": 0.725,
    "G": 0.475,
    "T": 0.725
  },
  "demons_consciousness": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.725
  },
  "demons_human": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "demons_person": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "demons_individual": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "demons_community": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "demons_family": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.7
  },
  "demons_society": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.7
  },
  "demons_law": {
    "E": 0.725,
    "G": 0.475,
    "T": 0.725
  },
  "demons_authority": {
    "E": 0.725,
    "G": 0.4,
    "T": 0.7
  },
  "demons_power": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.7
  },
  "demons_sovereignty": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.725
  },
  "demons_beauty": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.7
  },
  "demons_harmony": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.7
  },
  "demons_order": {
    "E": 0.725,
    "G": 0.475,
    "T": 0.725
  },
  "demons_chaos": {
    "E": 0.65,
    "G": 0.2,
    "T": 0.6
  },
  "demons_complexity": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.7
  },
  "demons_simplicity": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.725
  },
  "demons_purpose": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.7
  },
  "demons_meaning": {
    "E": 0.7,
    "G": 0.475,
    "T": 0.7
  },
  "demons_teleology": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.7
  },
  "demons_providence": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.725
  },
  "demons_destiny": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.65
  },
  "demons_judgment": {
    "E": 0.725,
    "G": 0.475,
    "T": 0.725
  },
  "demons_reconciliation": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.725
  },
  "demons_trinity_law": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "demons_3pdn": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.775
  },
  "falsehood_deception": {
    "E": 0.65,
    "G": 0.15,
    "T": 0.1
  },
  "falsehood_corruption": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.35
  },
  "falsehood_necessity": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.525
  },
  "falsehood_possibility": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.4
  },
  "falsehood_contingency": {
    "E": 0.6,
    "G": 0.4,
    "T": 0.35
  },
  "falsehood_actuality": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_potentiality": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.4
  },
  "falsehood_identity": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "falsehood_contradiction": {
    "E": 0.65,
    "G": 0.2,
    "T": 0.1
  },
  "falsehood_excluded_middle": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.525
  },
  "falsehood_infinity": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "falsehood_eternity": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "falsehood_transcendence": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.5
  },
  "falsehood_immanence": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_omnipotence": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.5
  },
  "falsehood_omniscience": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.525
  },
  "falsehood_omnipresence": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.5
  },
  "falsehood_church": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_worship": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "falsehood_communion": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "falsehood_baptism": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "falsehood_science": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.475
  },
  "falsehood_mathematics": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.525
  },
  "falsehood_philosophy": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.475
  },
  "falsehood_theology": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.475
  },
  "falsehood_epistemology": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.5
  },
  "falsehood_space": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_time": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_causality": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.475
  },
  "falsehood_determinism": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.45
  },
  "falsehood_freedom": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "falsehood_will": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_mind": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.475
  },
  "falsehood_soul": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.475
  },
  "falsehood_consciousness": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.475
  },
  "falsehood_human": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_person": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_individual": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_community": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_family": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "falsehood_society": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_law": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.475
  },
  "falsehood_authority": {
    "E": 0.725,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_power": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.45
  },
  "falsehood_sovereignty": {
    "E": 0.725,
    "G": 0.5,
    "T": 0.475
  },
  "falsehood_beauty": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "falsehood_harmony": {
    "E": 0.7,
    "G": 0.55,
    "T": 0.45
  },
  "falsehood_order": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.475
  },
  "falsehood_chaos": {
    "E": 0.65,
    "G": 0.25,
    "T": 0.35
  },
  "falsehood_complexity": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.45
  },
  "falsehood_simplicity": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.475
  },
  "falsehood_purpose": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "falsehood_meaning": {
    "E": 0.7,
    "G": 0.525,
    "T": 0.45
  },
  "falsehood_teleology": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.45
  },
  "falsehood_providence": {
    "E": 0.725,
    "G": 0.55,
    "T": 0.475
  },
  "falsehood_destiny": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.4
  },
  "falsehood_judgment": {
    "E": 0.725,
    "G": 0.525,
    "T": 0.475
  },
  "falsehood_reconciliation": {
    "E": 0.725,
    "G": 0.575,
    "T": 0.475
  },
  "falsehood_trinity_law": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.525
  },
  "falsehood_3pdn": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.525
  },
  "deception_corruption": {
    "E": 0.75,
    "G": 0.1,
    "T": 0.35
  },
  "deception_necessity": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.525
  },
  "deception_possibility": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.4
  },
  "deception_contingency": {
    "E": 0.65,
    "G": 0.35,
    "T": 0.35
  },
  "deception_actuality": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "deception_potentiality": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.4
  },
  "deception_identity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.5
  },
  "deception_contradiction": {
    "E": 0.7,
    "G": 0.15,
    "T": 0.1
  },
  "deception_excluded_middle": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.525
  },
  "deception_infinity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.5
  },
  "deception_eternity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.5
  },
  "deception_transcendence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "deception_immanence": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "deception_omnipotence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "deception_omniscience": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.525
  },
  "deception_omnipresence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.5
  },
  "deception_church": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "deception_worship": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.45
  },
  "deception_communion": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "deception_baptism": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.45
  },
  "deception_science": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.475
  },
  "deception_mathematics": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.525
  },
  "deception_philosophy": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "deception_theology": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.475
  },
  "deception_epistemology": {
    "E": 0.7,
    "G": 0.4,
    "T": 0.5
  },
  "deception_space": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "deception_time": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "deception_causality": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.475
  },
  "deception_determinism": {
    "E": 0.75,
    "G": 0.35,
    "T": 0.45
  },
  "deception_freedom": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "deception_will": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.45
  },
  "deception_mind": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.475
  },
  "deception_soul": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.475
  },
  "deception_consciousness": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.475
  },
  "deception_human": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "deception_person": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "deception_individual": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "deception_community": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "deception_family": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.45
  },
  "deception_society": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "deception_law": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.475
  },
  "deception_authority": {
    "E": 0.775,
    "G": 0.4,
    "T": 0.45
  },
  "deception_power": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.45
  },
  "deception_sovereignty": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.475
  },
  "deception_beauty": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "deception_harmony": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "deception_order": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.475
  },
  "deception_chaos": {
    "E": 0.7,
    "G": 0.2,
    "T": 0.35
  },
  "deception_complexity": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.45
  },
  "deception_simplicity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "deception_purpose": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.45
  },
  "deception_meaning": {
    "E": 0.75,
    "G": 0.475,
    "T": 0.45
  },
  "deception_teleology": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "deception_providence": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.475
  },
  "deception_destiny": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.4
  },
  "deception_judgment": {
    "E": 0.775,
    "G": 0.475,
    "T": 0.475
  },
  "deception_reconciliation": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "deception_trinity_law": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "deception_3pdn": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "corruption_necessity": {
    "E": 0.875,
    "G": 0.475,
    "T": 0.775
  },
  "corruption_possibility": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.65
  },
  "corruption_contingency": {
    "E": 0.7,
    "G": 0.35,
    "T": 0.6
  },
  "corruption_actuality": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_potentiality": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.65
  },
  "corruption_identity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.75
  },
  "corruption_contradiction": {
    "E": 0.75,
    "G": 0.15,
    "T": 0.35
  },
  "corruption_excluded_middle": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "corruption_infinity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.75
  },
  "corruption_eternity": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.75
  },
  "corruption_transcendence": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.75
  },
  "corruption_immanence": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_omnipotence": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.75
  },
  "corruption_omniscience": {
    "E": 0.85,
    "G": 0.5,
    "T": 0.775
  },
  "corruption_omnipresence": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.75
  },
  "corruption_church": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_worship": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.7
  },
  "corruption_communion": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "corruption_baptism": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.7
  },
  "corruption_science": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.725
  },
  "corruption_mathematics": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.775
  },
  "corruption_philosophy": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.725
  },
  "corruption_theology": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.725
  },
  "corruption_epistemology": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.75
  },
  "corruption_space": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_time": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_causality": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.725
  },
  "corruption_determinism": {
    "E": 0.8,
    "G": 0.35,
    "T": 0.7
  },
  "corruption_freedom": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "corruption_will": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_mind": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.725
  },
  "corruption_soul": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.725
  },
  "corruption_consciousness": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.725
  },
  "corruption_human": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_person": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_individual": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_community": {
    "E": 0.85,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_family": {
    "E": 0.85,
    "G": 0.475,
    "T": 0.7
  },
  "corruption_society": {
    "E": 0.85,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_law": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.725
  },
  "corruption_authority": {
    "E": 0.825,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_power": {
    "E": 0.85,
    "G": 0.35,
    "T": 0.7
  },
  "corruption_sovereignty": {
    "E": 0.825,
    "G": 0.45,
    "T": 0.725
  },
  "corruption_beauty": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "corruption_harmony": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "corruption_order": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.725
  },
  "corruption_chaos": {
    "E": 0.75,
    "G": 0.2,
    "T": 0.6
  },
  "corruption_complexity": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.7
  },
  "corruption_simplicity": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.725
  },
  "corruption_purpose": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.7
  },
  "corruption_meaning": {
    "E": 0.8,
    "G": 0.475,
    "T": 0.7
  },
  "corruption_teleology": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.7
  },
  "corruption_providence": {
    "E": 0.825,
    "G": 0.5,
    "T": 0.725
  },
  "corruption_destiny": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.65
  },
  "corruption_judgment": {
    "E": 0.825,
    "G": 0.475,
    "T": 0.725
  },
  "corruption_reconciliation": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.725
  },
  "corruption_trinity_law": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.775
  },
  "corruption_3pdn": {
    "E": 0.875,
    "G": 0.525,
    "T": 0.775
  },
  "necessity_possibility": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "necessity_contingency": {
    "E": 0.775,
    "G": 0.725,
    "T": 0.775
  },
  "necessity_actuality": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_potentiality": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "necessity_identity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.925
  },
  "necessity_contradiction": {
    "E": 0.825,
    "G": 0.525,
    "T": 0.525
  },
  "necessity_excluded_middle": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.95
  },
  "necessity_infinity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.925
  },
  "necessity_eternity": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.925
  },
  "necessity_transcendence": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "necessity_immanence": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_omnipotence": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "necessity_omniscience": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.95
  },
  "necessity_omnipresence": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.925
  },
  "necessity_church": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_worship": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "necessity_communion": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "necessity_baptism": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "necessity_science": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.9
  },
  "necessity_mathematics": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.95
  },
  "necessity_philosophy": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "necessity_theology": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "necessity_epistemology": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.925
  },
  "necessity_space": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_time": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_causality": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.9
  },
  "necessity_determinism": {
    "E": 0.875,
    "G": 0.725,
    "T": 0.875
  },
  "necessity_freedom": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "necessity_will": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_mind": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "necessity_soul": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "necessity_consciousness": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "necessity_human": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_person": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_individual": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_community": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_family": {
    "E": 0.925,
    "G": 0.85,
    "T": 0.875
  },
  "necessity_society": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_law": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "necessity_authority": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_power": {
    "E": 0.925,
    "G": 0.725,
    "T": 0.875
  },
  "necessity_sovereignty": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "necessity_beauty": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "necessity_harmony": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "necessity_order": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "necessity_chaos": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.775
  },
  "necessity_complexity": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "necessity_simplicity": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "necessity_purpose": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "necessity_meaning": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "necessity_teleology": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "necessity_providence": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "necessity_destiny": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "necessity_judgment": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "necessity_reconciliation": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "necessity_trinity_law": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "necessity_3pdn": {
    "E": 0.95,
    "G": 0.9,
    "T": 0.95
  },
  "possibility_contingency": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.65
  },
  "possibility_actuality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_potentiality": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.7
  },
  "possibility_identity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "possibility_contradiction": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.4
  },
  "possibility_excluded_middle": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "possibility_infinity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "possibility_eternity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "possibility_transcendence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "possibility_immanence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_omnipotence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "possibility_omniscience": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "possibility_omnipresence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "possibility_church": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_worship": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "possibility_communion": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "possibility_baptism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "possibility_science": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.775
  },
  "possibility_mathematics": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "possibility_philosophy": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "possibility_theology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.775
  },
  "possibility_epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.8
  },
  "possibility_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.775
  },
  "possibility_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.75
  },
  "possibility_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "possibility_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "possibility_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "possibility_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "possibility_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.75
  },
  "possibility_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "possibility_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.75
  },
  "possibility_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "possibility_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "possibility_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "possibility_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "possibility_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.65
  },
  "possibility_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "possibility_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "possibility_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "possibility_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "possibility_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "possibility_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.775
  },
  "possibility_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.7
  },
  "possibility_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "possibility_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "possibility_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "possibility_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "contingency_actuality": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_potentiality": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.65
  },
  "contingency_identity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "contingency_contradiction": {
    "E": 0.65,
    "G": 0.4,
    "T": 0.35
  },
  "contingency_excluded_middle": {
    "E": 0.7,
    "G": 0.65,
    "T": 0.775
  },
  "contingency_infinity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "contingency_eternity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "contingency_transcendence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "contingency_immanence": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_omnipotence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "contingency_omniscience": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "contingency_omnipresence": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "contingency_church": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_worship": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.7
  },
  "contingency_communion": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.7
  },
  "contingency_baptism": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.7
  },
  "contingency_science": {
    "E": 0.7,
    "G": 0.65,
    "T": 0.725
  },
  "contingency_mathematics": {
    "E": 0.7,
    "G": 0.65,
    "T": 0.775
  },
  "contingency_philosophy": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.725
  },
  "contingency_theology": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.725
  },
  "contingency_epistemology": {
    "E": 0.65,
    "G": 0.65,
    "T": 0.75
  },
  "contingency_space": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_time": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_causality": {
    "E": 0.725,
    "G": 0.65,
    "T": 0.725
  },
  "contingency_determinism": {
    "E": 0.7,
    "G": 0.6,
    "T": 0.7
  },
  "contingency_freedom": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.7
  },
  "contingency_will": {
    "E": 0.725,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_mind": {
    "E": 0.725,
    "G": 0.7,
    "T": 0.725
  },
  "contingency_soul": {
    "E": 0.725,
    "G": 0.725,
    "T": 0.725
  },
  "contingency_consciousness": {
    "E": 0.725,
    "G": 0.7,
    "T": 0.725
  },
  "contingency_human": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_person": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_individual": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_community": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_family": {
    "E": 0.75,
    "G": 0.725,
    "T": 0.7
  },
  "contingency_society": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_law": {
    "E": 0.725,
    "G": 0.725,
    "T": 0.725
  },
  "contingency_authority": {
    "E": 0.725,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_power": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "contingency_sovereignty": {
    "E": 0.725,
    "G": 0.7,
    "T": 0.725
  },
  "contingency_beauty": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.7
  },
  "contingency_harmony": {
    "E": 0.7,
    "G": 0.75,
    "T": 0.7
  },
  "contingency_order": {
    "E": 0.725,
    "G": 0.725,
    "T": 0.725
  },
  "contingency_chaos": {
    "E": 0.65,
    "G": 0.45,
    "T": 0.6
  },
  "contingency_complexity": {
    "E": 0.7,
    "G": 0.65,
    "T": 0.7
  },
  "contingency_simplicity": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.725
  },
  "contingency_purpose": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.7
  },
  "contingency_meaning": {
    "E": 0.7,
    "G": 0.725,
    "T": 0.7
  },
  "contingency_teleology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.7
  },
  "contingency_providence": {
    "E": 0.725,
    "G": 0.75,
    "T": 0.725
  },
  "contingency_destiny": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.65
  },
  "contingency_judgment": {
    "E": 0.725,
    "G": 0.725,
    "T": 0.725
  },
  "contingency_reconciliation": {
    "E": 0.725,
    "G": 0.775,
    "T": 0.725
  },
  "contingency_trinity_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "contingency_3pdn": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "actuality_potentiality": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "actuality_identity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "actuality_contradiction": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "actuality_excluded_middle": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "actuality_infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "actuality_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "actuality_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "actuality_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "actuality_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "actuality_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "actuality_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "actuality_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "actuality_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "actuality_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "actuality_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "actuality_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "actuality_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "actuality_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "actuality_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "actuality_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "actuality_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "actuality_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "actuality_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "actuality_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "actuality_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "actuality_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "actuality_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "actuality_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "actuality_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "actuality_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "actuality_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "actuality_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "actuality_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "actuality_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "actuality_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "actuality_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "actuality_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "actuality_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "actuality_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "actuality_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "actuality_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "actuality_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "actuality_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "potentiality_identity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "potentiality_contradiction": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.4
  },
  "potentiality_excluded_middle": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "potentiality_infinity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "potentiality_eternity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "potentiality_transcendence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "potentiality_immanence": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_omnipotence": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "potentiality_omniscience": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "potentiality_omnipresence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "potentiality_church": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_worship": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "potentiality_communion": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "potentiality_baptism": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "potentiality_science": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.775
  },
  "potentiality_mathematics": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.825
  },
  "potentiality_philosophy": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "potentiality_theology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.775
  },
  "potentiality_epistemology": {
    "E": 0.7,
    "G": 0.7,
    "T": 0.8
  },
  "potentiality_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.775
  },
  "potentiality_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.75
  },
  "potentiality_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "potentiality_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "potentiality_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "potentiality_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "potentiality_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.75
  },
  "potentiality_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "potentiality_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.75
  },
  "potentiality_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.775
  },
  "potentiality_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "potentiality_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.75
  },
  "potentiality_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "potentiality_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.65
  },
  "potentiality_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.75
  },
  "potentiality_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.775
  },
  "potentiality_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "potentiality_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.75
  },
  "potentiality_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.75
  },
  "potentiality_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.775
  },
  "potentiality_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.7
  },
  "potentiality_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.775
  },
  "potentiality_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.775
  },
  "potentiality_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "potentiality_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "identity_contradiction": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "identity_excluded_middle": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "identity_infinity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "identity_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "identity_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "identity_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "identity_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "identity_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "identity_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "identity_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "identity_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "identity_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "identity_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "identity_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "identity_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "identity_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "identity_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "identity_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "identity_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "identity_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "identity_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "identity_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "identity_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "identity_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "identity_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "identity_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "identity_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "identity_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "identity_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "identity_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "identity_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "identity_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "identity_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "identity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "identity_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "identity_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "identity_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "identity_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "identity_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "identity_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "identity_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.75
  },
  "identity_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "identity_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "identity_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "identity_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "identity_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "identity_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "identity_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "identity_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "identity_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "identity_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "identity_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "contradiction_excluded_middle": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.525
  },
  "contradiction_infinity": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "contradiction_eternity": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "contradiction_transcendence": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.5
  },
  "contradiction_immanence": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_omnipotence": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.5
  },
  "contradiction_omniscience": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.525
  },
  "contradiction_omnipresence": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.5
  },
  "contradiction_church": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_worship": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "contradiction_communion": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.45
  },
  "contradiction_baptism": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "contradiction_science": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.475
  },
  "contradiction_mathematics": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.525
  },
  "contradiction_philosophy": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.475
  },
  "contradiction_theology": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.475
  },
  "contradiction_epistemology": {
    "E": 0.7,
    "G": 0.45,
    "T": 0.5
  },
  "contradiction_space": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_time": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_causality": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.475
  },
  "contradiction_determinism": {
    "E": 0.75,
    "G": 0.4,
    "T": 0.45
  },
  "contradiction_freedom": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.45
  },
  "contradiction_will": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_mind": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.475
  },
  "contradiction_soul": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "contradiction_consciousness": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.475
  },
  "contradiction_human": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_person": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_individual": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_community": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_family": {
    "E": 0.8,
    "G": 0.525,
    "T": 0.45
  },
  "contradiction_society": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_law": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "contradiction_authority": {
    "E": 0.775,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_power": {
    "E": 0.8,
    "G": 0.4,
    "T": 0.45
  },
  "contradiction_sovereignty": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.475
  },
  "contradiction_beauty": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.45
  },
  "contradiction_harmony": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.45
  },
  "contradiction_order": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "contradiction_chaos": {
    "E": 0.7,
    "G": 0.25,
    "T": 0.35
  },
  "contradiction_complexity": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.45
  },
  "contradiction_simplicity": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.475
  },
  "contradiction_purpose": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "contradiction_meaning": {
    "E": 0.75,
    "G": 0.525,
    "T": 0.45
  },
  "contradiction_teleology": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.45
  },
  "contradiction_providence": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.475
  },
  "contradiction_destiny": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.4
  },
  "contradiction_judgment": {
    "E": 0.775,
    "G": 0.525,
    "T": 0.475
  },
  "contradiction_reconciliation": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.475
  },
  "contradiction_trinity_law": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.525
  },
  "contradiction_3pdn": {
    "E": 0.825,
    "G": 0.575,
    "T": 0.525
  },
  "excluded_middle_infinity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "excluded_middle_eternity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "excluded_middle_transcendence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "excluded_middle_immanence": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_omnipotence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "excluded_middle_omniscience": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.95
  },
  "excluded_middle_omnipresence": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "excluded_middle_church": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_worship": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "excluded_middle_communion": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "excluded_middle_baptism": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "excluded_middle_science": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.9
  },
  "excluded_middle_mathematics": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.95
  },
  "excluded_middle_philosophy": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "excluded_middle_theology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "excluded_middle_epistemology": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.925
  },
  "excluded_middle_space": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_time": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_causality": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.9
  },
  "excluded_middle_determinism": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.875
  },
  "excluded_middle_freedom": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "excluded_middle_will": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_mind": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "excluded_middle_soul": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "excluded_middle_consciousness": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "excluded_middle_human": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_person": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_individual": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_community": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_family": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "excluded_middle_society": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_law": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "excluded_middle_authority": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_power": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.875
  },
  "excluded_middle_sovereignty": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "excluded_middle_beauty": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "excluded_middle_harmony": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "excluded_middle_order": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "excluded_middle_chaos": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.775
  },
  "excluded_middle_complexity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "excluded_middle_simplicity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "excluded_middle_purpose": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "excluded_middle_meaning": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "excluded_middle_teleology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "excluded_middle_providence": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "excluded_middle_destiny": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "excluded_middle_judgment": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "excluded_middle_reconciliation": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "excluded_middle_trinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "excluded_middle_3pdn": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "infinity_eternity": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "infinity_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "infinity_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "infinity_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "infinity_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "infinity_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "infinity_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "infinity_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "infinity_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "infinity_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "infinity_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "infinity_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "infinity_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "infinity_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "infinity_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "infinity_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "infinity_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "infinity_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "infinity_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "infinity_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "infinity_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "infinity_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "infinity_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "infinity_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "infinity_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "infinity_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "infinity_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.75
  },
  "infinity_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "infinity_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "infinity_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "infinity_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "infinity_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "infinity_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "infinity_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "infinity_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "infinity_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "infinity_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "infinity_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "eternity_transcendence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "eternity_immanence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_omnipotence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "eternity_omniscience": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "eternity_omnipresence": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.9
  },
  "eternity_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "eternity_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "eternity_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "eternity_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "eternity_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "eternity_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "eternity_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "eternity_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "eternity_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "eternity_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "eternity_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "eternity_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "eternity_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "eternity_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "eternity_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "eternity_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "eternity_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "eternity_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "eternity_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "eternity_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "eternity_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "eternity_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.75
  },
  "eternity_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "eternity_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "eternity_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "eternity_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "eternity_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "eternity_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "eternity_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "eternity_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "eternity_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "eternity_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "eternity_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "transcendence_immanence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_omnipotence": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "transcendence_omniscience": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "transcendence_omnipresence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "transcendence_church": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_worship": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "transcendence_communion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "transcendence_baptism": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "transcendence_science": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "transcendence_mathematics": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "transcendence_philosophy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "transcendence_theology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "transcendence_epistemology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "transcendence_space": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_time": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_causality": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "transcendence_determinism": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "transcendence_freedom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "transcendence_will": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_mind": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "transcendence_soul": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "transcendence_consciousness": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "transcendence_human": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_person": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_individual": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_community": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_family": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "transcendence_society": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "transcendence_authority": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_power": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "transcendence_sovereignty": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "transcendence_beauty": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "transcendence_harmony": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "transcendence_order": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "transcendence_chaos": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.75
  },
  "transcendence_complexity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "transcendence_simplicity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "transcendence_purpose": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "transcendence_meaning": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "transcendence_teleology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "transcendence_providence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "transcendence_destiny": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "transcendence_judgment": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "transcendence_reconciliation": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "transcendence_trinity_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "transcendence_3pdn": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "immanence_omnipotence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "immanence_omniscience": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "immanence_omnipresence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "immanence_church": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_worship": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "immanence_communion": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "immanence_baptism": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "immanence_science": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "immanence_mathematics": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "immanence_philosophy": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "immanence_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "immanence_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "immanence_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "immanence_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.8
  },
  "immanence_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "immanence_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "immanence_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "immanence_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "immanence_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "immanence_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "immanence_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "immanence_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "immanence_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "immanence_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "immanence_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "immanence_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.7
  },
  "immanence_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "immanence_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "immanence_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "immanence_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "immanence_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "immanence_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "immanence_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.75
  },
  "immanence_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "immanence_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "immanence_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "immanence_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_omniscience": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.925
  },
  "omnipotence_omnipresence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.9
  },
  "omnipotence_church": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_worship": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "omnipotence_communion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "omnipotence_baptism": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "omnipotence_science": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "omnipotence_mathematics": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.925
  },
  "omnipotence_philosophy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "omnipotence_theology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_epistemology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.9
  },
  "omnipotence_space": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_time": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_causality": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "omnipotence_determinism": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "omnipotence_freedom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "omnipotence_will": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_mind": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "omnipotence_soul": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_consciousness": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "omnipotence_human": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_person": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_individual": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_community": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_family": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.85
  },
  "omnipotence_society": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_authority": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_power": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "omnipotence_sovereignty": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "omnipotence_beauty": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "omnipotence_harmony": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "omnipotence_order": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_chaos": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.75
  },
  "omnipotence_complexity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "omnipotence_simplicity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "omnipotence_purpose": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "omnipotence_meaning": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "omnipotence_teleology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "omnipotence_providence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "omnipotence_destiny": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "omnipotence_judgment": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipotence_reconciliation": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "omnipotence_trinity_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "omnipotence_3pdn": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.925
  },
  "omniscience_omnipresence": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.925
  },
  "omniscience_church": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_worship": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "omniscience_communion": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "omniscience_baptism": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "omniscience_science": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.9
  },
  "omniscience_mathematics": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.95
  },
  "omniscience_philosophy": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "omniscience_theology": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.9
  },
  "omniscience_epistemology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.925
  },
  "omniscience_space": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_time": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_causality": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.9
  },
  "omniscience_determinism": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "omniscience_freedom": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "omniscience_will": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_mind": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "omniscience_soul": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "omniscience_consciousness": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "omniscience_human": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_person": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_individual": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_community": {
    "E": 0.9,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_family": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "omniscience_society": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "omniscience_authority": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_power": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.875
  },
  "omniscience_sovereignty": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.9
  },
  "omniscience_beauty": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "omniscience_harmony": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.875
  },
  "omniscience_order": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "omniscience_chaos": {
    "E": 0.8,
    "G": 0.6,
    "T": 0.775
  },
  "omniscience_complexity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "omniscience_simplicity": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.9
  },
  "omniscience_purpose": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "omniscience_meaning": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.875
  },
  "omniscience_teleology": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.875
  },
  "omniscience_providence": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "omniscience_destiny": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "omniscience_judgment": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "omniscience_reconciliation": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.9
  },
  "omniscience_trinity_law": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.95
  },
  "omniscience_3pdn": {
    "E": 0.925,
    "G": 0.925,
    "T": 0.95
  },
  "omnipresence_church": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "omnipresence_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "omnipresence_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "omnipresence_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "omnipresence_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.925
  },
  "omnipresence_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "omnipresence_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.875
  },
  "omnipresence_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "omnipresence_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.875
  },
  "omnipresence_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.85
  },
  "omnipresence_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "omnipresence_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "omnipresence_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "omnipresence_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "omnipresence_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.85
  },
  "omnipresence_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "omnipresence_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.85
  },
  "omnipresence_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.875
  },
  "omnipresence_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "omnipresence_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "omnipresence_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "omnipresence_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.75
  },
  "omnipresence_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "omnipresence_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.875
  },
  "omnipresence_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "omnipresence_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "omnipresence_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "omnipresence_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.875
  },
  "omnipresence_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "omnipresence_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "omnipresence_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "omnipresence_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "omnipresence_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.925
  },
  "church_worship": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "church_communion": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "church_baptism": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "church_science": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "church_mathematics": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "church_philosophy": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "church_theology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "church_epistemology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "church_space": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "church_time": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "church_causality": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "church_determinism": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "church_freedom": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "church_will": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "church_mind": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "church_soul": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "church_consciousness": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "church_human": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "church_person": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "church_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "church_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "church_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "church_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "church_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "church_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "church_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "church_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "church_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "church_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "church_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "church_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "church_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "church_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "church_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "church_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "church_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "church_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "church_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "church_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "church_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "church_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "church_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "worship_communion": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "worship_baptism": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "worship_science": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "worship_mathematics": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "worship_philosophy": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "worship_theology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "worship_epistemology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "worship_space": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "worship_time": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "worship_causality": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "worship_determinism": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.8
  },
  "worship_freedom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "worship_will": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "worship_mind": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "worship_soul": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "worship_consciousness": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "worship_human": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "worship_person": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "worship_individual": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "worship_community": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "worship_family": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "worship_society": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "worship_law": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "worship_authority": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.8
  },
  "worship_power": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.8
  },
  "worship_sovereignty": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "worship_beauty": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "worship_harmony": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "worship_order": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "worship_chaos": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.7
  },
  "worship_complexity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "worship_simplicity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "worship_purpose": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "worship_meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "worship_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "worship_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "worship_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.75
  },
  "worship_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "worship_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "worship_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "worship_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "communion_baptism": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "communion_science": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "communion_mathematics": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "communion_philosophy": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "communion_theology": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "communion_epistemology": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "communion_space": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "communion_time": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "communion_causality": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "communion_determinism": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "communion_freedom": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "communion_will": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "communion_mind": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "communion_soul": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "communion_consciousness": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "communion_human": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "communion_person": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "communion_individual": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "communion_community": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "communion_family": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "communion_society": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "communion_law": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "communion_authority": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "communion_power": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "communion_sovereignty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "communion_beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "communion_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "communion_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "communion_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "communion_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "communion_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "communion_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "communion_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "communion_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "communion_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "communion_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "communion_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "communion_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "communion_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "communion_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "baptism_science": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "baptism_mathematics": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "baptism_philosophy": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "baptism_theology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "baptism_epistemology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "baptism_space": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_time": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_causality": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "baptism_determinism": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.8
  },
  "baptism_freedom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "baptism_will": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "baptism_mind": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "baptism_soul": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "baptism_consciousness": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "baptism_human": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_person": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "baptism_individual": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "baptism_community": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "baptism_family": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "baptism_society": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_law": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "baptism_authority": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_power": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.8
  },
  "baptism_sovereignty": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "baptism_beauty": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "baptism_harmony": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "baptism_order": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "baptism_chaos": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.7
  },
  "baptism_complexity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "baptism_simplicity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "baptism_purpose": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "baptism_meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "baptism_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "baptism_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "baptism_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.75
  },
  "baptism_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "baptism_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "baptism_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "baptism_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "science_mathematics": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.9
  },
  "science_philosophy": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "science_theology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "science_epistemology": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.875
  },
  "science_space": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "science_time": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "science_causality": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.85
  },
  "science_determinism": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.825
  },
  "science_freedom": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "science_will": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "science_mind": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "science_soul": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "science_consciousness": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "science_human": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "science_person": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "science_individual": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "science_community": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "science_family": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "science_society": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "science_law": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "science_authority": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "science_power": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.825
  },
  "science_sovereignty": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "science_beauty": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "science_harmony": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "science_order": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "science_chaos": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.725
  },
  "science_complexity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "science_simplicity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "science_purpose": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "science_meaning": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "science_teleology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "science_providence": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "science_destiny": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.775
  },
  "science_judgment": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "science_reconciliation": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "science_trinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "science_3pdn": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.9
  },
  "mathematics_philosophy": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "mathematics_theology": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.9
  },
  "mathematics_epistemology": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.925
  },
  "mathematics_space": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_time": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_causality": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.9
  },
  "mathematics_determinism": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.875
  },
  "mathematics_freedom": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "mathematics_will": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.875
  },
  "mathematics_mind": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "mathematics_soul": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "mathematics_consciousness": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "mathematics_human": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_person": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "mathematics_individual": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "mathematics_community": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.875
  },
  "mathematics_family": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.875
  },
  "mathematics_society": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_law": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "mathematics_authority": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_power": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.875
  },
  "mathematics_sovereignty": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.9
  },
  "mathematics_beauty": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "mathematics_harmony": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.875
  },
  "mathematics_order": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "mathematics_chaos": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.775
  },
  "mathematics_complexity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.875
  },
  "mathematics_simplicity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.9
  },
  "mathematics_purpose": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "mathematics_meaning": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.875
  },
  "mathematics_teleology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.875
  },
  "mathematics_providence": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.9
  },
  "mathematics_destiny": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "mathematics_judgment": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.9
  },
  "mathematics_reconciliation": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.9
  },
  "mathematics_trinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "mathematics_3pdn": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.95
  },
  "philosophy_theology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "philosophy_epistemology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "philosophy_space": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_time": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_causality": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "philosophy_determinism": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "philosophy_freedom": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "philosophy_will": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "philosophy_mind": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "philosophy_soul": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "philosophy_consciousness": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "philosophy_human": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_person": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "philosophy_individual": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "philosophy_community": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "philosophy_family": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "philosophy_society": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "philosophy_authority": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_power": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "philosophy_sovereignty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "philosophy_beauty": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "philosophy_harmony": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "philosophy_order": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "philosophy_chaos": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.725
  },
  "philosophy_complexity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "philosophy_simplicity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.85
  },
  "philosophy_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "philosophy_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "philosophy_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "philosophy_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "philosophy_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "philosophy_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "philosophy_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "philosophy_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "philosophy_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "theology_epistemology": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.875
  },
  "theology_space": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "theology_time": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "theology_causality": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.85
  },
  "theology_determinism": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.825
  },
  "theology_freedom": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "theology_will": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "theology_mind": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "theology_soul": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "theology_consciousness": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "theology_human": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "theology_person": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "theology_individual": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "theology_community": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "theology_family": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "theology_society": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "theology_law": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "theology_authority": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "theology_power": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.825
  },
  "theology_sovereignty": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "theology_beauty": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "theology_harmony": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.825
  },
  "theology_order": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "theology_chaos": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.725
  },
  "theology_complexity": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.825
  },
  "theology_simplicity": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.85
  },
  "theology_purpose": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "theology_meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "theology_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "theology_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "theology_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.775
  },
  "theology_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "theology_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.85
  },
  "theology_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "theology_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.9
  },
  "epistemology_space": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_time": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_causality": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.875
  },
  "epistemology_determinism": {
    "E": 0.75,
    "G": 0.65,
    "T": 0.85
  },
  "epistemology_freedom": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "epistemology_will": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.85
  },
  "epistemology_mind": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "epistemology_soul": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "epistemology_consciousness": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "epistemology_human": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_person": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "epistemology_individual": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "epistemology_community": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.85
  },
  "epistemology_family": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.85
  },
  "epistemology_society": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_law": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "epistemology_authority": {
    "E": 0.775,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_power": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.85
  },
  "epistemology_sovereignty": {
    "E": 0.775,
    "G": 0.75,
    "T": 0.875
  },
  "epistemology_beauty": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "epistemology_harmony": {
    "E": 0.75,
    "G": 0.8,
    "T": 0.85
  },
  "epistemology_order": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "epistemology_chaos": {
    "E": 0.7,
    "G": 0.5,
    "T": 0.75
  },
  "epistemology_complexity": {
    "E": 0.75,
    "G": 0.7,
    "T": 0.85
  },
  "epistemology_simplicity": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.875
  },
  "epistemology_purpose": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "epistemology_meaning": {
    "E": 0.75,
    "G": 0.775,
    "T": 0.85
  },
  "epistemology_teleology": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.85
  },
  "epistemology_providence": {
    "E": 0.775,
    "G": 0.8,
    "T": 0.875
  },
  "epistemology_destiny": {
    "E": 0.75,
    "G": 0.75,
    "T": 0.8
  },
  "epistemology_judgment": {
    "E": 0.775,
    "G": 0.775,
    "T": 0.875
  },
  "epistemology_reconciliation": {
    "E": 0.775,
    "G": 0.825,
    "T": 0.875
  },
  "epistemology_trinity_law": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "epistemology_3pdn": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.925
  },
  "space_time": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "space_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "space_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "space_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "space_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "space_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "space_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "space_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "space_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "space_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "space_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "space_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "space_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "space_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "space_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "space_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "space_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "space_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "space_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "space_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "space_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "space_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "space_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "space_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "space_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "space_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "space_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "space_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "space_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "space_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "space_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "space_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "space_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "time_causality": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "time_determinism": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "time_freedom": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "time_will": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "time_mind": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "time_soul": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "time_consciousness": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "time_human": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "time_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "time_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "time_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "time_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "time_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "time_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "time_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "time_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "time_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "time_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "time_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "time_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "time_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "time_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "time_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "time_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "time_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "time_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "time_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "time_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "time_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "time_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "time_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "time_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "causality_determinism": {
    "E": 0.825,
    "G": 0.65,
    "T": 0.825
  },
  "causality_freedom": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "causality_will": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "causality_mind": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "causality_soul": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "causality_consciousness": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "causality_human": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "causality_person": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "causality_individual": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "causality_community": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "causality_family": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "causality_society": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "causality_law": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "causality_authority": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "causality_power": {
    "E": 0.875,
    "G": 0.65,
    "T": 0.825
  },
  "causality_sovereignty": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.85
  },
  "causality_beauty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "causality_harmony": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "causality_order": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "causality_chaos": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.725
  },
  "causality_complexity": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "causality_simplicity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.85
  },
  "causality_purpose": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "causality_meaning": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "causality_teleology": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "causality_providence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "causality_destiny": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.775
  },
  "causality_judgment": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.85
  },
  "causality_reconciliation": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "causality_trinity_law": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "causality_3pdn": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.9
  },
  "determinism_freedom": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "determinism_will": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.8
  },
  "determinism_mind": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "determinism_soul": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.825
  },
  "determinism_consciousness": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "determinism_human": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "determinism_person": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "determinism_individual": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "determinism_community": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "determinism_family": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.8
  },
  "determinism_society": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "determinism_law": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.825
  },
  "determinism_authority": {
    "E": 0.825,
    "G": 0.65,
    "T": 0.8
  },
  "determinism_power": {
    "E": 0.85,
    "G": 0.6,
    "T": 0.8
  },
  "determinism_sovereignty": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.825
  },
  "determinism_beauty": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "determinism_harmony": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "determinism_order": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.825
  },
  "determinism_chaos": {
    "E": 0.75,
    "G": 0.45,
    "T": 0.7
  },
  "determinism_complexity": {
    "E": 0.8,
    "G": 0.65,
    "T": 0.8
  },
  "determinism_simplicity": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.825
  },
  "determinism_purpose": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.8
  },
  "determinism_meaning": {
    "E": 0.8,
    "G": 0.725,
    "T": 0.8
  },
  "determinism_teleology": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.8
  },
  "determinism_providence": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "determinism_destiny": {
    "E": 0.8,
    "G": 0.7,
    "T": 0.75
  },
  "determinism_judgment": {
    "E": 0.825,
    "G": 0.725,
    "T": 0.825
  },
  "determinism_reconciliation": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "determinism_trinity_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "determinism_3pdn": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.875
  },
  "freedom_will": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "freedom_mind": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "freedom_soul": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "freedom_consciousness": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "freedom_human": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "freedom_person": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "freedom_individual": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "freedom_community": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "freedom_family": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "freedom_society": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "freedom_law": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "freedom_authority": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "freedom_power": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "freedom_sovereignty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "freedom_beauty": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "freedom_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "freedom_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "freedom_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "freedom_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "freedom_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "freedom_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "freedom_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "freedom_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "freedom_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "freedom_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "freedom_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "freedom_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "freedom_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "freedom_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "will_mind": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "will_soul": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "will_consciousness": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "will_human": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "will_person": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "will_individual": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "will_community": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.8
  },
  "will_family": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.8
  },
  "will_society": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "will_law": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "will_authority": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "will_power": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "will_sovereignty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "will_beauty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "will_harmony": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.8
  },
  "will_order": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "will_chaos": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.7
  },
  "will_complexity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.8
  },
  "will_simplicity": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "will_purpose": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "will_meaning": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.8
  },
  "will_teleology": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "will_providence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.825
  },
  "will_destiny": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.75
  },
  "will_judgment": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "will_reconciliation": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.825
  },
  "will_trinity_law": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "will_3pdn": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.875
  },
  "mind_soul": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "mind_consciousness": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "mind_human": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "mind_person": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "mind_individual": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "mind_community": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "mind_family": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "mind_society": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "mind_law": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "mind_authority": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "mind_power": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "mind_sovereignty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "mind_beauty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "mind_harmony": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "mind_order": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "mind_chaos": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.725
  },
  "mind_complexity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "mind_simplicity": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "mind_purpose": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "mind_meaning": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "mind_teleology": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "mind_providence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "mind_destiny": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "mind_judgment": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "mind_reconciliation": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "mind_trinity_law": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "mind_3pdn": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "soul_consciousness": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "soul_human": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "soul_person": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "soul_individual": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "soul_community": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "soul_family": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "soul_society": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "soul_law": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "soul_authority": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "soul_power": {
    "E": 0.875,
    "G": 0.725,
    "T": 0.825
  },
  "soul_sovereignty": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "soul_beauty": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "soul_harmony": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "soul_order": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "soul_chaos": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.725
  },
  "soul_complexity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "soul_simplicity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "soul_purpose": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "soul_meaning": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "soul_teleology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "soul_providence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "soul_destiny": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.775
  },
  "soul_judgment": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "soul_reconciliation": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "soul_trinity_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "soul_3pdn": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "consciousness_human": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "consciousness_person": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "consciousness_individual": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "consciousness_community": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "consciousness_family": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "consciousness_society": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "consciousness_law": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "consciousness_authority": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "consciousness_power": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "consciousness_sovereignty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.85
  },
  "consciousness_beauty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "consciousness_harmony": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "consciousness_order": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "consciousness_chaos": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.725
  },
  "consciousness_complexity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "consciousness_simplicity": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "consciousness_purpose": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "consciousness_meaning": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "consciousness_teleology": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "consciousness_providence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "consciousness_destiny": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "consciousness_judgment": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "consciousness_reconciliation": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "consciousness_trinity_law": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "consciousness_3pdn": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "human_person": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "human_individual": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "human_community": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "human_family": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "human_society": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "human_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "human_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "human_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "human_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "human_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "human_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "human_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "human_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "human_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "human_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "human_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "human_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "human_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "human_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "human_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "human_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "human_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "human_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "human_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "person_individual": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "person_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "person_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "person_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "person_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "person_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "person_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "person_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "person_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "person_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "person_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "person_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "person_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "person_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "person_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "person_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "person_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "person_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "person_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "person_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "person_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "person_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "person_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "individual_community": {
    "E": 0.9,
    "G": 0.8,
    "T": 0.8
  },
  "individual_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "individual_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "individual_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "individual_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "individual_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "individual_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "individual_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "individual_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "individual_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "individual_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "individual_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "individual_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "individual_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "individual_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "individual_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "individual_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "individual_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "individual_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "individual_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "individual_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "individual_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "community_family": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.8
  },
  "community_society": {
    "E": 0.9,
    "G": 0.75,
    "T": 0.8
  },
  "community_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "community_authority": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.8
  },
  "community_power": {
    "E": 0.9,
    "G": 0.7,
    "T": 0.8
  },
  "community_sovereignty": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "community_beauty": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "community_harmony": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "community_order": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "community_chaos": {
    "E": 0.8,
    "G": 0.55,
    "T": 0.7
  },
  "community_complexity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "community_simplicity": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "community_purpose": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "community_meaning": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "community_teleology": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "community_providence": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "community_destiny": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.75
  },
  "community_judgment": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "community_reconciliation": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "community_trinity_law": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "community_3pdn": {
    "E": 0.925,
    "G": 0.875,
    "T": 0.875
  },
  "family_society": {
    "E": 0.9,
    "G": 0.775,
    "T": 0.8
  },
  "family_law": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "family_authority": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.8
  },
  "family_power": {
    "E": 0.9,
    "G": 0.725,
    "T": 0.8
  },
  "family_sovereignty": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "family_beauty": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "family_harmony": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.8
  },
  "family_order": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "family_chaos": {
    "E": 0.8,
    "G": 0.575,
    "T": 0.7
  },
  "family_complexity": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "family_simplicity": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "family_purpose": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "family_meaning": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.8
  },
  "family_teleology": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.8
  },
  "family_providence": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "family_destiny": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.75
  },
  "family_judgment": {
    "E": 0.875,
    "G": 0.85,
    "T": 0.825
  },
  "family_reconciliation": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.825
  },
  "family_trinity_law": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.875
  },
  "family_3pdn": {
    "E": 0.925,
    "G": 0.9,
    "T": 0.875
  },
  "society_law": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "society_authority": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.8
  },
  "society_power": {
    "E": 0.9,
    "G": 0.65,
    "T": 0.8
  },
  "society_sovereignty": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "society_beauty": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "society_harmony": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.8
  },
  "society_order": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "society_chaos": {
    "E": 0.8,
    "G": 0.5,
    "T": 0.7
  },
  "society_complexity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "society_simplicity": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "society_purpose": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "society_meaning": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.8
  },
  "society_teleology": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "society_providence": {
    "E": 0.875,
    "G": 0.8,
    "T": 0.825
  },
  "society_destiny": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.75
  },
  "society_judgment": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "society_reconciliation": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.825
  },
  "society_trinity_law": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "society_3pdn": {
    "E": 0.925,
    "G": 0.825,
    "T": 0.875
  },
  "law_authority": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "law_power": {
    "E": 0.875,
    "G": 0.725,
    "T": 0.825
  },
  "law_sovereignty": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "law_beauty": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "law_harmony": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "law_order": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "law_chaos": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.725
  },
  "law_complexity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "law_simplicity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "law_purpose": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "law_meaning": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "law_teleology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "law_providence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "law_destiny": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.775
  },
  "law_judgment": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "law_reconciliation": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "law_trinity_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "law_3pdn": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "authority_power": {
    "E": 0.875,
    "G": 0.65,
    "T": 0.8
  },
  "authority_sovereignty": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.825
  },
  "authority_beauty": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "authority_harmony": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.8
  },
  "authority_order": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "authority_chaos": {
    "E": 0.775,
    "G": 0.5,
    "T": 0.7
  },
  "authority_complexity": {
    "E": 0.825,
    "G": 0.7,
    "T": 0.8
  },
  "authority_simplicity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "authority_purpose": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.8
  },
  "authority_meaning": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.8
  },
  "authority_teleology": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.8
  },
  "authority_providence": {
    "E": 0.85,
    "G": 0.8,
    "T": 0.825
  },
  "authority_destiny": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.75
  },
  "authority_judgment": {
    "E": 0.85,
    "G": 0.775,
    "T": 0.825
  },
  "authority_reconciliation": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.825
  },
  "authority_trinity_law": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "authority_3pdn": {
    "E": 0.9,
    "G": 0.825,
    "T": 0.875
  },
  "power_sovereignty": {
    "E": 0.875,
    "G": 0.7,
    "T": 0.825
  },
  "power_beauty": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "power_harmony": {
    "E": 0.85,
    "G": 0.75,
    "T": 0.8
  },
  "power_order": {
    "E": 0.875,
    "G": 0.725,
    "T": 0.825
  },
  "power_chaos": {
    "E": 0.8,
    "G": 0.45,
    "T": 0.7
  },
  "power_complexity": {
    "E": 0.85,
    "G": 0.65,
    "T": 0.8
  },
  "power_simplicity": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.825
  },
  "power_purpose": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.8
  },
  "power_meaning": {
    "E": 0.85,
    "G": 0.725,
    "T": 0.8
  },
  "power_teleology": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.8
  },
  "power_providence": {
    "E": 0.875,
    "G": 0.75,
    "T": 0.825
  },
  "power_destiny": {
    "E": 0.85,
    "G": 0.7,
    "T": 0.75
  },
  "power_judgment": {
    "E": 0.875,
    "G": 0.725,
    "T": 0.825
  },
  "power_reconciliation": {
    "E": 0.875,
    "G": 0.775,
    "T": 0.825
  },
  "power_trinity_law": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "power_3pdn": {
    "E": 0.925,
    "G": 0.775,
    "T": 0.875
  },
  "sovereignty_beauty": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "sovereignty_harmony": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "sovereignty_order": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "sovereignty_chaos": {
    "E": 0.775,
    "G": 0.55,
    "T": 0.725
  },
  "sovereignty_complexity": {
    "E": 0.825,
    "G": 0.75,
    "T": 0.825
  },
  "sovereignty_simplicity": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.85
  },
  "sovereignty_purpose": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "sovereignty_meaning": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "sovereignty_teleology": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "sovereignty_providence": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "sovereignty_destiny": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.775
  },
  "sovereignty_judgment": {
    "E": 0.85,
    "G": 0.825,
    "T": 0.85
  },
  "sovereignty_reconciliation": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "sovereignty_trinity_law": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "sovereignty_3pdn": {
    "E": 0.9,
    "G": 0.875,
    "T": 0.9
  },
  "beauty_harmony": {
    "E": 0.8,
    "G": 0.9,
    "T": 0.8
  },
  "beauty_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "beauty_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "beauty_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "beauty_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "beauty_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "beauty_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "beauty_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "beauty_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "beauty_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "beauty_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "beauty_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "beauty_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "beauty_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "harmony_order": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "harmony_chaos": {
    "E": 0.75,
    "G": 0.6,
    "T": 0.7
  },
  "harmony_complexity": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.8
  },
  "harmony_simplicity": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.825
  },
  "harmony_purpose": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "harmony_meaning": {
    "E": 0.8,
    "G": 0.875,
    "T": 0.8
  },
  "harmony_teleology": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "harmony_providence": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "harmony_destiny": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.75
  },
  "harmony_judgment": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "harmony_reconciliation": {
    "E": 0.825,
    "G": 0.925,
    "T": 0.825
  },
  "harmony_trinity_law": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "harmony_3pdn": {
    "E": 0.875,
    "G": 0.925,
    "T": 0.875
  },
  "order_chaos": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.725
  },
  "order_complexity": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "order_simplicity": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "order_purpose": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "order_meaning": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "order_teleology": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "order_providence": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "order_destiny": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.775
  },
  "order_judgment": {
    "E": 0.85,
    "G": 0.85,
    "T": 0.85
  },
  "order_reconciliation": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "order_trinity_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "order_3pdn": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "chaos_complexity": {
    "E": 0.75,
    "G": 0.5,
    "T": 0.7
  },
  "chaos_simplicity": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.725
  },
  "chaos_purpose": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.7
  },
  "chaos_meaning": {
    "E": 0.75,
    "G": 0.575,
    "T": 0.7
  },
  "chaos_teleology": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.7
  },
  "chaos_providence": {
    "E": 0.775,
    "G": 0.6,
    "T": 0.725
  },
  "chaos_destiny": {
    "E": 0.75,
    "G": 0.55,
    "T": 0.65
  },
  "chaos_judgment": {
    "E": 0.775,
    "G": 0.575,
    "T": 0.725
  },
  "chaos_reconciliation": {
    "E": 0.775,
    "G": 0.625,
    "T": 0.725
  },
  "chaos_trinity_law": {
    "E": 0.825,
    "G": 0.625,
    "T": 0.775
  },
  "chaos_3pdn": {
    "E": 0.825,
    "G": 0.625,
    "T": 0.775
  },
  "complexity_simplicity": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.825
  },
  "complexity_purpose": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "complexity_meaning": {
    "E": 0.8,
    "G": 0.775,
    "T": 0.8
  },
  "complexity_teleology": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.8
  },
  "complexity_providence": {
    "E": 0.825,
    "G": 0.8,
    "T": 0.825
  },
  "complexity_destiny": {
    "E": 0.8,
    "G": 0.75,
    "T": 0.75
  },
  "complexity_judgment": {
    "E": 0.825,
    "G": 0.775,
    "T": 0.825
  },
  "complexity_reconciliation": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "complexity_trinity_law": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "complexity_3pdn": {
    "E": 0.875,
    "G": 0.825,
    "T": 0.875
  },
  "simplicity_purpose": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "simplicity_meaning": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.825
  },
  "simplicity_teleology": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.825
  },
  "simplicity_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.85
  },
  "simplicity_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.775
  },
  "simplicity_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.85
  },
  "simplicity_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.85
  },
  "simplicity_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "simplicity_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.9
  },
  "purpose_meaning": {
    "E": 0.8,
    "G": 0.85,
    "T": 0.8
  },
  "purpose_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "purpose_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "purpose_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.75
  },
  "purpose_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "purpose_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "purpose_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "purpose_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "meaning_teleology": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.8
  },
  "meaning_providence": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "meaning_destiny": {
    "E": 0.8,
    "G": 0.825,
    "T": 0.75
  },
  "meaning_judgment": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "meaning_reconciliation": {
    "E": 0.825,
    "G": 0.9,
    "T": 0.825
  },
  "meaning_trinity_law": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "meaning_3pdn": {
    "E": 0.875,
    "G": 0.9,
    "T": 0.875
  },
  "teleology_providence": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.825
  },
  "teleology_destiny": {
    "E": 0.8,
    "G": 0.8,
    "T": 0.75
  },
  "teleology_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.825
  },
  "teleology_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.825
  },
  "teleology_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "teleology_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.875
  },
  "providence_destiny": {
    "E": 0.825,
    "G": 0.85,
    "T": 0.775
  },
  "providence_judgment": {
    "E": 0.85,
    "G": 0.875,
    "T": 0.85
  },
  "providence_reconciliation": {
    "E": 0.85,
    "G": 0.925,
    "T": 0.85
  },
  "providence_trinity_law": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "providence_3pdn": {
    "E": 0.9,
    "G": 0.925,
    "T": 0.9
  },
  "destiny_judgment": {
    "E": 0.825,
    "G": 0.825,
    "T": 0.775
  },
  "destiny_reconciliation": {
    "E": 0.825,
    "G": 0.875,
    "T": 0.775
  },
  "destiny_trinity_law": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "destiny_3pdn": {
    "E": 0.875,
    "G": 0.875,
    "T": 0.825
  },
  "judgment_reconciliation": {
    "E": 0.85,
    "G": 0.9,
    "T": 0.85
  },
  "judgment_trinity_law": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "judgment_3pdn": {
    "E": 0.9,
    "G": 0.9,
    "T": 0.9
  },
  "reconciliation_trinity_law": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "reconciliation_3pdn": {
    "E": 0.9,
    "G": 0.95,
    "T": 0.9
  },
  "trinity_law_3pdn": {
    "E": 0.95,
    "G": 0.95,
    "T": 0.95
  }
}

--- END OF FILE subsystems/thonoc/config/bayes_priors.json ---

--- START OF FILE subsystems/thonoc/fractal_orbital/__init__.py ---



--- END OF FILE subsystems/thonoc/fractal_orbital/__init__.py ---

--- START OF FILE subsystems/thonoc/fractal_orbital/class_fractal_orbital_predictor.py ---

"""
Fractal Orbital Predictor Module
Scaffold + operational code
"""
from typing import List, Optional, Dict, Any
import time
import json

from bayesian_inferencer import BayesianTrinityInferencer
from ontological_node_class import OntologicalNode
from modal_verifier import ThonocVerifier

class TrinityPredictionEngine:
    def __init__(self, prior_path="bayes_priors.json"):
        self.inferencer = BayesianTrinityInferencer(prior_path)

    def predict(self,
                keywords: List[str],
                weights: Optional[List[float]] = None,
                log: bool = False,
                comment: Optional[str] = None
               ) -> Dict[str, Any]:
        prior_result = self.inferencer.infer(keywords, weights)
        trinity = prior_result["trinity"]
        c = prior_result["c"]
        terms = prior_result["source_terms"]

        node = OntologicalNode(c)
        orbit_props = node.orbit_properties

        modal_result = ThonocVerifier().trinity_to_modal_status(trinity)

        result = {
            "timestamp": time.time(),
            "source_terms": terms,
            "trinity": trinity,
            "c_value": str(c),
            "modal_status": modal_result["status"],
            "coherence": modal_result["coherence"],
            "fractal": {
                "iterations": orbit_props["depth"],
                "in_set": orbit_props["in_set"],
                "type": orbit_props["type"]
            },
            "comment": comment
        }

        if log:
            self.log_prediction(result)

        return result

    def log_prediction(self, result: Dict[str, Any], path="prediction_log.jsonl"):
        with open(path, "a") as f:
            f.write(json.dumps(result) + "\n")


--- END OF FILE subsystems/thonoc/fractal_orbital/class_fractal_orbital_predictor.py ---

--- START OF FILE subsystems/thonoc/fractal_orbital/divergence_calculator.py ---

"""
Fractal Orbital Divergence Engine
Scaffold + operational code
"""
import math
import itertools
import logging
from typing import Tuple, List, Dict, Any, Optional

from ontological_node_class import OntologicalNode
from trinity_vector import TrinityVector

logger = logging.getLogger(__name__)

class DivergenceEngine:
    """
    Generates and evaluates alternative ontological states (variants)
    diverging from a base trinity vector.
    """
    def __init__(self, delta: float = 0.05, branches_to_return: int = 8):
        if not (0 < delta < 1):
            logger.warning(f"Delta {delta} out of range; resetting to 0.05")
            delta = 0.05
        self.delta = delta
        self.branches_to_return = max(1, branches_to_return)

    def generate_variants(self, base_vector: TrinityVector) -> List[TrinityVector]:
        e0, g0, t0 = base_vector.to_tuple()
        shifts = [-self.delta, 0.0, self.delta]
        variants = set()
        for de, dg, dt in itertools.product(shifts, repeat=3):
            if de==dg==dt==0: continue
            v = TrinityVector(e0+de, g0+dg, t0+dt)
            variants.add(v)
        logger.debug(f"Generated {len(variants)} variants")
        return list(variants)

    def evaluate_variant(self, variant_vector: TrinityVector) -> Dict[str, Any]:
        try:
            modal_info = variant_vector.calculate_modal_status()
            c_value = variant_vector.to_complex()
            node = OntologicalNode(c_value)
            orbit = node.orbit_properties
            return {
                "trinity_vector": variant_vector.to_tuple(),
                "c_value": (c_value.real, c_value.imag),
                "modal_status": modal_info[0],
                "confidence": modal_info[1],
                "coherence": modal_info[1],
                "fractal": {
                    "depth": orbit.get("depth", 0),
                    "in_set": orbit.get("in_set", False),
                    "lyapunov": orbit.get("lyapunov_exponent", 0.0)
                }
            }
        except Exception as e:
            logger.error(f"Error eval variant: {e}", exc_info=True)
            return {
                "error": str(e),
                "trinity_vector": variant_vector.to_tuple()
            }

    def analyze_divergence(self,
                           base_vector: TrinityVector,
                           sort_by: str = "coherence",
                           num_results: Optional[int] = None
                          ) -> List[Dict[str, Any]]:
        n = num_results or self.branches_to_return
        variants = self.generate_variants(base_vector)
        results = [self.evaluate_variant(v) for v in variants]
        results = [r for r in results if "error" not in r]
        keyfn = {
            "coherence": lambda x: x.get("coherence",0),
            "confidence": lambda x: x.get("confidence",0),
            "depth": lambda x: x["fractal"].get("depth",0),
        }.get(sort_by, lambda x: 0)
        results.sort(key=keyfn, reverse=True)
        return results[:n]


--- END OF FILE subsystems/thonoc/fractal_orbital/divergence_calculator.py ---

--- START OF FILE subsystems/thonoc/fractal_orbital/fractal_nexus.py ---

# fractal_nexus.py
"""
fractal_nexus.py

Toolkit-level Nexus orchestrator for Fractal Orbital Predictor.
"""
import traceback
import json

from class_fractal_orbital_predictor import TrinityPredictionEngine
from divergence_calculator import DivergenceEngine
from fractal_orbital_node_generator import FractalNodeGenerator
from orbital_recursion_engine import OntologicalSpace

class FractalNexus:
    def __init__(self, prior_path: str):
        self.predictor = TrinityPredictionEngine(prior_path)
        self.divergence = DivergenceEngine()
        self.generator = FractalNodeGenerator()
        self.mapper    = OntologicalSpace()

    def run_predict(self, keywords: List[str]) -> Dict:
        try:
            res = self.predictor.predict(keywords)
            return {'output': res, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_divergence(self, trinity_vector: Tuple[float, float, float]) -> Dict:
        try:
            variants = self.divergence.analyze_divergence(trinity_vector)
            return {'output': variants, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_generate(self, c_value: complex) -> Dict:
        try:
            nodes = self.generator.generate(c_value)
            return {'output': nodes, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_map(self, query_vector: Tuple[float, float, float]) -> Dict:
        try:
            pos = self.mapper.compute_fractal_position(query_vector)
            return {'output': pos, 'error': None}
        except Exception:
            return {'output': None, 'error': traceback.format_exc()}

    def run_pipeline(self, keywords: List[str]) -> List[Dict]:
        report = []
        # 1) Predict
        p = self.run_predict(keywords)
        report.append({'step': 'predict', **p})
        if p['error'] or not p['output']:
            return report

        # Extract trinity & c_value
        trinity = p['output'].get('trinity')
        c_val   = p['output'].get('c_value')

        # 2) Divergence on trinity
        d = self.run_divergence(trinity)
        report.append({'step': 'divergence', **d})

        # 3) Generate nodes from c_value
        try:
            # convert c_value string to complex if needed
            c = complex(c_val) if isinstance(c_val, str) else c_val
        except:
            c = c_val
        g = self.run_generate(c)
        report.append({'step': 'generate', **g})

        # 4) Map trinity -> position (using first variant if available)
        if d['output']:
            first_tv = d['output'][0].get('trinity_vector')
            m = self.run_map(first_tv)
            report.append({'step': 'map', **m})

        return report

if __name__ == '__main__':
    import sys, pprint

    if len(sys.argv) < 3:
        print("Usage: python fractal_nexus.py <prior_path> <keyword1> [keyword2 ...]")
        sys.exit(1)

    prior = sys.argv[1]
    keywords = sys.argv[2:]
    nexus = FractalNexus(prior)
    result = nexus.run_pipeline(keywords)
    pprint.pprint(result)
    with open('fractal_nexus_report.json', 'w') as f:
        json.dump(result, f, indent=2)


--- END OF FILE subsystems/thonoc/fractal_orbital/fractal_nexus.py ---

--- START OF FILE subsystems/thonoc/fractal_orbital/ontological_node_class.py ---

"""Ontological Node Implementation... (rest of your docstring)"""

from typing import Dict, List, Tuple, Optional, Union, Any, Set
import math
import uuid
import time
import json
from enum import Enum
from .ontology.trinity_vector import TrinityVector

class CategoryType(Enum):
    """Node category types."""
    MATERIAL = "MATERIAL"
    METAPHYSICAL = "METAPHYSICAL"

class DomainType(Enum):
    """Ontological domain types."""
    LOGICAL = "LOGICAL"
    TRANSCENDENTAL = "TRANSCENDENTAL"

class OntologicalNode:
    """Node in ontological fractal space with 3PDN dimensional mapping."""

    def __init__(self, c_value: complex):
        # ... (the rest of your file is identical and correct) ...
        """Initialize ontological node.
        
        Args:
            c_value: Complex position in Mandelbrot space
        """
        self.c = c_value
        self.node_id = self._generate_id(c_value)
        
        # Core categorization
        self.category = CategoryType.MATERIAL if self.c.imag == 0 else CategoryType.METAPHYSICAL
        self.trinitarian_domain = DomainType.LOGICAL if self.category == CategoryType.MATERIAL else DomainType.TRANSCENDENTAL
        self.invariant_value = 3 if self.trinitarian_domain == DomainType.LOGICAL else 1
        
        # Orbital properties
        self.orbit_properties = self._calculate_orbit_properties(self.c)
        self.calculation_depth = self.orbit_properties.get("depth", 0)
        
        # Trinity indexing
        self.trinity_vector = self._calculate_trinity_vector()
        
        # Node relationships
        self.relationships = []
        self.modal_status = self._calculate_modal_status()
        self.timestamps = {"created": time.time(), "updated": time.time()}
        
        # Data payload
        self.data_payload = {
            "label": None,
            "semantic_props": {},
            "metadata": {}
        }
    
    def _generate_id(self, c_value: complex) -> str:
        """Generate unique ID for node based on complex coordinates.
        
        Args:
            c_value: Complex position
            
        Returns:
            Unique node identifier
        """
        base = f"node_{c_value.real:.6f}_{c_value.imag:.6f}"
        return f"{base}_{uuid.uuid4().hex[:8]}"
    
    def _calculate_orbit_properties(self, c: complex) -> Dict[str, Any]:
        """Calculate Mandelbrot orbit properties for complex value.
        
        Args:
            c: Complex parameter
            
        Returns:
            Orbit properties dictionary
        """
        # Maximum iterations based on domain
        max_iter = 500 if self.category == CategoryType.METAPHYSICAL else 100
        escape_radius = 2.0
        
        # Calculate orbit
        z = complex(0, 0)
        orbit = []
        
        for i in range(max_iter):
            orbit.append(z)
            z = z * z + c
            if abs(z) > escape_radius:
                break
        
        # Determine if in Mandelbrot set
        in_set = i == max_iter - 1
        
        # Calculate properties
        orbit_type = "COMPLEX_ORBIT" if i > 20 else "SIMPLE_ORBIT"
        lyapunov = self._calculate_lyapunov_exponent(orbit)
        
        return {
            "depth": i,
            "in_set": in_set,
            "orbit": orbit[:10],  # Store first 10 points for efficiency
            "type": orbit_type,
            "escape_value": abs(z),
            "final_z": (z.real, z.imag),
            "lyapunov_exponent": lyapunov
        }
    
    def _calculate_lyapunov_exponent(self, orbit: List[complex]) -> float:
        """Calculate Lyapunov exponent to measure orbital stability.
        
        Args:
            orbit: List of orbit positions
            
        Returns:
            Lyapunov exponent value
        """
        if len(orbit) < 2:
            return 0.0
            
        # Calculate derivatives along orbit
        derivatives = []
        for i in range(1, len(orbit)):
            z = orbit[i-1]
            derivative = abs(2 * z)
            if derivative > 0:
                derivatives.append(math.log(derivative))
                
        # Return average value
        if not derivatives:
            return 0.0
            
        return sum(derivatives) / len(derivatives)
    
    def _calculate_trinity_vector(self) -> TrinityVector:
        """Calculate trinity vector based on orbital properties.
        
        Returns:
            Trinity vector (Existence, Goodness, Truth)
        """
        # Extract relevant orbital properties
        in_set = self.orbit_properties.get("in_set", False)
        depth = self.orbit_properties.get("depth", 0)
        lyapunov = self.orbit_properties.get("lyapunov_exponent", 0.0)
        max_depth = 500 if self.category == CategoryType.METAPHYSICAL else 100
        
        # Calculate base existence value
        existence = 0.5
        if self.category == CategoryType.METAPHYSICAL:
            existence = 0.8  # Metaphysical category has higher existence value
        elif in_set:
            existence = 0.9  # In-set nodes have high existence
        else:
            # Scale existence by orbit depth
            existence = 0.3 + (depth / max_depth) * 0.6
        
        # Calculate goodness from imaginary component
        goodness = max(0.0, min(1.0, abs(self.c.imag) * 1.5))
        
        # Calculate truth from stability measures
        truth = 0.5
        if in_set:
            truth = 0.9  # In-set nodes have high truth value
        elif lyapunov < 0:
            # Negative Lyapunov exponent indicates stability
            truth = 0.7
        else:
            # Scale truth by orbital complexity
            truth = 0.3 + (depth / max_depth) * 0.6
        
        # Create trinity vector
        return TrinityVector(existence, goodness, truth)
    
    def _calculate_modal_status(self) -> Dict[str, List[str]]:
        """Calculate modal status based on orbital properties.
        
        Returns:
            Modal status dictionary
        """
        # Calculate modal status from trinity vector
        modal_result = self.trinity_vector.calculate_modal_status()
        status = modal_result.get("status", "impossible")
        
        # Initialize modal status tracking
        modal_status = {
            "necessary": [],
            "actual": [],
            "possible": [],
            "impossible": []
        }
        
        # Add node ID to corresponding status
        if status in modal_status:
            modal_status[status].append(self.node_id)
            
        return modal_status
    
    def update_trinity_vector(self, trinity: TrinityVector) -> None:
        """Update node's trinity vector.
        
        Args:
            trinity: New trinity vector
        """
        self.trinity_vector = trinity
        self.timestamps["updated"] = time.time()
        
        # Recalculate modal status
        new_modal = self.trinity_vector.calculate_modal_status()
        status = new_modal.get("status", "impossible")
        
        # Update modal status tracking
        for modal_type in self.modal_status:
            self.modal_status[modal_type] = []
            
        if status in self.modal_status:
            self.modal_status[status].append(self.node_id)
    
    def add_relationship(self, relation_type: str, target_node_id: str, metadata: Dict[str, Any] = None) -> None:
        """Add relationship to another node.
        
        Args:
            relation_type: Type of relation
            target_node_id: Target node ID
            metadata: Optional relationship metadata
        """
        rel = (relation_type, target_node_id, metadata or {})
        self.relationships.append(rel)
        self.timestamps["updated"] = time.time()
    
    def update_label(self, label: str) -> None:
        """Update node label.
        
        Args:
            label: New node label
        """
        self.data_payload["label"] = label
        self.timestamps["updated"] = time.time()
    
    def add_metadata(self, key: str, value: Any) -> None:
        """Add metadata to node.
        
        Args:
            key: Metadata key
            value: Metadata value
        """
        self.data_payload["metadata"][key] = value
        self.timestamps["updated"] = time.time()
    
    def calculate_3pdn_alignment(self) -> float:
        """Calculate alignment with 3PDN principles.
        
        Returns:
            Alignment score [0-1]
        """
        # This seems to be a method on TrinityVector now
        return self.trinity_vector.calculate_3pdn_alignment()
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation.
        
        Returns:
            Dictionary representation
        """
        return {
            "node_id": self.node_id,
            "c_value": {
                "real": self.c.real,
                "imag": self.c.imag
            },
            "category": self.category.value,
            "domain": self.trinitarian_domain.value,
            "invariant_value": self.invariant_value,
            "orbit_properties": {
                k: v for k, v in self.orbit_properties.items() 
                if k != 'orbit'  # Exclude orbit for efficiency
            },
            "trinity_vector": self.trinity_vector.to_tuple(),
            "modal_status": self.modal_status,
            "data_payload": self.data_payload,
            "relationships": self.relationships,
            "timestamps": self.timestamps
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'OntologicalNode':
        """Create node from dictionary representation.
        
        Args:
            data: Dictionary representation
            
        Returns:
            Ontological node
        """
        # Create base node from complex value
        c_value = complex(
            data.get("c_value", {}).get("real", 0),
            data.get("c_value", {}).get("imag", 0)
        )
        node = cls(c_value)
        
        # Override computed properties with stored values
        node.node_id = data.get("node_id", node.node_id)
        
        # Update trinity vector if available
        trinity_data = data.get("trinity_vector")
        if trinity_data and len(trinity_data) == 3:
            node.trinity_vector = TrinityVector(*trinity_data)
        
        # Update other properties
        node.modal_status = data.get("modal_status", node.modal_status)
        node.data_payload = data.get("data_payload", node.data_payload)
        node.relationships = data.get("relationships", node.relationships)
        node.timestamps = data.get("timestamps", node.timestamps)
        
        return node
    
    def calculate_metaphysical_necessity(self) -> float:
        """Calculate metaphysical necessity based on 3PDN principles.
        
        Returns:
            Necessity score [0-1]
        """
        # Extract trinity values
        e, g, t = self.trinity_vector.to_tuple()
        
        # Calculate coherence
        coherence = self.trinity_vector.calculate_coherence()
        
        # Calculate necessity factors
        stability = self.orbit_properties.get("in_set", False)
        stability_factor = 0.9 if stability else 0.5
        
        domain_factor = .9 if self.trinitarian_domain == DomainType.TRANSCENDENTAL else 0.7
        
        # Compute necessity score
        necessity = (
            (e * 0.3) +  # Existence component
            (g * 0.2) +  # Goodness component
            (t * 0.3) +  # Truth component
            (coherence * 0.1) +  # Coherence component
            (stability_factor * 0.05) +  # Stability component
            (domain_factor * 0.05)  # Domain component
        )
        
        return max(0.0, min(1.0, necessity))
    
    def is_aligned_with_resurrection(self) -> bool:
        """Determine if node aligns with resurrection principle.
        
        Returns:
            True if aligned with resurrection metaphysics
        """
        # Calculate resurrection alignment
        resurrection_factor = self.calculate_metaphysical_necessity()
        
        # Check trinity values
        e, g, t = self.trinity_vector.to_tuple()
        
        # Resurrection principle requires high existence and truth
        if e > 0.8 and t > 0.8 and resurrection_factor > 0.75:
            return True
            
        # Special case: nodes in Mandelbrot set with high goodness
        if self.orbit_properties.get("in_set", False) and g > 0.8:
            return True
            
        return False

--- END OF FILE subsystems/thonoc/fractal_orbital/ontological_node_class.py ---

--- START OF FILE subsystems/thonoc/fractal_orbital/thonoc_fractal_mapping.py ---

"""
thonoc_fractal_mapping.py

LOGOS Ontological Mapper → Fractal Position Calculator.
"""
from sympy import symbols, Not, And, Or, Implies
import numpy as np
from collections import defaultdict

class FractalNavigator:
    """
    Maps a TrinityVector → Mandelbrot coordinate + S5 modal status.
    """
    def __init__(self, config: dict):
        self.max_iterations  = config.get("max_iterations", 100)
        self.escape_radius   = config.get("escape_radius", 2.0)
        self.fractal_depth   = config.get("fractal_depth", 0)
        self.node_map        = defaultdict(dict)

    def compute_position(self, trinity_vector: tuple) -> dict:
        """
        Returns {position:(x,y), truth_value:…, iteration_depth:…}
        """
        e, g, t = trinity_vector
        c = complex(e*t, g)
        z = 0+0j
        for i in range(self.max_iterations):
            z = z*z + c
            if abs(z) > self.escape_radius:
                break
        tv = t * (1 - abs(z)/self.escape_radius) if abs(z)<=self.escape_radius else 0
        return {"position":(z.real,z.imag),"truth_value":tv,"iteration_depth":i}

    def banach_tarski_replicate(self, node_id: str, factor: int=2):
        if node_id not in self.node_map: return False
        orig = self.node_map[node_id]
        for i in range(1, factor):
            self.node_map[f"{node_id}_r{i}"] = orig.copy()
        return True


--- END OF FILE subsystems/thonoc/fractal_orbital/thonoc_fractal_mapping.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/__init__.py ---



--- END OF FILE subsystems/thonoc/symbolic_engine/__init__.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/bayesian_inferencer.py ---

"""
bayesian_inferencer.py

Inferencer for trinitarian vectors via Bayesian priors.
"""
import json
from typing import Dict, List, Optional, Any, Tuple

class BayesianTrinityInferencer:
    def __init__(self, prior_path: str = "config/bayes_priors.json"):
        try:
            with open(prior_path) as f:
                self.priors: Dict[str,Dict[str,float]] = json.load(f)
        except:
            self.priors = {}

    def infer(self, keywords: List[str], weights: Optional[List[float]]=None) -> Dict[str,Any]:
        if not keywords:
            raise ValueError("Need ≥1 keyword")
        kws = [k.lower() for k in keywords]
        wts = weights if weights and len(weights)==len(kws) else [1.0]*len(kws)
        e_total=g_total=t_total=0.0
        sum_w=0.0
        matches=[]
        for i,k in enumerate(kws):
            entry = self.priors.get(k)
            if entry:
                w=wts[i]
                e_total+=entry.get("E",0)*w
                g_total+=entry.get("G",0)*w
                t_total+=entry.get("T",0)*w
                sum_w+=w
                matches.append(k)
        if sum_w==0:
            raise ValueError("No valid priors")
        e,g,t = e_total/sum_w, g_total/sum_w, t_total/sum_w
        e,g,t = max(0, min(1,e)), max(0,min(1,g)), max(0,min(1,t))
        c = complex(e*t, g)
        return {"trinity":(e,g,t), "c":c, "source_terms":matches}


--- END OF FILE subsystems/thonoc/symbolic_engine/bayesian_inferencer.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/class_thonoc_math.py ---

"""
class_thonoc_math.py

THONOC’s core mathematical formulations with built-in verifiers.
"""
import numpy as np
from sympy import symbols, Function, Eq, solve
import math

class ThonocMathematicalCore:
    """
    Implementation of THONOC's core mathematical formulations
    with verification capabilities.
    """
    def __init__(self):
        # Trinity dimensions
        self.E = 0.0  # Existence
        self.G = 0.0  # Goodness
        self.T = 0.0  # Truth

    def set_trinity_vector(self, existence, goodness, truth):
        """Set trinity vector values."""
        self.E = float(existence)
        self.G = float(goodness)
        self.T = float(truth)
        return (self.E, self.G, self.T)

    def trinitarian_operator(self, x):
        """
        Θ(x) = ℳ_H(ℬ_S(Σ_F(x), Σ_F(x), Σ_F(x)))
        The core trinitarian transformation.
        """
        sign_value   = self.sign_function(x)
        bridge_value = self.bridge_function(sign_value, sign_value, sign_value)
        mind_value   = self.mind_function(bridge_value)
        return mind_value

    def sign_function(self, x):
        """Σ: Sign (Father, Identity)"""
        return 1.0

    def bridge_function(self, x, y, z):
        """ℬ: Bridge (Son, Non-Contradiction)"""
        return x + y + z

    def mind_function(self, x):
        """ℳ: Mind (Spirit, Excluded Middle)"""
        return 1.0 ** x

    def numeric_interpretation(self, x):
        """
        Numeric demonstration: Σ_F(x)=1 => ℬ(1,1,1)=3 => ℳ(3)=1
        """
        sign   = self.sign_function(x)
        bridge = self.bridge_function(sign, sign, sign)
        mind   = self.mind_function(bridge)
        validations = {
            "sign_value":   sign   == 1.0,
            "bridge_value": bridge == 3.0,
            "mind_value":   mind   == 1.0,
            "final_result": self.trinitarian_operator(x) == 1.0
        }
        return {"result": mind, "validations": validations, "valid": all(validations.values())}

    def essence_tensor(self):
        """
        T = FL₁ ⊗ SL₂ ⊗ HL₃ = 1⊗1⊗1 = 1 in 3D
        """
        tensor = np.array([[[1]]])
        dim = tensor.ndim
        return {"tensor": tensor, "dimension": dim, "validation": dim == 3 and tensor.item() == 1}

    def person_relation(self, operation, a, b):
        """
        Group-theoretic person relation:
        F∘S=H, S∘H=F, H∘F=S
        """
        if operation == "compose":
            if (a, b) == ("F", "S"): return "H"
            if (a, b) == ("S", "H"): return "F"
            if (a, b) == ("H", "F"): return "S"
        # verify closure
        return all([
            self.person_relation("compose", "F", "S") == "H",
            self.person_relation("compose", "S", "H") == "F",
            self.person_relation("compose", "H", "F") == "S"
        ])

    def godel_boundary_response(self, statement):
        """
        Θ(G) = ⊥ if self-referential Gödel-style statement.
        """
        st = statement.lower()
        if "this" in st and "not" in st and "provable" in st:
            return {"result":"rejected","reason":"semantically unstable","status":False}
        return {"result":"accepted","reason":"semantically stable","status":True}

    def resurrection_arithmetic(self, power):
        """
        i^0=1, i^1=i, i^2=-1, i^3=-i, i^4=1
        """
        cycle = power % 4
        return {0:1,1:1j,2:-1,3:-1j}[cycle]

    def trinitarian_mandelbrot(self, c, max_iter=100):
        """
        z_{n+1}=(z_n^3+z_n^2+z_n+c)/(i^{|z_n| mod 4}+1)
        """
        z=0+0j
        for i in range(max_iter):
            mod_factor = self.resurrection_arithmetic(int(abs(z)) % 4)
            try:
                z = (z**3 + z**2 + z + c)/(mod_factor+1)
            except ZeroDivisionError:
                return {"iterations":i,"escape":True,"z_final":z}
            if abs(z)>2:
                return {"iterations":i,"escape":True,"z_final":z}
        return {"iterations":max_iter,"escape":False,"z_final":z}

    def transcendental_invariant(self, EI, OG, AT, S1t, S2t):
        """
        U_trans = EI + S1^t - OG + S2^t - AT = 1
        """
        res = EI + S1t - OG + S2t - AT
        return {"result":res,"expected":1,"valid":abs(res-1)<1e-10}

    def logical_invariant(self, ID, NC, EM, S1b, S2b):
        """
        U_logic = ID + S1^b + NC - S2^b = 1
        """
        res = ID + S1b + NC - S2b
        return {"result":res,"expected":1,"valid":abs(res-1)<1e-10}


--- END OF FILE subsystems/thonoc/symbolic_engine/class_thonoc_math.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/modal_inference.py ---

"""
modal_inference.py

Full S5 modal-logic evaluator for THŌNOC.
"""
from enum import Enum
from typing import Dict, List, Tuple, Optional, Any
import networkx as nx
import math

class ModalOperator(Enum):
    NECESSARILY = "□"
    POSSIBLY   = "◇"
    ACTUALLY   = "A"

class ModalFormula:
    """Represents a modal logic formula with optional operator."""
    def __init__(self, content: str, operator: Optional[ModalOperator]=None):
        self.content     = content
        self.operator    = operator
        self.subformulas = []

    def __str__(self) -> str:
        return f"{self.operator.value}({self.content})" if self.operator else self.content

    def add_subformula(self, sub:'ModalFormula'):
        sub.parent = self
        self.subformulas.append(sub)

    def is_necessity(self)  -> bool: return self.operator==ModalOperator.NECESSARILY
    def is_possibility(self)-> bool: return self.operator==ModalOperator.POSSIBLY
    def dual(self)          -> 'ModalFormula':
        if self.is_necessity():   return ModalFormula(f"¬{self.content}", ModalOperator.POSSIBLY)
        if self.is_possibility(): return ModalFormula(f"¬{self.content}", ModalOperator.NECESSARILY)
        return self

class WorldNode:
    """Possible world in Kripke model."""
    def __init__(self, name:str, assignments:Dict[str,bool]=None):
        self.name=name
        self.assignments = assignments or {}
    def assign(self, prop:str, val:bool): self.assignments[prop]=val
    def evaluate(self, prop:str) -> bool: return self.assignments.get(prop, False)

class KripkeModel:
    """Graph of worlds + accessibility for modal semantics."""
    def __init__(self):
        self.graph = nx.DiGraph()
        self.worlds={}
    def add_world(self, name:str, assigns=None):
        w=WorldNode(name, assigns); self.worlds[name]=w
        self.graph.add_node(name)
        return w
    def add_access(self, w1:str, w2:str): self.graph.add_edge(w1,w2)
    def make_s5(self):
        for n in list(self.worlds):
            self.graph.add_edge(n,n)
        for u,v in list(self.graph.edges()): self.graph.add_edge(v,u)
        self.graph = nx.transitive_closure(self.graph)
    def neighbors(self, w): return list(self.graph.neighbors(w))
    def eval_necessity(self, prop, w):
        return all(self.worlds[n].evaluate(prop) for n in self.neighbors(w))
    def eval_possibility(self, prop, w):
        return any(self.worlds[n].evaluate(prop) for n in self.neighbors(w))
    def eval(self, formula:ModalFormula, w:str):
        if formula.is_necessity():  return self.eval_necessity(formula.content, w)
        if formula.is_possibility():return self.eval_possibility(formula.content, w)
        return self.worlds[w].evaluate(formula.content)

class S5ModalSystem:
    """Encapsulates an S5 Kripke model for multiple formulas."""
    def __init__(self):
        self.model = KripkeModel()
        self.actual="w0"
        self.model.add_world(self.actual)
        self.model.make_s5()
    def set_val(self, prop:str, val:bool, world=None):
        w = world or self.actual
        if w not in self.model.worlds:
            self.model.add_world(w); self.model.make_s5()
        self.model.worlds[w].assign(prop, val)
    def evaluate(self, formula:ModalFormula, world=None):
        return self.model.eval(formula, world or self.actual)
    def validate_entailment(self, premises:List[ModalFormula], concl:ModalFormula):
        for w in self.model.worlds:
            if all(self.evaluate(p,w) for p in premises) and not self.evaluate(concl,w):
                return False
        return True

class ThonocModalInference:
    """High-level modal inference for THŌNOC."""
    def __init__(self):
        self.s5 = S5ModalSystem()
        self.registry={}
        self.graph = nx.DiGraph()

    def register(self, prop_id:str, content:str, trinity:Tuple[float,float,float]):
        e,g,t = trinity
        nec = t>0.95 and e>0.9
        poss= t>0.05 and e>0.05
        val = nec or poss
        self.s5.set_val(prop_id, val)
        self.registry[prop_id] = {"content":content,"trinity":trinity}
        self.graph.add_node(prop_id)

    def entail(self, prem:str, concl:str, strength:float):
        if prem in self.registry and concl in self.registry:
            self.graph.add_edge(prem, concl, strength=strength)
            if self.registry[prem].get("necessary"):
                for s in self.graph.successors(prem):
                    self.registry[s]["necessary"]=True

    def trinity_to_modal_status(self, trinity:Tuple[float,float,float]):
        frm = ModalFormula("x")  # dummy
        return {"status": self.s5.evaluate(frm), "coherence": trinity[0]*trinity[1]*trinity[2]}


--- END OF FILE subsystems/thonoc/symbolic_engine/modal_inference.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/modal_verifier.py ---

"""
class_modal_validator.py

Lightweight modal coherence checker for THŌNOC.
"""
import networkx as nx

class ThonocVerifier:
    """Conscious modal inference system (S5 heuristics)."""
    def __init__(self):
        self.graph = nx.DiGraph()

    def trinity_to_modal_status(self, trinity: tuple) -> Dict[str, float]:
        E, G, T = trinity
        coherence = round(E * G * T, 3)
        if   coherence > 0.85: status="necessary"
        elif coherence > 0.70: status="actual"
        elif coherence > 0.50: status="possible"
        else:                  status="impossible"
        return {"status":status, "coherence":coherence}


--- END OF FILE subsystems/thonoc/symbolic_engine/modal_verifier.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/prediction_analyzer_exporter.py ---

"""
prediction_analyzer_exporter.py

THŌNOC Prediction Analyzer/Exporter.
"""
import json
import pandas as pd
import matplotlib.pyplot as plt
import argparse

def load_predictions(path="prediction_log.jsonl"):
    """Load all prediction logs from a JSONL file."""
    with open(path, "r") as f:
        return [json.loads(line) for line in f]

def summarize(preds):
    df = pd.DataFrame(preds)
    print(f"\nLoaded {len(df)} predictions.")
    print("Modal Counts:\n", df['modal_status'].value_counts())
    print(f"Average Coherence: {df['coherence'].mean():.3f}")
    return df

def plot_coherence(df):
    plt.figure()
    plt.hist(df['coherence'], bins=20)
    plt.title("Coherence Distribution")
    plt.xlabel("Coherence"); plt.ylabel("Count")
    plt.show()

def filter_predictions(df, modal=None, min_coherence=None):
    r = df.copy()
    if modal:          r = r[r['modal_status']==modal]
    if min_coherence:  r = r[r['coherence']>=min_coherence]
    return r

def export_predictions(df, out_file="filtered_predictions.csv", fmt="csv"):
    if fmt=="json":
        df.to_json(out_file, orient="records", indent=2)
    else:
        df.to_csv(out_file, index=False)
    print(f"[✔] Exported {len(df)} rows to {out_file}")

class FractalKnowledgeStore:
    """Simple JSONL-backed knowledge store for THŌNOC."""
    def __init__(self, config: dict):
        self.path = config.get("storage_path", "knowledge_store.jsonl")
    def store_node(self, **kwargs) -> str:
        node_id = kwargs.get("query_id", str(uuid.uuid4()))
        with open(self.path, "a") as f:
            f.write(json.dumps({"id":node_id, **kwargs}) + "\n")
        return node_id
    def get_node(self, node_id: str):
        try:
            with open(self.path) as f:
                for line in f:
                    rec = json.loads(line)
                    if rec.get("id")==node_id:
                        return rec
        except FileNotFoundError:
            return None
        return None

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--file", default="prediction_log.jsonl")
    parser.add_argument("--summary", action="store_true")
    parser.add_argument("--hist", action="store_true")
    parser.add_argument("--modal", choices=["necessary","actual","possible","impossible"])
    parser.add_argument("--min-coh", type=float)
    parser.add_argument("--export", choices=["csv","json"])
    args = parser.parse_args()

    preds = load_predictions(args.file)
    df = summarize(preds) if args.summary else pd.DataFrame(preds)
    if args.hist:           plot_coherence(df)
    df2 = filter_predictions(df, args.modal, args.min_coh)
    if args.export:         export_predictions(df2, fmt=args.export)


--- END OF FILE subsystems/thonoc/symbolic_engine/prediction_analyzer_exporter.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/proof_engine.py ---

import logging
from typing import Dict, List, Any
from core.unified_formalisms import UnifiedFormalismValidator, ModalProposition
from .thonoc_lambda_engine import LambdaEngine, LogosExpr, Value, Variable

class TranscendentalDomain:
    def verify_invariant(self): return True
class LogicalDomain:
    def verify_invariant(self): return True

class AxiomaticProofEngine:
    def __init__(self, lambda_engine: LambdaEngine, validator: UnifiedFormalismValidator):
        self.logger = logging.getLogger("ProofEngine")
        self.lambda_engine = lambda_engine
        self.validator = validator
        self.transcendental_domain = TranscendentalDomain()
        self.logical_domain = LogicalDomain()

    def construct_proof(self, primary_claim: str, counter_claims: List[str]) -> Dict[str, Any]:
        self.logger.info(f"Attempting to construct proof for: '{primary_claim}'")
        
        primary_expr, correspondence_map = self._formalize_claim(primary_claim)
        primary_validation = self._validate_coherence(primary_claim, primary_expr)
        primary_invariants_check = self._check_invariants()
        primary_claim_passed = primary_validation["is_coherent"] and primary_invariants_check["are_valid"]

        counter_claim_results = []
        all_counters_disproven = True
        for claim in counter_claims:
            expr, _ = self._formalize_claim(claim)
            validation = self._validate_coherence(claim, expr)
            disproven = not validation["is_coherent"]
            counter_claim_results.append({"claim": claim, "is_disproven": disproven, "reason": validation.get("reasoning")})
            if not disproven: all_counters_disproven = False

        proof_successful = primary_claim_passed and all_counters_disproven

        return {
            "primary_claim": primary_claim, "proof_successful": proof_successful,
            "formalization": {"expression": str(primary_expr), "correspondence_map": correspondence_map},
            "primary_claim_validation": primary_validation,
            "primary_claim_invariants": primary_invariants_check,
            "counter_claim_analysis": counter_claim_results
        }

    def _formalize_claim(self, claim: str) -> (LogosExpr, Dict[str, str]):
        claim_lower = claim.lower()
        mapping = {}
        if "morality" in claim_lower and "objective" in claim_lower:
            mapping = {"morality": "𝔾 (Goodness)", "objective": "□ (Necessity)"}
            expr = Value("objective_goodness", "GOODNESS")
        else:
            mapping = {"claim": "Prop"}
            expr = Variable(claim.replace(" ", "_"), "PROP")
        return expr, mapping

    def _validate_coherence(self, claim_text: str, claim_expr: LogosExpr) -> Dict[str, Any]:
        validation_request = {
            "entity": "metaphysical_claim",
            "proposition": ModalProposition(claim_text),
            "operation": "assert_as_axiom", "context": {}
        }
        result = self.validator.validate_agi_operation(validation_request)
        return { "is_coherent": result.get("authorized", False), "reasoning": result.get("reason", "Passed.") }

    def _check_invariants(self) -> Dict[str, Any]:
        trans_valid = self.transcendental_domain.verify_invariant()
        logic_valid = self.logical_domain.verify_invariant()
        are_valid = trans_valid and logic_valid
        reasoning = "All numerical invariants hold." if are_valid else "Adopting this would lead to mathematical contradiction."
        return { "are_valid": are_valid, "reasoning": reasoning }

--- END OF FILE subsystems/thonoc/symbolic_engine/proof_engine.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/thonoc_core.py ---

# logos_agi_v1/subsystems/thonoc/symbolic_engine/thonoc_core.py

"""
thonoc_core.py

Central orchestration for symbolic reasoning, fractal computation, and modal inference.
Provides unified interface for Trinity prediction engine and knowledge storage systems.

Dependencies: json, uuid, time, logging, typing
"""

import json
import uuid
import time
import logging
from typing import Dict, Any, Optional, List, Tuple

class ThonocMathematicalCore:
    """Mathematical computation engine for symbolic operations."""
    
    def __init__(self):
        self.precision = 1e-10
        self.max_iterations = 1000
    
    def compute(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Execute mathematical operations on input data."""
        return {"result": data, "status": "computed"}
    
    def symbolic_evaluate(self, expression: str) -> float:
        """Evaluate symbolic mathematical expressions."""
        try:
            return eval(expression.replace('^', '**'))
        except:
            return 0.0

class FractalNavigator:
    """Fractal space navigation and computation system."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.max_iterations = config.get("max_iterations", 100)
        self.escape_radius = config.get("escape_radius", 2.0)
    
    def navigate(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Navigate fractal space using provided coordinates."""
        return {"position": data, "iterations": self.max_iterations}
    
    def compute_orbit(self, z_initial: complex) -> List[complex]:
        """Compute fractal orbital trajectory."""
        orbit = [z_initial]
        z = z_initial
        for _ in range(self.max_iterations):
            z = z*z + z_initial
            orbit.append(z)
            if abs(z) > self.escape_radius:
                break
        return orbit

class ModalInferenceEngine:
    """Modal logic inference and reasoning system."""
    
    def __init__(self):
        self.modal_operators = ['necessary', 'possible', 'impossible']
        self.inference_rules = {}
    
    def infer(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Execute modal inference on logical propositions."""
        return {"inference": data, "modal_type": "possible"}
    
    def validate_proposition(self, proposition: str) -> bool:
        """Validate logical proposition structure."""
        return len(proposition) > 0

class TrinityPredictionEngine:
    """Trinity-based prediction and forecasting system."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.prior_path = config.get("prior_path", "")
    
    def predict(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate Trinity-enhanced predictions."""
        return {"prediction": data, "confidence": 0.75}
    
    def update_priors(self, evidence: Dict[str, Any]) -> bool:
        """Update Bayesian priors with new evidence."""
        return True

class FractalKnowledgeStore:
    """Persistent fractal-indexed knowledge storage system."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.storage_path = config.get("storage_path", "knowledge_store.jsonl")
        self.index = {}
    
    def store(self, data: Dict[str, Any]) -> str:
        """Store knowledge with fractal indexing."""
        key = str(uuid.uuid4())
        self.index[key] = data
        return key
    
    def retrieve(self, key: str) -> Optional[Dict[str, Any]]:
        """Retrieve knowledge by fractal index."""
        return self.index.get(key)

class ThonocVerifier:
    """Verification system for logical consistency and validity."""
    
    def __init__(self):
        self.verification_rules = []
    
    def verify(self, data: Dict[str, Any]) -> bool:
        """Verify data against logical consistency rules."""
        return True
    
    def validate_trinity_coherence(self, trinity_vector: Dict[str, float]) -> bool:
        """Validate Trinity vector coherence."""
        return all(0 <= v <= 1 for v in trinity_vector.values())




    def _load_config(self, path):
        # This is a placeholder for a more robust config strategy
        if path:
            try:
                with open(path) as f:
                    return json.load(f)
            except FileNotFoundError:
                logging.warning(f"Config file not found at {path}. Using defaults.")
        return {
            "fractal": {"max_iterations":100, "escape_radius":2.0},
            "prediction": {"prior_path": "config/bayes_priors.json"},
            "storage": {"storage_path": "knowledge_store.jsonl"}
        }

    # --- THIS IS YOUR ORIGINAL METHOD ---
    def process_query(self, query: str) -> Dict[str, Any]:
        """Full THŌNOC pipeline for natural-language query."""
        # 1) Map to Trinity
        tv = TrinityVector(0.5, 0.5, 0.5)  # replace with real mapping
        tr_vec = tv.to_tuple()

        # 2) Fractal Position
        pos = self.fractal_navigator.compute_position(tr_vec)

        # 3) Modal Status
        mod = self.modal_engine.trinity_to_modal_status(tr_vec)

        # 4) Prediction (optional)
        preds = None
        if any(w in query.lower() for w in ["predict", "future", "will"]):
            preds = self.prediction_engine.predict(query.split())

        # 5) Store & ID
        node_id = self.knowledge_store.store_node(
            query=query, trinity_vector=tr_vec,
            fractal_position=pos, modal_status=mod["status"],
            prediction=preds
        )

        return {
            "id": node_id,
            "query": query,
            "trinity_vector": tr_vec,
            "fractal_position": pos,
            "modal_status": mod,
            "prediction": preds,
            "timestamp": time.time()
        }

    # --- THIS IS THE NEW ADAPTER METHOD FOR THE WORKER ---
    def execute(self, payload: dict) -> dict:
        """
        Adapter method to connect the worker's payload to the core logic.
        """
        action = payload.get('action')
        logging.info(f"ThonocCore received action: {action}")

        # The worker receives tasks from Archon Nexus. We map them to
        # the appropriate methods in this class.
        if action == 'process_natural_language_query':
            query = payload.get('query')
            if not query:
                raise ValueError("Payload for 'process_natural_language_query' must contain a 'query'.")
            return self.process_query(query)

        elif action == 'run_unit_tests':
            code_ref = payload.get('code_input_ref', 'no code reference provided')
            logging.info(f"Simulating running unit tests for code from task {code_ref}.")
            return {"test_status": "passed", "coverage": "98%"}

        else:
            # As a fallback, we can treat a generic 'prompt' as a query
            prompt = payload.get('prompt')
            if prompt:
                logging.warning(f"No specific action found. Treating generic prompt as a query.")
                return self.process_query(prompt)
            
            raise NotImplementedError(f"Action '{action}' is not implemented in ThonocCore.")

--- END OF FILE subsystems/thonoc/symbolic_engine/thonoc_core.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/thonoc_lambda_engine.py ---

from typing import Dict, List, Tuple, Optional, Union, Any, Callable
from enum import Enum
import logging

class OntologicalType(Enum):
    EXISTENCE = "EXISTENCE"; GOODNESS = "GOODNESS"; TRUTH = "TRUTH"; PROP = "PROP"

class LogosExpr:
    def __str__(self): return "LogosExpr"

class Variable(LogosExpr):
    def __init__(self, name: str, onto_type: str): self.name, self.onto_type = name, OntologicalType[onto_type]
    def __str__(self): return f"{self.name}:{self.onto_type.name}"

class Value(LogosExpr):
    def __init__(self, value: str, onto_type: str): self.value, self.onto_type = value, OntologicalType[onto_type]
    def __str__(self): return f"{self.value}:{self.onto_type.name}"

class Abstraction(LogosExpr):
    def __init__(self, var_name: str, var_type: str, body: LogosExpr):
        self.var_name, self.var_type, self.body = var_name, OntologicalType[var_type], body
    def __str__(self): return f"λ{self.var_name}:{self.var_type.name}.({self.body})"

class Application(LogosExpr):
    def __init__(self, func: LogosExpr, arg: LogosExpr): self.func, self.arg = func, arg
    def __str__(self): return f"({self.func} {self.arg})"

class LambdaEngine:
    def __init__(self):
        self.evaluator = self.Evaluator(self)
    
    def substitute(self, expr, var_name, value):
        if isinstance(expr, Variable): return value if expr.name == var_name else expr
        if isinstance(expr, Value): return expr
        if isinstance(expr, Abstraction):
            if expr.var_name == var_name: return expr
            return Abstraction(expr.var_name, expr.var_type.name, self.substitute(expr.body, var_name, value))
        if isinstance(expr, Application):
            return Application(self.substitute(expr.func, var_name, value), self.substitute(expr.arg, var_name, value))
        return expr

    class Evaluator:
        def __init__(self, engine): self.engine = engine
        def evaluate(self, expr):
            if isinstance(expr, Application):
                func = self.evaluate(expr.func)
                arg = self.evaluate(expr.arg)
                if isinstance(func, Abstraction):
                    return self.evaluate(self.engine.substitute(func.body, func.var_name, arg))
                return Application(func, arg)
            if isinstance(expr, Abstraction):
                return Abstraction(expr.var_name, expr.var_type.name, self.evaluate(expr.body))
            return expr

    def evaluate(self, expr):
        return self.evaluator.evaluate(expr)

--- END OF FILE subsystems/thonoc/symbolic_engine/thonoc_lambda_engine.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/ontology/__init__.py ---



--- END OF FILE subsystems/thonoc/symbolic_engine/ontology/__init__.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/ontology/trinity_vector.py ---

\"""
Trinity Vector Implementation
Scaffold + operational code - Merged and Corrected Version
"""
import math
import cmath
from typing import Dict, Tuple

class TrinityVector:
    def __init__(self, existence: float, goodness: float, truth: float):
        self.existence = max(0, min(1, existence))
        self.goodness = max(0, min(1, goodness))
        self.truth = max(0, min(1, truth))

    def to_dict(self) -> Dict[str, float]:
        return {"existence": self.existence, "goodness": self.goodness, "truth": self.truth}

    def to_tuple(self) -> Tuple[float, float, float]:
        return (self.existence, self.goodness, self.truth)
    
    # aliasing to_tuple for consistency with OntologicalNode
    def as_tuple(self) -> Tuple[float, float, float]:
        return self.to_tuple()

    def to_complex(self) -> complex:
        return complex(self.existence * self.truth, self.goodness)

    @classmethod
    def from_complex(cls, c: complex):
        e = min(1, abs(c.real))
        g = min(1, c.imag if isinstance(c.imag, float) else 1)
        t = min(1, abs(c.imag))
        return cls(e, g, t)
    
    # --- NEW METHODS REQUIRED BY OntologicalNode ---
    def calculate_coherence(self) -> float:
        """Calculates the coherence of the vector."""
        return self.goodness / (self.existence * self.truth + 1e-9) # Avoid division by zero

    def calculate_modal_status(self) -> Dict[str, any]:
        """Calculates the modal status based on coherence and truth."""
        coherence = self.calculate_coherence()
        truth = self.truth
        status = "impossible"
        if truth > 0.9 and coherence > 0.9:
            status = "necessary"
        elif truth > 0.5:
            status = "actual"
        elif truth > 0.1:
            status = "possible"
        return {"status": status, "coherence": coherence}

    def calculate_3pdn_alignment(self) -> float:
        """Calculate alignment with 3PDN principles."""
        # A simple weighted average as a placeholder for the alignment logic
        return (self.existence * 0.4) + (self.goodness * 0.2) + (self.truth * 0.4)

--- END OF FILE subsystems/thonoc/symbolic_engine/ontology/trinity_vector.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/_backup/thonoc_core_API.py ---

"""
thonoc_core_API.py

Public API layer for THŌNOC core functionality.
"""
import json, math
from typing import Dict, List, Tuple, Optional, Any

from ontology.trinity_vector import TrinityVector
from thonoc_core import ThonocCore
from thonoc_fractal_mapping import FractalNavigator
from modal_inference import ThonocModalInference as ModalInferenceEngine

class ThonocCoreAPI:
    """High-level interface to THŌNOC system."""
    def __init__(self, config_path: Optional[str]=None):
        self.core = ThonocCore(config_path)

    def run(self, query: str) -> Dict[str, Any]:
        """
        Single-call entry point: returns full pipeline result.
        """
        return self.core.process_query(query)

    def get_coherence(self, tv: Tuple[float,float,float]) -> float:
        """
        Compute coherence of a TrinityVector.
        """
        e,g,t = tv
        ideal = e*t
        return 1.0 if g>=ideal else (g/ideal if ideal>0 else 0.0)

    def find_entailments(self, node_id: str, depth: int=1) -> List[Dict[str,Any]]:
        """Stub: expose entailments from knowledge store (if implemented)."""
        return []


--- END OF FILE subsystems/thonoc/symbolic_engine/_backup/thonoc_core_API.py ---

--- START OF FILE subsystems/thonoc/symbolic_engine/_backup/thonoc_logic_connector.py ---

"""
thonoc_logic_connector.py

Concrete adapters for Lambda Logos interfaces.
"""
import json
import uuid
import time
from abc import ABC, abstractmethod

try:
    from lambda_logos_core import (
        LambdaLogosEngine, LogosExpr, Variable, Value,
        Abstraction, Application, SufficientReason,
        OntologicalType, TypeChecker, Evaluator, EnhancedEvaluator
    )
    from logos_parser import parse_expr
    from pdn_bridge import PDNBridge, PDNBottleneckSolver
    from ontological_node import OntologicalNode
except ImportError:
    # Fallback mocks for standalone use
    class LogosExpr: pass
    class Variable: pass
    class Value: pass
    class Abstraction: pass
    class Application: pass
    class SufficientReason: pass
    class OntologicalType: pass
    class TypeChecker: pass
    class Evaluator: pass
    class EnhancedEvaluator: pass
    def parse_expr(s, env=None): return LogosExpr()
    class PDNBridge: pass
    class PDNBottleneckSolver: pass
    class OntologicalNode: pass

class ITypeSystem(ABC):
    @abstractmethod
    def check_type(self, expr): pass
    @abstractmethod
    def is_subtype(self, t1, t2): pass

class IEvaluator(ABC):
    @abstractmethod
    def evaluate(self, expr): pass
    @abstractmethod
    def substitute(self, expr, var, val): pass

class IModalBridge(ABC):
    @abstractmethod
    def trinity_to_modal(self, trinity_vector): pass

class IFractalMapper(ABC):
    @abstractmethod
    def compute_position(self, trinity_vector): pass

# Concrete Adapters

class ConcreteTypeSystem(ITypeSystem):
    def __init__(self, checker: TypeChecker):
        self.checker = checker
    def check_type(self, expr): return self.checker.check_type(expr)
    def is_subtype(self, t1, t2):   return t1==t2

class ConcreteEvaluator(IEvaluator):
    def __init__(self, ev: Evaluator):
        self.ev=ev
    def evaluate(self, expr):      return self.ev.evaluate(expr)
    def substitute(self, expr, v, val): return self.ev.substitute(expr, v, val)

class ConcreteFractalMapper(IFractalMapper):
    def __init__(self, nav: FractalNavigator):
        self.nav=nav
    def compute_position(self, trinity_vector):
        return self.nav.compute_position(trinity_vector)

class ConcreteModalBridge(IModalBridge):
    def __init__(self, verifier):
        self.verifier = verifier
    def trinity_to_modal(self, trinity_vector):
        return self.verifier.trinity_to_modal_status(trinity_vector)


--- END OF FILE subsystems/thonoc/symbolic_engine/_backup/thonoc_logic_connector.py ---

