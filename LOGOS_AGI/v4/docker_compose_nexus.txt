# logos_agi_v2/docker-compose.nexus.yml

version: '3.8'

services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: logos_rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: logos
      RABBITMQ_DEFAULT_PASS: logos_secure_2025
      RABBITMQ_DEFAULT_VHOST: /logos
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - logos_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional Redis for caching
  redis:
    image: redis:7-alpine
    container_name: logos_redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logos_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database for persistence
  postgres:
    image: postgres:15
    container_name: logos_postgres
    hostname: postgres
    environment:
      POSTGRES_DB: logos_agi
      POSTGRES_USER: logos
      POSTGRES_PASSWORD: logos_secure_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - logos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logos -d logos_agi"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LOGOS NEXUS - The Executive/Will
  logos_nexus:
    build:
      context: .
      dockerfile: services/logos_nexus/Dockerfile
    container_name: logos_nexus
    hostname: logos_nexus
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      POSTGRES_HOST: postgres
      POSTGRES_DB: logos_agi
      POSTGRES_USER: logos
      POSTGRES_PASS: logos_secure_2025
      REDIS_HOST: redis
      LOG_LEVEL: INFO
      SAFETY_MODE: STRICT
      SERVICE_NAME: logos_nexus
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./goals:/app/goals
      - ./audit:/app/audit
    networks:
      - logos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from core.unified_formalisms import UnifiedFormalismValidator; v=UnifiedFormalismValidator(); print('OK')"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # ARCHON NEXUS - The Planner/Mind
  archon_nexus:
    build:
      context: .
      dockerfile: services/archon_nexus/Dockerfile
    container_name: archon_nexus
    hostname: archon_nexus
    depends_on:
      rabbitmq:
        condition: service_healthy
      logos_nexus:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      POSTGRES_HOST: postgres
      POSTGRES_DB: logos_agi
      POSTGRES_USER: logos
      POSTGRES_PASS: logos_secure_2025
      LOG_LEVEL: INFO
      SERVICE_NAME: archon_nexus
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./workflows:/app/workflows
    networks:
      - logos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; pika.BlockingConnection(pika.ConnectionParameters('rabbitmq'))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # TETRAGNOS Worker - Pattern Recognition
  tetragnos_worker:
    build:
      context: .
      dockerfile: subsystems/tetragnos/Dockerfile
    container_name: tetragnos_worker
    hostname: tetragnos_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      archon_nexus:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      WORKER_TYPE: tetragnos
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - logos_network
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; pika.BlockingConnection(pika.ConnectionParameters('rabbitmq'))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TELOS Worker - Causal Reasoning
  telos_worker:
    build:
      context: .
      dockerfile: subsystems/telos/Dockerfile
    container_name: telos_worker
    hostname: telos_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      archon_nexus:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      WORKER_TYPE: telos
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - logos_network
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; pika.BlockingConnection(pika.ConnectionParameters('rabbitmq'))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # THONOC Worker - Logical Reasoning
  thonoc_worker:
    build:
      context: .
      dockerfile: subsystems/thonoc/Dockerfile
    container_name: thonoc_worker
    hostname: thonoc_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      archon_nexus:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      WORKER_TYPE: thonoc
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - logos_network
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; pika.BlockingConnection(pika.ConnectionParameters('rabbitmq'))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service Worker
  database_service:
    build:
      context: .
      dockerfile: services/database/Dockerfile
    container_name: database_service
    hostname: database_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      POSTGRES_HOST: postgres
      POSTGRES_DB: logos_agi
      POSTGRES_USER: logos
      POSTGRES_PASS: logos_secure_2025
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - logos_network
    restart: unless-stopped

  # Keryx API Gateway
  keryx_api:
    build:
      context: .
      dockerfile: services/keryx_api/Dockerfile
    container_name: keryx_api
    hostname: keryx_api
    depends_on:
      logos_nexus:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      RABBITMQ_VHOST: /logos
      LOG_LEVEL: INFO
      API_PORT: 8000
      API_HOST: 0.0.0.0
    volumes:
      - ./logs:/app/logs
    networks:
      - logos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Oracle UI (Web Interface)
  oracle_ui:
    build:
      context: .
      dockerfile: services/oracle_ui/Dockerfile
    container_name: oracle_ui
    hostname: oracle_ui
    depends_on:
      keryx_api:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      API_BASE_URL: http://keryx_api:8000
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - logos_network
    restart: unless-stopped

  # System Initialization Service
  initializer:
    build:
      context: .
      dockerfile: scripts/Dockerfile.init
    container_name: logos_initializer
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: logos
      RABBITMQ_PASS: logos_secure_2025
      POSTGRES_HOST: postgres
      POSTGRES_DB: logos_agi
      POSTGRES_USER: logos
      POSTGRES_PASS: logos_secure_2025
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - logos_network
    command: ["python", "/app/scripts/initialize_nexus_services.py"]
    restart: "no"

# Volumes for data persistence
volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

# Network configuration
networks:
  logos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16